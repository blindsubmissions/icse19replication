/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 08:11:52 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.");
      discretize0.getUseBinNumbers();
      discretize0.invertSelectionTipText();
      discretize0.setOutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.";
      stringArray0[1] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[2] = "\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.";
      stringArray0[3] = "'B";
      stringArray0[4] = "\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.";
      discretize0.toString();
      stringArray0[5] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[6] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[7] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      try { 
        Filter.useFilter((Instances) null, discretize0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DiscretizeCols = null;
      discretize0.setMakeBinary(true);
      discretize0.getBinRangesString(82);
      int[] intArray0 = new int[9];
      intArray0[0] = 82;
      intArray0[1] = 82;
      intArray0[2] = 82;
      intArray0[3] = 82;
      intArray0[4] = 82;
      intArray0[5] = 82;
      intArray0[6] = 82;
      intArray0[7] = 82;
      intArray0[8] = 82;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.7976931348623157E308), intArray0, 82);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "F";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize("F");
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getUseEqualFrequency();
      int int0 = (-2921);
      // Undeclared exception!
      try { 
        range0.setUpper(255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at F
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "M";
      Discretize discretize0 = new Discretize("M");
      discretize0.m_UseBinNumbers = true;
      discretize0.setUseBinNumbers(true);
      discretize0.setInvertSelection(true);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("U=A");
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "^ZkI\"u;QAf&qFm;EE";
      stringArray0[3] = "7r4&jhr\"[Xs8J{[34";
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(6, stringArray1.length);
      
      discretize0.globalInfo();
      discretize0.useEqualFrequencyTipText();
      discretize0.setInvertSelection(false);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("'All'");
      discretize0.setOutputFormat();
      discretize0.setUseBinNumbers(false);
      discretize0.useBinNumbersTipText();
      discretize0.findNumBinsTipText();
      discretize0.m_FindNumBins = false;
      discretize0.setFindNumBins(false);
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.makeBinaryTipText();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      discretize0.getCapabilities();
      discretize0.useBinNumbersTipText();
      int[] intArray0 = new int[1];
      intArray0[0] = 1283;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.useBinNumbersTipText();
      int int0 = 0;
      // Undeclared exception!
      try { 
        range0.getSelection();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("-O");
      discretize0.setDesiredWeightOfInstancesPerInterval(170.70308370354215);
      discretize0.setOutputFormat();
      discretize0.setAttributeIndices("+/.5`6..ZF");
      discretize0.setDesiredWeightOfInstancesPerInterval(2.0);
      discretize0.getFindNumBins();
      discretize0.setInvertSelection(false);
      discretize0.m_UseBinNumbers = true;
      discretize0.binsTipText();
      discretize0.getUseBinNumbers();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      Instance instance0 = null;
      boolean boolean0 = true;
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.m_IgnoreClass = false;
      discretize0.m_UseEqualFrequency = false;
      discretize0.getOptions();
      discretize0.getCapabilities();
      discretize0.getCutPoints(0);
      discretize0.getBinRangesString(4);
      discretize0.getOptions();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 530.1998;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1946.110617;
      doubleArray1[4] = 606.875;
      doubleArray1[5] = (-1250.31723688404);
      doubleArray1[6] = 4786.0414857462;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1250.31723688404);
      doubleArray3[3] = 1946.110617;
      doubleArray3[4] = 2.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 606.875;
      doubleArray4[1] = (-1250.31723688404);
      doubleArray4[2] = 1946.110617;
      doubleArray4[3] = 4786.0414857462;
      doubleArray4[4] = 4786.0414857462;
      doubleArray4[5] = 1946.110617;
      doubleArray4[6] = 1946.110617;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 2.0;
      doubleArray5[1] = 4786.0414857462;
      doubleArray5[2] = (-1250.31723688404);
      doubleArray5[3] = 4786.0414857462;
      doubleArray5[4] = 2.0;
      doubleArray5[5] = (-1250.31723688404);
      doubleArray5[6] = 606.875;
      doubleArray5[7] = 530.1998;
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(1272);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1272
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("(");
      Discretize discretize1 = new Discretize("      for (int i = 0; i < filtered.length; i++) {\n");
      try { 
        discretize1.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3146637213846315
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      range0.toDisplay();
      discretize0.getBinRangesString(1301);
      Discretize discretize1 = new Discretize("");
      discretize1.getOptions();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 4.8;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 5.5;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.2;
      doubleArray1[5] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 5.5;
      doubleArray2[1] = 1.2;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 5.5;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1.2;
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DiscretizeCols = null;
      discretize0.setMakeBinary(true);
      discretize0.getBinRangesString(82);
      int[] intArray0 = new int[9];
      intArray0[0] = 82;
      intArray0[1] = 82;
      intArray0[2] = 82;
      intArray0[3] = 82;
      intArray0[4] = 82;
      intArray0[5] = 82;
      discretize0.getCapabilities();
      intArray0[6] = 82;
      intArray0[7] = 82;
      intArray0[3] = 82;
      String[] stringArray0 = new String[0];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7184734013300127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "first-last");
      discretize0.attributeIndicesTipText();
      discretize0.getOptions();
      discretize0.globalInfo();
      discretize0.useEqualFrequencyTipText();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.20082764903455
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range(";E|Mji~+!|p");
      discretize0.m_DiscretizeCols = range0;
      range0.toDisplay();
      discretize0.getCutPoints((-170));
      range0.setInvert(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      
      discretize0.getCutPoints((-170));
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.871476118054867
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "^ZkI\"u;QAf&qFm;EE";
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.attributeIndicesTipText();
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      discretize0.globalInfo();
      discretize0.useEqualFrequencyTipText();
      discretize0.m_UseEqualFrequency = true;
      discretize0.setInvertSelection(false);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.128279560827871
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]";
      stringArray0[1] = "";
      stringArray0[2] = "^ZkI\"u;QAf&qFm;EE";
      stringArray0[3] = "7r4&jhr\"[Xs8J{[34";
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.setDesiredWeightOfInstancesPerInterval((-75.079));
      discretize0.attributeIndicesTipText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      discretize0.m_IgnoreClass = true;
      discretize0.globalInfo();
      discretize0.useEqualFrequencyTipText();
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      discretize0.setOutputFormat();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(false);
      double[][] doubleArray0 = new double[19][2];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(86);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0688846458275627
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }
}
