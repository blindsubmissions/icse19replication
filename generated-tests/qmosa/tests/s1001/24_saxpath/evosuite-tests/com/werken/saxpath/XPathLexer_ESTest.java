/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:57:25 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierStartChar('{');
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      xPathLexer0.endPosition();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.getPreviousToken();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("");
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.comma();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.minus();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
      
      int int1 = xPathLexer0.endPosition();
      assertEquals(0, int1);
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      xPathLexer0.minus();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.slashes();
      assertEquals("1", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("g", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("I}", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("r", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("Y", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("Y", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.setXPath("@(O vmvUlclq#9");
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("@", token6.getTokenText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-316));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.consume((-1889));
      assertNull(xPathLexer0.getXPath());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6428005294990358
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C{>#Z{");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(">", token2.getTokenText());
      assertEquals(9, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("Z", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals("{", token6.getTokenText());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer0.div();
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2399438073868714
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("(", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      char char0 = xPathLexer0.LA(121);
      assertEquals('\uFFFF', char0);
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.getXPath();
      xPathLexer0.setPreviousToken(token4);
      assertEquals(6, token4.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.setXPath("|(q#&Z*2*c]6Ej9f}d");
      Token token7 = xPathLexer0.nextToken();
      assertEquals(17, token7.getTokenType());
      assertEquals("|", token7.getTokenText());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals("(", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("q", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1368599053565
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      Token token1 = xPathLexer0.plus();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.LA(1737);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(1737);
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.nextToken();
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2875493488414336
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.setXPath("h<J:7aD+kC");
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(0);
      xPathLexer0.consume(1);
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.consume(1);
      assertEquals("h<J:7aD+kC", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.899757101143057
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.plus();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.LA(1737);
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(502);
      xPathLexer0.consume(0);
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.consume(0);
      assertEquals("com.werken.saxpath.XPathLexer", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.487951400508264
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.setXPath("h<J:7aD+kC");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("h", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("J", token1.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(89);
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer1.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer1.currentPosition();
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
  }
}
