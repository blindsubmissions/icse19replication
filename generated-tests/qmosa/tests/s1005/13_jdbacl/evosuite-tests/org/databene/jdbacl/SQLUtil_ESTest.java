/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:01:28 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Connection;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.command.dml.RunScriptCommand;
import org.h2.engine.ConnectionInfo;
import org.h2.engine.Database;
import org.h2.engine.Session;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      String string0 = SQLUtil.renderValue("");
      assertEquals("''", string0);
      
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "''";
      stringArray0[2] = "";
      stringArray0[3] = ", ";
      stringArray0[4] = "''";
      stringArray0[5] = "''";
      stringArray0[6] = "''";
      stringArray0[7] = "''";
      stringArray0[8] = "''";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, '', , , , '', '', '', '', '')", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "ZQIT]mKH^I2&V8vs@\"";
      stringArray0[2] = "ZQIT]mKH^I2&V8vs@\"";
      String string0 = SQLUtil.innerJoin("ZQIT]mKH^I2&V8vs@\"", stringArray0, " on ", " on ", stringArray0);
      assertEquals(" on  as  on  on ZQIT]mKH^I2&V8vs@\". =  on . and ZQIT]mKH^I2&V8vs@\".ZQIT]mKH^I2&V8vs@\" =  on .ZQIT]mKH^I2&V8vs@\" and ZQIT]mKH^I2&V8vs@\".ZQIT]mKH^I2&V8vs@\" =  on .ZQIT]mKH^I2&V8vs@\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.isDDL("Xp0&");
      DBSchema dBSchema0 = new DBSchema("Xp0&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R;@C*&", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "R;@C*&";
      stringArray0[1] = "Xp0&";
      stringArray0[2] = "R;@C*&";
      stringArray0[3] = "R;@C*&";
      stringArray0[4] = "Xp0&";
      stringArray0[5] = "Xp0&";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Xp0&", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append('1');
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) dBPrimaryKeyConstraint0);
      int int0 = 97;
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) "R;@C*&", (-480), 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -480, end 97, s.length() 6
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "F'UVt^QT9?d+(";
      stringArray0[1] = "F'UVt^QT9?d+(";
      stringArray0[2] = "F'UVt^QT9?d+(";
      stringArray0[3] = "F'UVt^QT9?d+(";
      stringArray0[4] = "F'UVt^QT9?d+(";
      stringArray0[5] = "F'UVt^QT9?d+(";
      stringArray0[6] = "F'UVt^QT9?d+(";
      SQLUtil.renderColumnListWithTableName("F'UVt^QT9?d+(", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("F'UVt^QT9?d+(");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2248), (CharSequence) "F'UVt^QT9?d+(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2248
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      Integer.compare(282, 197);
      Integer.divideUnsigned(282, 282);
      SQLUtil.substituteMarkers("derby.product.external.name", "derby.product.external.name", integer0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.isProcedureCall("B4dx2T");
      String string0 = "<=>";
      SQLUtil.substituteMarkers("<=>", "<=>", "<=>");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "B4dx2T";
      stringArray0[2] = "!txf0 -i";
      stringArray0[3] = "";
      stringArray0[4] = "<=>";
      stringArray0[5] = "B4dx2T";
      stringArray0[6] = "'<=>'";
      stringArray0[7] = "<=>";
      SQLUtil.leftJoin("<=>", stringArray0, "UNIQUE ", "UNIQUE ", stringArray0);
      SQLUtil.renderValue("B4dx2T");
      DBCatalog dBCatalog0 = new DBCatalog("<=>");
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("inner");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'inner'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " (";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" (", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("dU<YTmcTLeV&IG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format(" (", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, true);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter2);
      assertNotSame(mockPrintWriter2, mockPrintWriter1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = "f1 rY2Kkl6?6E";
      SQLUtil.normalize("f1 rY2Kkl6?6E", true);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("f1 rY2Kkl6?6E", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'f1 rY2Kkl6?6E'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("B4dx2T");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("<=>", false);
      assertEquals("< = >", string0);
      
      String string1 = SQLUtil.removeComments("< = >");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.isDDL("create table");
      String string0 = "]3uwHrME21O1TP=$)YD";
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("]3uwHrME21O1TP=$)YD", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.isDML("4x2@T");
      String string0 = "<=>";
      SQLUtil.normalize("<=>", false);
      String string1 = "alter table";
      TableContainer tableContainer0 = new TableContainer("4x2@T");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("< = >");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      String string1 = "W'@";
      DBSchema dBSchema0 = new DBSchema("W'@");
      String string2 = "call";
      dBSchema0.getTable("call");
      SQLUtil.ownerDotComponent(dBSchema0);
      boolean boolean0 = false;
      dBSchema0.getSequences(false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.isDML(" REFERENCES ");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("v>", "v>", versionNumber0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("8rA:~r\"SzGvn4|]$", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderValue((Object) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      SQLUtil.addOptionalCondition(".[", stringBuilder1);
      assertEquals("null or .[", stringBuilder1.toString());
      assertEquals("null or .[", stringBuilder0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML(" REFERENCES ");
      assertFalse(boolean0);
      
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "create materialized view";
      stringArray0[5] = "v>";
      stringArray0[6] = null;
      stringArray0[7] = " REFERENCES ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-243), "v>");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals(" : V>", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Character character0 = new Character('k');
      SQLUtil.renderValue(character0);
      String string0 = "user.country";
      String string1 = "P)L\" 7P";
      VersionNumber versionNumber0 = VersionNumber.valueOf("Hhcz@<)G/E1)2W^WPWz");
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("P)L\" 7P", "P)L\" 7P", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("'k'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ''k''
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[4] = ".gE";
      stringArray0[5] = "";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[4] = ".gE";
      stringArray1[5] = ".gE";
      stringArray1[6] = "";
      SQLUtil.join(".gE", ".gE", stringArray0, "", ".gE", stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder(1300);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      SQLUtil.addOptionalCondition(".gE", stringBuilder1);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML(" REFERENCES ");
      assertFalse(boolean0);
      
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "create materialized view";
      stringArray0[5] = "v>";
      stringArray0[6] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/*", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT /* ", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML(" REFERENCES ");
      assertFalse(boolean0);
      
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "create materialized view";
      stringArray0[5] = "v>";
      stringArray0[6] = null;
      stringArray0[7] = " REFERENCES ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-243), "v>");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.isDML(" REFERENCES ");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 125, "l5Sme3i)hnRn)q[");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = SQLUtil.removeComments("l5Sme3i)hnRn)q[");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.isDML(" REFERENCES ");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 133, "l5Sme3i)hnRn)q[");
      String[] stringArray0 = new String[8];
      stringArray0[0] = " REFERENCES ";
      stringArray0[1] = " REFERENCES ";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[2] = " REFERENCES ";
      stringArray0[3] = null;
      stringArray0[4] = "select intoreferences";
      stringArray0[5] = " REFERENCES ";
      stringArray0[6] = "select intoreferences";
      stringArray0[7] = "l5Sme3i)hnRn)q[";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("LO", defaultDBTable0, 460, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6779087256441981
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop table/\"2=1h;(t{w[_a#<r_");
      assertTrue(boolean0);
      
      String string0 = SQLUtil.normalize("drop table/\"2=1h;(t{w[_a#<r_", true);
      assertEquals("drop table / \"2=1h;(t{w[_a#<r_\"", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8043716191528454
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select");
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  ( WHERE null = null", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery("O?8@r%=305L4G");
      StringBuilder stringBuilder0 = new StringBuilder("O?8@r%=305L4G");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O?8@r%=305L4G");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",,f!+E+&j}y", defaultDBTable0, 90081, "YY");
      Integer integer0 = RawTransaction.ABORT;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.removeComments("l5Sme3i)hnRn)q[");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(" (", defaultDBTable0, 0, " (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      SQLUtil.isDDL(" (");
      SQLUtil.normalize(" (", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(";
      stringArray0[1] = "(";
      stringArray0[2] = "<@po{$";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "<@po{$", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT <@po{$ ", stringBuilder0.toString());
      
      Boolean boolean0 = SQLUtil.mutatesStructure("(");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.isDML("select into");
      SQLUtil.normalize("select into", true);
      String string1 = "8BK\\^Gh{";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2^J]twDc");
      // Undeclared exception!
      try { 
        DBDataType.getInstance(" or ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " (";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" (", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.renderValue(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \" (\" FOREIGN KEY ( () REFERENCES  (( ()", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string1);
      assertEquals("table  (", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.7589367727620595
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.isDML("r0d=pTErq");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("buffer.length ", false);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("buffer.length ");
      // Undeclared exception!
      try { 
        dBCatalog0.removeTable("9!\u0002.iA2D[DR\"vd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '9!\u0002.iA2D[DR\"vd'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.isDML("\f&Z%^*Cd~]'VEv");
      SQLUtil.isQuery("\f&Z%^*Cd~]'VEv");
      String string0 = "yI";
      int int0 = (-347169415);
      StringBuilder stringBuilder0 = new StringBuilder(32767);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("r0d=pterq", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(32767, 'K');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8446214763655029
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.isQuery("isSameRM(xares);");
      StringBuilder stringBuilder0 = new StringBuilder(1);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("{YM[G", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append('{');
      stringBuilder2.reverse();
      SQLUtil.addOptionalCondition("{YM[G", stringBuilder0);
      SQLUtil.addRequiredCondition("{YM[G", stringBuilder1);
      assertEquals("{G[MY{ or {YM[G and {YM[G", stringBuilder1.toString());
      
      Boolean boolean0 = SQLUtil.mutatesStructure("{YM[G");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.7902679680745903
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("\f&Z%^*Cd~]'VEv");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("{%9MK>2(`zSc*c", false);
      assertEquals("{ % 9MK > 2 (` zSc * c", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Random.setNextRandom(6);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "select into(";
      stringArray0[1] = "select into";
      stringArray0[2] = "create materialized view";
      stringArray0[3] = "!^Yf\")3$$";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select into", false, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      String string0 = SQLUtil.typeAndName(defaultDBTable1);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("w");
      SQLUtil.removeComments("w");
      Random.setNextRandom(1577);
      String string0 = SQLUtil.normalize("?w*H!$#)W yM8", true);
      assertEquals("? w * H ! $ #) W yM8", string0);
      
      String string1 = SQLUtil.normalize("exec", false);
      assertEquals("exec", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-1144);
      Random.setNextRandom((-1144));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F9Gx(ADp[+Z", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBTable0.setSchema((DBSchema) null);
      File file0 = MockFile.createTempFile("D]/p&}d@ZUt!{9SFP;", "UNIQUE ");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      PrintWriter printWriter0 = mockPrintWriter0.append('W');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.isQuery("UNIQUE ");
      SQLUtil.mutatesDataOrStructure("alter tablew");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.mutatesStructure("org.apache.derby.impl.store.access.conglomerate.RowPosition");
      DBDataType dBDataType0 = DBDataType.getInstance((-421), "%Q");
      Integer integer0 = new Integer(1168);
      Integer integer1 = new Integer((-421));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%Q", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-1224), "e2!Nu@|Bz8~z");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.setNullable(true);
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4595940595484427
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.isDML("\f&Z%^*Cd~]'VEv");
      SQLUtil.parseColumnTypeAndSize(".");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.removeComments("");
      Random.setNextRandom((-3354));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("32@q'D[HVPZB$?", false);
      SQLUtil.normalize("", false);
      SQLUtil.mutatesStructure(".");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("zE?H", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-3354));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = SQLUtil.isQuery("O?8@r%=305L4G");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder("O?8@r%=305L4G");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O?8@r%=305L4G");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index", defaultDBTable0, (-62), "Sc");
      defaultDBColumn0.setOwner(defaultDBTable0);
      defaultDBTable0.setDoc("drop table/\"2=1h;(t{w[_a#<r_");
      DBDataType.getInstance("BLOB");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("alter index, alter index", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.20478541691352
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Random.setNextRandom((-1144));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F9Gx(ADp[+Z", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBTable0.setSchema((DBSchema) null);
      File file0 = MockFile.createTempFile("D]/p&}d@ZUt!{9SFP;", "UNIQUE ");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      PrintWriter printWriter0 = mockPrintWriter0.append('W');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.isQuery("UNIQUE ");
      SQLUtil.mutatesDataOrStructure("alter tablew");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.mutatesStructure("org.apache.derby.impl.store.access.conglomerate.RowPosition");
      DBDataType dBDataType0 = DBDataType.getInstance((-421), "%Q");
      Integer integer0 = new Integer(1168);
      Integer integer1 = new Integer((-421));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%Q", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.mutatesStructure("FOREIGN KEY ");
      SQLUtil.isProcedureCall("FKTABLENAME");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("alter tablew");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.normalize("FO-r", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("inner", (DBSchema) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "FO-r";
      stringArray0[1] = "inner";
      stringArray0[2] = "inner";
      stringArray0[3] = "FO-r";
      stringArray0[4] = "FO - r";
      stringArray0[5] = "inner";
      stringArray0[6] = "org.apache.derby.impl.sql.compile.IntersectOrExceptNode";
      stringArray0[7] = "FO - r";
      stringArray0[8] = "inner";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "FO-r", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("inner", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.typeAndName(dBTable0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("%[h*5G.$2ZCk&FL7l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      SQLUtil.parseColumnTypeAndSize("renameforeign key");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" (", defaultDBTable0, (DBDataType) null, integer0, integer0);
      linkedList0.offer(defaultDBColumn0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      Random.setNextRandom(679);
      System.setCurrentTimeMillis((-737L));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("=X@W3B)W s5!Rg)wC", "alter indexorg.apache.derby.impl.store.access.conglomerate.rowposition", (VersionNumber) null);
      defaultDatabase0.getTable("update", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-2984), "update");
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/\"2=1H;(T{W[_A#<R_", (DBTable) null, dBDataType0, integer0, integer1);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setSize(integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3439604435494825
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("/\"2=1H;(T{W[_A#<R_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?]_a* /Gnc/U,i|", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("?]_a* /Gnc/U,i|", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/\"2=1H;(T{W[_A#<R_";
      stringArray0[1] = "/\"2=1H;(T{W[_A#<R_";
      stringArray0[2] = "/\"2=1H;(T{W[_A#<R_";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/\"2=1H;(T{W[_A#<R_", true, dBTable0, (String[]) null, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("drop tablet7h0{3-k:h*fhihx");
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '!';
      charArray0[2] = '8';
      charArray0[3] = 'h';
      stringBuilder0.append(charArray0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, 'n');
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-588), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -588
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("{qt^", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Boolean boolean0 = SQLUtil.mutatesStructure("alter materialized view");
      assertTrue(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("drop indexdrop index5)}");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6330395116644678
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select");
      boolean boolean0 = SQLUtil.isDDL(" = ");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.isProcedureCall("execselect");
      SQLUtil.mutatesStructure("drop materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("5)}");
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("drop materialized view");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'drop materialized view' not found in table '5)}'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.33993636078058
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("/\"2=1H;(T{W[_A#<R_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?]_a* /Gnc/U,i|", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("?]_a* /Gnc/U,i|", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/\"2=1H;(T{W[_A#<R_";
      stringArray0[2] = "/\"2=1H;(T{W[_A#<R_";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/\"2=1H;(T{W[_A#<R_", false, dBTable0, (String[]) null, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("drop tablet7h0{3-k:h*fhihx");
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '!';
      charArray0[2] = '8';
      charArray0[3] = 'h';
      stringBuilder0.append(charArray0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, 'n');
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-588), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -588
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8848713335781606
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      SQLUtil.mutatesDataOrStructure("nt5C");
      SQLUtil.normalize("call*cl,=3r", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery("create tablealter materialized view");
      SQLUtil.isProcedureCall("call*cl,=3r");
      SQLUtil.normalize("8;mm'", true);
      String string0 = "kh\\']";
      try { 
        Integer.decode("kh']");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kh']\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5992212565872683
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      defaultDBTable0.getCheckConstraints();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Boolean boolean0 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("Z>bg!a4");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("FOREIGN KEY ", "FOREIGN KEY ");
      File file0 = MockFile.createTempFile("FOREIGN KEY ", "Z>bg!a4", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean2 = SQLUtil.isQuery("0&^}V{)?w#v'");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8937882323911377
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      defaultDBTable0.getCheckConstraints();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" (", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderValue(dBForeignKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT \" (\" FOREIGN KEY () REFERENCES  (()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\" FOREIGN KEY (\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.removeComments("BA?,{1PwVoGg@D:+");
      SQLUtil.removeComments("BA?,{1PwVoGg@D:+");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BA?,{1PwVoGg@D:+");
      SQLUtil.removeComments("ordinal_position in");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1590, "alter session");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BA?,{1PwVoGg@D:+", defaultDBTable0, dBDataType0, integer0, integer1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RDW4vw";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("RDW4vw", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((long) 1590);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1590, 3209L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1590
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8065071652616695
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate- 0");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.401145618230712
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Random.setNextRandom((-1144));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F9Gx(ADp[+Z", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBTable0.setSchema((DBSchema) null);
      File file0 = MockFile.createTempFile("F9Gx(ADp[+Z", "UNIQUE ");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "drop index");
      PrintWriter printWriter0 = mockPrintWriter0.append('W');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.isDML("F9Gx(ADp[+Z");
      SQLUtil.mutatesDataOrStructure("alter tablew");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.mutatesStructure("t7h0{3-K:H*fHihx");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.mutatesDataOrStructure("UNIQUE ");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter tabledrop materialized view", false, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("w");
      defaultDBTable0.getCheckConstraints();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[12];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("w", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderValue(dBForeignKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT w FOREIGN KEY (, , , , , , , , , , , ) REFERENCES w(, , , , , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1318243223071356
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLUtil.isDML("(");
      SQLUtil.isQuery("select into");
      String string0 = "drop materialized view";
      SQLUtil.isProcedureCall("'#|3_/G");
      SQLUtil.normalize("43X17.U", false);
      try { 
        Integer.decode("%/E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%/E\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
