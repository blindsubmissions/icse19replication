/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:24:17 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = "|e1P\\T.T2.%0}";
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_majority = 23.38;
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass(509.14504924691, (Instances) null, 0.0, (-1512.258413));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, int0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip.main((String[]) null);
      JRip jRip0 = new JRip();
      int int0 = 346;
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(346);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", (List<String>) null, (ProtectedProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip0.getRevision();
      double[] doubleArray0 = new double[1];
      jRip0.getOptions();
      doubleArray0[0] = (-4329.422809815);
      DenseInstance denseInstance0 = new DenseInstance((-4329.422809815), doubleArray0);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("( n", "( n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(100);
      jRip0.toString();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.");
      attribute0.value(100);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.accu = 368.7944886763;
      jRip_NominalAntd0.getRevision();
      jRip0.checkErrorRateTipText();
      jRip0.seedTipText();
      jRip0.setMinNo(2706.5963);
      jRip0.listOptions();
      jRip0.getCapabilities();
      int int0 = (-1423);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-1423));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.globalInfo();
      jRip0.setOptimizations(6);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.getConsequent();
      jRip0.debugTipText();
      jRip0.checkErrorRateTipText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Whether check for error rate >= 1/2 is included in stopping criterion.";
      stringArray0[1] = "Whether debug information is output to the console.";
      stringArray0[2] = "Whether check for error rate >= 1/2 is included in stopping criterion.";
      stringArray0[3] = string0;
      stringArray0[4] = "Whether debug information is output to the console.";
      stringArray0[5] = "Whether debug information is output to the console.";
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      JRip.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      AbstractClassifier.makeCopies(jRip0, 0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      jRip_RipperRule0.getRevision();
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute((-2370));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      long long0 = (-509L);
      jRip0.setSeed((-509L));
      Instances instances0 = null;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, 945, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 469.7227636901908;
      jRip0.getOptions();
      jRip0.setMinNo(0.0);
      AbstractClassifier.makeCopy(jRip0);
      String string0 = "u{eOOSamgW'@";
      // Undeclared exception!
      try { 
        jRip0.getMeasure("u{eOOSamgW'@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // u{eOOSamgW'@ not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(1.0);
      jRip0.optimizationsTipText();
      int[] intArray0 = new int[5];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The number of optimization runs.";
      stringArray0[1] = "The number of optimization runs.";
      stringArray0[2] = "The number of optimization runs.";
      stringArray0[3] = "The number of optimization runs.";
      stringArray0[4] = "The number of optimization runs.";
      stringArray0[5] = "The number of optimization runs.";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      intArray0[0] = 45;
      intArray0[1] = 37;
      intArray0[2] = (-625);
      intArray0[3] = 1988;
      intArray0[4] = (-1892);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(1.0, (double[]) null, intArray0, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(2484.038756233575);
      jRip0.minNoTipText();
      JRip jRip1 = new JRip();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      jRip0.getSeed();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2.0);
      int[] intArray0 = new int[5];
      intArray0[0] = 76;
      intArray0[1] = 0;
      intArray0[2] = 1036;
      intArray0[3] = 160;
      intArray0[4] = (-2101);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.toString();
      int int0 = 2548;
      jRip0.toString();
      SparseInstance sparseInstance0 = new SparseInstance(2548);
      int int1 = 1;
      sparseInstance0.toString(1, 1);
      jRip_RipperRule0.covers(sparseInstance0);
      jRip0.getTechnicalInformation();
      try { 
        jRip0.classifyInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("v:IM@{we%,YL", arrayList0, protectedProperties0);
      MockFile mockFile0 = new MockFile("\tSet the number of runs of\n\toptimizations. (Default: 2)", "real");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      protectedProperties0.list((PrintWriter) mockPrintWriter0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      jRip0.getUsePruning();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip0.setOptimizations(29);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      AbstractClassifier.makeCopy(jRip0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip0.getMinNo();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("$", arrayList0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-138.6336489);
      jRip0.getTechnicalInformation();
      jRip0.toString();
      jRip0.foldsTipText();
      jRip0.getCheckErrorRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-138.6336489));
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip0.enumerateMeasures();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      jRip_NumericAntd0.getAccu();
      jRip_NumericAntd0.accu = (-424.8785097687573);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("p}J3", arrayList0, 4);
      instances0.deleteWithMissing(attribute0);
      jRip_NumericAntd0.accu = Double.POSITIVE_INFINITY;
      attribute0.addRelation(instances0);
      jRip0.setFolds(2);
      jRip0.setUsePruning(true);
      jRip_NumericAntd0.toString();
      jRip0.debugTipText();
      jRip0.minNoTipText();
      jRip0.getMinNo();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "relational";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      stringArray0[4] = "real";
      stringArray0[5] = "@relation";
      stringArray0[6] = "weka/core/Capabilities.props";
      jRip0.setOptions(stringArray0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.POSITIVE_INFINITY, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip0.enumerateMeasures();
      jRip_NumericAntd0.getAccu();
      jRip_NumericAntd0.accu = (-424.8785097687573);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("p}J3", arrayList0, 4);
      instances0.deleteWithMissing(attribute0);
      jRip_NumericAntd0.accu = Double.POSITIVE_INFINITY;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 469.7227636901908;
      jRip0.getOptions();
      jRip0.setMinNo(0.0);
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      jRip1.setDebug(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("]snQS'`R]2]|J'/9@}", arrayList1, 0);
      Instances.mergeInstances(instances0, instances0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 568;
      intArray0[1] = (-1050);
      intArray0[2] = 83;
      intArray0[3] = 2338;
      intArray0[4] = 9;
      intArray0[5] = (-1025);
      intArray0[6] = 3939;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-138.6336489), intArray0, 3939);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean0);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      Attribute attribute0 = new Attribute("`5'P=iBZ`V");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("", list1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.getRevision();
      jRip0.enumerateMeasures();
      jRip_NumericAntd0.getAccu();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList1, 3);
      instances0.deleteWithMissing(attribute0);
      attribute1.addRelation(instances0);
      jRip0.setFolds(1275);
      jRip0.setUsePruning(false);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd1.toString();
      jRip0.getOptions();
      assertEquals(1275, jRip0.getFolds());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("aVuf&3", (String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 1);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-138.6336489);
      jRip0.getTechnicalInformation();
      jRip0.toString();
      jRip0.foldsTipText();
      jRip0.getDebug();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-138.6336489));
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\noldDL: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "declaration of subrelation ");
      jRip0.enumerateMeasures();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      binarySparseInstance0.dataset();
      double double0 = (-1177.5);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-1.0), (-1177.5));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1025), intArray0, 3939);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("", list0, 3939);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute(":#x`9!~'AF");
      jRip_RipperRule0.toString(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = " => :#x`9!~'AF=";
      stringArray0[1] = "string";
      stringArray0[2] = "real";
      stringArray0[3] = "relational";
      stringArray0[4] = "date";
      stringArray0[5] = "@end";
      Attribute.main(stringArray0);
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.copy();
      jRip_RipperRule0.hasAntds();
      jRip_NominalAntd0.getRevision();
      jRip_RipperRule0.hasAntds();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1);
      arrayList0.listIterator();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      protectedProperties0.propertyNames();
      Attribute attribute0 = new Attribute("Unable to find the name of the package in the Description file for ", instances0, protectedProperties0);
      jRip_RipperRule0.toString(attribute0);
      System.setCurrentTimeMillis(0L);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, (-0.5), 1);
      jRip0.getOptions();
      jRip0.setOptions((String[]) null);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AbstractClassifier.makeCopy(jRip0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (byte)41;
      doubleArray0[2] = (double) (byte)81;
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute(":%Q8E_IL", linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jRip1.getFolds());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.getTechnicalInformation();
      jRip0.setOptimizations(92);
      jRip0.seedTipText();
      jRip0.foldsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.setConsequent(1.0E-6);
      jRip0.getFolds();
      try { 
        jRip_RipperRule1.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-138.6336489);
      jRip0.getTechnicalInformation();
      jRip0.checkErrorRateTipText();
      jRip0.foldsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.setConsequent((-138.6336489));
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("", (String) null);
      jRip_RipperRule0.toString(attribute0);
      jRip_RipperRule0.hasAntds();
      Attribute attribute1 = new Attribute(" instances", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      jRip_NominalAntd0.accu = 64.0;
      SparseInstance sparseInstance0 = new SparseInstance(3);
      jRip_NominalAntd0.covers(sparseInstance0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Attribute attribute0 = new Attribute("oj#q=", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      boolean boolean1 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean1 == boolean0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[9];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)41;
      byteArray0[6] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute(":%Q8E_IL", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (byte)41;
      doubleArray0[2] = (double) (byte)81;
      doubleArray0[3] = (double) (byte)81;
      doubleArray0[4] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)81, doubleArray0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Beta condition cannot be satisfied, take alpha c5ndition", arrayList0, (byte)81);
      Attribute attribute0 = new Attribute("@data", instances0, 0);
      Attribute attribute1 = new Attribute("date", (List<String>) null);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 2.0, 1);
      IBk iBk0 = new IBk((-852));
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      boolean boolean0 = false;
      jRip_RipperRule0.prune(instances0, false);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c", arrayList0, 1);
      arrayList0.listIterator();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      protectedProperties0.propertyNames();
      jRip_RipperRule0.setConsequent(1);
      assertEquals(1.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.grow(instances0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule2.hasAntds();
      assertEquals((-1.0), jRip_RipperRule2.getConsequent(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("8", arrayList0, 1);
      instances0.toArray();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      instances0.add((Instance) denseInstance0);
      arrayList0.listIterator();
      jRip_RipperRule0.setConsequent(1);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale.getISOLanguages();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("8", arrayList0, 1);
      instances0.toArray();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 2900.5458252856606;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      instances0.add((Instance) denseInstance0);
      arrayList0.listIterator();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("8", linkedList0, 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 22.0, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale.getISOLanguages();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 1;
      Instances instances0 = new Instances("8", arrayList0, 1);
      instances0.toArray();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 2900.5458252856606;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      instances0.add((Instance) denseInstance0);
      arrayList0.listIterator();
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("#0En}]<;wASs>!J", linkedList0, 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 4, (-553.70768));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }
}
