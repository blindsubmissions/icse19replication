/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:35:35 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("Headers match");
      double double0 = (-1.0);
      discretize0.m_ClassIndex = (-489);
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-1.0);
      discretize0.getInvertSelection();
      discretize0.getCapabilities();
      discretize0.findNumBinsTipText();
      discretize0.getMakeBinary();
      discretize0.setInvertSelection(false);
      discretize0.setDesiredWeightOfInstancesPerInterval(830.323344305);
      discretize0.globalInfo();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-489);
      int[] intArray0 = new int[3];
      intArray0[0] = (-489);
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.invertSelectionTipText();
      discretize0.getBinRangesString((-79));
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      
      discretize0.setUseEqualFrequency(false);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-23.7);
      doubleArray1[1] = (-3507.05866940317);
      doubleArray1[2] = (-283.1316115248944);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-283.1316115248944);
      doubleArray2[1] = (-283.1316115248944);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = (-23.7);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-23.7);
      doubleArray3[1] = (-23.7);
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = (-283.1316115248944);
      doubleArray4[2] = (-23.7);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = (-283.1316115248944);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = (-3507.05866940317);
      doubleArray5[3] = (-3507.05866940317);
      doubleArray5[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-283.1316115248944);
      doubleArray6[2] = (-283.1316115248944);
      doubleArray6[3] = (-283.1316115248944);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = Double.NEGATIVE_INFINITY;
      doubleArray7[1] = Double.NEGATIVE_INFINITY;
      doubleArray7[2] = (-3507.05866940317);
      doubleArray7[3] = 1040.59;
      doubleArray7[4] = (-283.1316115248944);
      doubleArray7[5] = Double.NEGATIVE_INFINITY;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-23.7);
      doubleArray8[2] = Double.NEGATIVE_INFINITY;
      doubleArray8[3] = 1.0;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      double[][] doubleArray9 = new double[0][4];
      discretize0.m_CutPoints = doubleArray9;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tInvert matching sense of column indexes.";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      discretize0.getRevision();
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka.core.UnsupportedAttributeTypeException";
      stringArray0[1] = "REMJhOupj_Nil";
      stringArray0[2] = "V";
      stringArray0[3] = "#$pyg.l``&=e2";
      stringArray0[4] = "";
      stringArray0[5] = "-d?v_!MB";
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.m_IgnoreClass = false;
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      
      discretize0.getInvertSelection();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "7E'IDNN~";
      Discretize discretize0 = new Discretize("7E'IDNN~");
      discretize0.setOutputFormat();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      
      discretize0.setBins(0);
      assertEquals(0, discretize0.getBins());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "'AQc>E-O-ce9#~M'$z";
      Discretize discretize0 = new Discretize("'AQc>E-O-ce9#~M'$z");
      discretize0.m_DesiredWeightOfInstancesPerInterval = 271.44231206;
      discretize0.getAttributeIndices();
      discretize0.useEqualFrequencyTipText();
      StringReader stringReader0 = new StringReader("'AQc>E-O-ce9#~M'$z");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[AQc>E-O-ce9#~M], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.615630577027551
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.setBins((-263));
      discretize0.setIgnoreClass(true);
      Filter.makeCopies(discretize0, 2004);
      discretize0.globalInfo();
      discretize0.setBins(4852);
      discretize0.getOptions();
      assertEquals(4852, discretize0.getBins());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize("\"position\" has unknown type");
      boolean boolean0 = false;
      boolean boolean1 = true;
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 3441.4517;
      doubleArray1[2] = 811.52827;
      doubleArray1[3] = 5.3;
      doubleArray1[4] = (-2337.690943378427);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-2337.690943378427);
      doubleArray3[1] = 811.52827;
      doubleArray3[2] = 811.52827;
      doubleArray3[3] = 811.52827;
      doubleArray3[4] = 811.52827;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 5.3;
      doubleArray4[2] = 5.3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 811.52827;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = (-1804.65280996);
      doubleArray6[2] = 3441.4517;
      doubleArray6[3] = 3441.4517;
      doubleArray6[4] = 3441.4517;
      doubleArray6[5] = (-2337.690943378427);
      doubleArray6[6] = 811.52827;
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useBinNumbersTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.useBinNumbersTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(936);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("integer");
      discretize0.m_UseBinNumbers = false;
      discretize0.setDesiredWeightOfInstancesPerInterval(365.954215348);
      discretize0.setMakeBinary(false);
      discretize0.getBinRangesString((-3404));
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setIgnoreClass(false);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      Instances instances0 = null;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      discretize0.binsTipText();
      discretize0.m_MakeBinary = true;
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      discretize0.setAttributeIndices("_!BG%A8 @0");
      discretize0.setUseBinNumbers(true);
      discretize0.getInvertSelection();
      discretize0.getRevision();
      discretize0.findNumBinsTipText();
      discretize0.getCutPoints(2110);
      discretize0.makeBinaryTipText();
      discretize0.getCapabilities();
      int int0 = (-2544);
      AllFilter allFilter0 = new AllFilter();
      try { 
        Filter.wekaStaticWrapper(allFilter0, " -file <dataset> [-c <class index>]\n", (Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("Plo~P+}Xd_4?>W}");
      Filter.makeCopies(discretize0, 1739);
      discretize0.listOptions();
      int[] intArray0 = new int[3];
      intArray0[0] = 1739;
      intArray0[1] = 1739;
      intArray0[2] = 1739;
      int[] intArray1 = new int[9];
      intArray1[0] = 1739;
      intArray1[1] = 1739;
      intArray1[2] = 1739;
      intArray1[3] = 1739;
      intArray1[4] = 1739;
      intArray1[5] = 1739;
      intArray1[6] = 1739;
      intArray1[7] = 1739;
      intArray1[8] = 1739;
      discretize0.setAttributeIndicesArray(intArray1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1739, intArray0, 1739);
      int int0 = 2192;
      // Undeclared exception!
      try { 
        binarySparseInstance0.setValueSparse(1739, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5665989181145106
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize(";uTvmMgc3l0i");
      int int0 = (-1388);
      discretize0.setUseBinNumbers(true);
      discretize0.getBinRangesString((-1388));
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.03195622385697
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getOptions();
      System.setCurrentTimeMillis(0L);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 363;
      doubleArray1[1] = (double) 363;
      doubleArray1[2] = (double) 363;
      doubleArray1[3] = (double) 363;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 363;
      doubleArray2[1] = (double) 363;
      doubleArray2[2] = (double) 363;
      doubleArray2[3] = (double) 363;
      doubleArray2[4] = (double) 363;
      doubleArray2[5] = (double) 363;
      doubleArray2[6] = (double) 363;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 363;
      doubleArray3[1] = (double) 363;
      doubleArray3[2] = (double) 363;
      doubleArray3[3] = (double) 363;
      doubleArray3[4] = (double) 363;
      doubleArray3[5] = (double) 363;
      doubleArray3[6] = (double) 363;
      doubleArray3[7] = (double) 363;
      doubleArray3[8] = (double) 363;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (double) 363;
      doubleArray4[1] = (double) 363;
      doubleArray4[2] = (double) 363;
      doubleArray4[3] = (double) 363;
      doubleArray4[4] = (double) 363;
      doubleArray4[5] = (double) 363;
      doubleArray4[6] = (double) 363;
      doubleArray4[7] = (double) 363;
      doubleArray4[8] = (double) 363;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (double) 363;
      doubleArray5[1] = (double) 363;
      doubleArray5[2] = (double) 363;
      doubleArray5[3] = (double) 363;
      doubleArray5[4] = (double) 363;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (double) 363;
      doubleArray6[1] = (double) 363;
      doubleArray6[2] = (double) 363;
      doubleArray6[3] = 300.0;
      doubleArray6[4] = (double) 363;
      doubleArray6[5] = (double) 363;
      doubleArray6[6] = (double) 363;
      doubleArray6[7] = (double) 363;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 300.0;
      doubleArray7[1] = (double) 363;
      doubleArray7[2] = 3726.7104262;
      doubleArray7[3] = 300.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (double) 363;
      doubleArray8[1] = (double) 363;
      doubleArray8[2] = 300.0;
      doubleArray8[3] = 300.0;
      doubleArray8[4] = 3726.7104262;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = 300.0;
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(363);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 363
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tInvert matchin6 se#se of -olumN indexes.");
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1865.0209097;
      doubleArray1[1] = (-245.05560658007);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2217.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1865.0209097;
      doubleArray2[1] = (-245.05560658007);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1865.0209097;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 2217.0;
      doubleArray2[8] = 1865.0209097;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1865.0209097;
      doubleArray3[1] = 2217.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 2217.0;
      doubleArray4[4] = (-245.05560658007);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-558.32609506637);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 2217.0;
      doubleArray6[1] = 1.0;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = 2217.0;
      doubleArray6[4] = 2217.0;
      doubleArray6[5] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 1865.0209097;
      doubleArray7[1] = (-558.32609506637);
      doubleArray7[2] = 2217.0;
      doubleArray7[3] = (-558.32609506637);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = (-245.05560658007);
      doubleArray7[6] = (-558.32609506637);
      doubleArray7[7] = 1865.0209097;
      doubleArray7[8] = (-558.32609506637);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 1.0;
      doubleArray8[1] = (-558.32609506637);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = 0.0;
      doubleArray9[2] = (-245.05560658007);
      doubleArray9[3] = (-558.32609506637);
      doubleArray9[4] = 0.0;
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      Discretize discretize1 = new Discretize("\tInvert matchin6 se#se of -olumN indexes.");
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(609);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 609
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V";
      stringArray0[1] = ";uTvmMgc3l0i";
      stringArray0[2] = "-B";
      stringArray0[3] = "No input instance format defined";
      stringArray0[4] = "_";
      stringArray0[5] = "\"position\" has unknown type";
      stringArray0[6] = "-R";
      stringArray0[7] = "\tUse bin numbers rather than ranges for discretized attributes.";
      stringArray0[8] = "H?";
      Discretize.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_ClassIndex = (-2013265917);
      discretize0.m_MakeBinary = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setUseBinNumbers(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9412316867217543
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
      
      discretize0.getCapabilities();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.338371704803573
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      System.setCurrentTimeMillis(1204L);
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.setDesiredWeightOfInstancesPerInterval((-1.7976931348623157E308));
      discretize0.getOptions();
      System.setCurrentTimeMillis((-1L));
      discretize0.getOptions();
      assertEquals((-1.7976931348623157E308), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.293118601486813
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize("Specify range of attributesto act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range wth \"-\". E.g: \"first-3,5,6-10,last\".");
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      discretize0.getCapabilities();
      StringReader stringReader0 = new StringReader("Specify range of attributesto act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range wth \"-\". E.g: \"first-3,5,6-10,last\".");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Specify], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.17157089695751
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("      else if (format.attribute(i).isNumeric())\n");
      discretize0.setMakeBinary(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.setIgnoreClass(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
