/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:41:12 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 0;
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      String string0 = "ws):";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("ws):");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ws):
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-1), int0);
      
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setMaxThreadsForNioWrite((-3535));
      advancedSettings0.setPerformancePreferencesConnectionTime((-3535));
      advancedSettings0.setByteBufferSize((-3535));
      advancedSettings0.setMaxThreadsForNioWrite((-3535));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTrafficClass("\t<client-socket-send-buffer-size>");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getCharset();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "+H'{GTm?oTnJ";
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("5GhbMx<0)Y>21");
      int int0 = 65536;
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("+H'{GTm?oTnJ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // +H'{GTm?oTnJ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite((-2475));
      advancedSettings0.setPerformancePreferencesBandwidth((-2475));
      advancedSettings0.setQSObjectPoolMaker("%;K");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("Y8`G!:!~@l'q^(x.Q");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketReceiveBufferSize(274);
      advancedSettings0.setClientSocketTrafficClass("%;K");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setByteBufferSize((-500));
      assertEquals((-2475), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-4489));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier(",p77tY");
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setQSObjectPoolMaker("Y]$q'fZ0j~W");
      assertEquals((-4489), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketSendBufferSize(1399);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(1399, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.214496050675049
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setSocketLinger(3472);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setQSObjectPoolMaker("EREMJh");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.toXML((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("EREMJh");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // EREMJh
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.99529437005769
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(69);
      advancedSettings0.setClientSocketSendBufferSize((-1303));
      advancedSettings0.toXML("1F26fBUwCm");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.toXML("5F");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      assertEquals(10, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3549875696248246
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(359);
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientSocketSendBufferSize(1069);
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-4210));
      advancedSettings0.setMaxThreadsForNioWrite(1069);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.toXML("602{G");
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setBacklog(1069);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("602{G<advanced-settings>\n602{G\t<charset>ISO-8859-1</charset>\n602{G\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n602{G\t<byte-buffer-size>65536</byte-buffer-size>\n602{G\t<backlog>0</backlog>\n602{G\t<socket-linger>-1</socket-linger>\n602{G\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n602{G\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n602{G\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n602{G\t<max-threads-for-nio-write>1069</max-threads-for-nio-write>\n602{G\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n602{G\t<performance-preferences-latency>0</performance-preferences-latency>\n602{G\t<performance-preferences-bandwidth>359</performance-preferences-bandwidth>\n602{G\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n602{G\t<client-socket-send-buffer-size>1069</client-socket-send-buffer-size>\n602{G</advanced-settings>\n");
      advancedSettings0.setSocketLinger(1805);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize(1069);
      advancedSettings0.setClientSocketReceiveBufferSize(4159);
      advancedSettings0.getBacklog();
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketSendBufferSize(1069);
      advancedSettings0.toXML("602{G<advanced-settings>\n602{G\t<charset>ISO-8859-1</charset>\n602{G\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n602{G\t<byte-buffer-size>65536</byte-buffer-size>\n602{G\t<backlog>0</backlog>\n602{G\t<socket-linger>-1</socket-linger>\n602{G\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n602{G\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n602{G\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n602{G\t<max-threads-for-nio-write>1069</max-threads-for-nio-write>\n602{G\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n602{G\t<performance-preferences-latency>0</performance-preferences-latency>\n602{G\t<performance-preferences-bandwidth>359</performance-preferences-bandwidth>\n602{G\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n602{G\t<client-socket-send-buffer-size>1069</client-socket-send-buffer-size>\n602{G</advanced-settings>\n");
      advancedSettings0.setBacklog(1069);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals("602{G<advanced-settings>\n602{G\t<charset>ISO-8859-1</charset>\n602{G\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n602{G\t<byte-buffer-size>65536</byte-buffer-size>\n602{G\t<backlog>0</backlog>\n602{G\t<socket-linger>-1</socket-linger>\n602{G\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n602{G\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n602{G\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n602{G\t<max-threads-for-nio-write>1069</max-threads-for-nio-write>\n602{G\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n602{G\t<performance-preferences-latency>0</performance-preferences-latency>\n602{G\t<performance-preferences-bandwidth>359</performance-preferences-bandwidth>\n602{G\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n602{G\t<client-socket-send-buffer-size>1069</client-socket-send-buffer-size>\n602{G</advanced-settings>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2444926304072963
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setQSObjectPoolMaker("!W|0o?pIKNVW5");
      advancedSettings0.toXML("QF$t^~B!G");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setPerformancePreferencesLatency((-1373));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesConnectionTime((-2159));
      assertEquals((-1373), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5665989181145106
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setByteBufferSize(1196);
      advancedSettings0.setMaxThreadsForNioWrite((-1264));
      advancedSettings0.getCharset();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getBacklog();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setBacklog((-1264));
      advancedSettings0.setClientSocketSendBufferSize(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("?fv1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ?fv1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.toXML("&0M9)[Jy-IJv");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings1.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
  }
}
