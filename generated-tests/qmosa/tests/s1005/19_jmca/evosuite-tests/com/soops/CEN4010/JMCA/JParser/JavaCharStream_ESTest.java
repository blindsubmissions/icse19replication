/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:17:41 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("7?0aOE5", "Qn)&R(1sDyr}bg8<p");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, 0, 0);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 3923;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 3923, 3923);
      javaCharStream0.column = 3923;
      javaCharStream0.prevCharIsLF = false;
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.prevCharIsLF = false;
      javaCharStream0.adjustBeginLineColumn(0, 0);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 0, 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, 14, 0);
      char[] charArray0 = javaCharStream0.GetSuffix(0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3509, 3509, 0);
      javaCharStream0.GetImage();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)0;
      pipedOutputStream0.write(byteArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 3509;
      javaCharStream0.bufcolumn = intArray0;
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('q');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaCharStream.hexval('c');
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      stringReader0.read(charArray0);
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      int int0 = (-78);
      javaCharStream0.adjustBeginLineColumn((-78), 1696);
      stringReader0.markSupported();
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7E'IDNN~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-623), (-1891));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      javaCharStream0.backup(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      javaCharStream0.ExpandBuff(false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals('7', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4096, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-590), (-590));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = (-1);
      int int1 = 1805;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), 1805);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (-1), (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.line = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[=xPR{lyvVYh`");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.FillBuff();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}RU4yR");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(125, int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\\", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      int int1 = stringReader0.read(charBuffer0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertArrayEquals(new char[] {''}, charArray0);
      assertEquals(1, charArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int2 = javaCharStream0.getBeginLine();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int3 = JavaCharStream.hexval('c');
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(12, int3);
      
      int int4 = javaCharStream0.getBeginLine();
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray1 = javaCharStream0.GetSuffix(1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('c');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 501;
      PipedInputStream pipedInputStream0 = new PipedInputStream(501);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1465), (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      Reader reader0 = null;
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.nextCharInd = (-2835);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2834
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int0 = sequenceInputStream0.available();
      assertEquals(0, int0);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = 'i';
      charArray0[3] = 'G';
      charArray0[4] = 'h';
      charArray0[5] = '2';
      charArray0[6] = '\'';
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char char0 = '2';
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-24), 4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int1 = (-1);
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int2 = 0;
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '2';
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = '$';
      charArray0[2] = 's';
      charArray0[3] = '<';
      charArray0[4] = 'w';
      charArray0[5] = 'x';
      charArray0[6] = 'J';
      int int0 = stringReader0.read(charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {',', '$', 's', '<', 'w', 'x', 'J'}, charArray0);
      assertEquals(7, charArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char char0 = 'W';
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2161022480912633
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M2J+-u5D[HFh_5\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-623), 1539);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 144, 635);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("M2J+-u5D[HFh_5\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip(1539);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(15L, long0);
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.backup((-623));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(622, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertNotSame(stringReader0, stringReader1);
      
      javaCharStream0.ExpandBuff(false);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(622, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertNotSame(stringReader0, stringReader1);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals('M', char0);
      assertEquals(623, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(144, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(635, javaCharStream0.getColumn());
      assertEquals(635, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(144, javaCharStream0.getLine());
      assertNotSame(stringReader0, stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader0, 144, 0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}RU4yR");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      try { 
        JavaCharStream.hexval('o');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
      
      String string0 = "2@";
      StringReader stringReader0 = new StringReader("2@");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      int int1 = stringReader0.read(charArray0);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertArrayEquals(new char[] {'2', '@', 'c'}, charArray0);
      assertEquals(3, charArray0.length);
      
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7E'IDNN~");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1891));
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7E'IDNN~");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-623), (-1891));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long1 = stringReader0.skip(0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      javaCharStream0.backup(3);
      assertEquals(4092, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.ExpandBuff(false);
      assertEquals(4092, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals('\u0000', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4093, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-590), (-590));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('\u0000');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0882231038287276
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(78);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 78);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 78);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      boolean boolean2 = pushbackInputStream0.markSupported();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean3 = pushbackInputStream0.markSupported();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.bufpos = 10;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      charArray0[1] = '2';
      charArray0[2] = 'E';
      javaCharStream0.buffer = charArray0;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9404479886553264
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[4] = '6';
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertNotNull(sequenceInputStream1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream1);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      stringReader0.reset();
      javaCharStream0.maxNextCharInd = 584;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.adjustBeginLineColumn(1, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = JavaCharStream.hexval('C');
      assertEquals(12, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int1 = JavaCharStream.hexval('A');
      assertFalse(int1 == int0);
      assertEquals(10, int1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = JavaCharStream.hexval('7');
      assertEquals(7, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.2287207447761076
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M2J+-u5D[HFh_5\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-623), 1539);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      char char0 = 'V';
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8290814369082264
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M2J+-u5D[HFh_5\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-623), 1539);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('M', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-623), javaCharStream0.getEndLine());
      assertEquals(1539, javaCharStream0.getBeginColumn());
      assertEquals(1539, javaCharStream0.getColumn());
      assertEquals((-623), javaCharStream0.getLine());
      assertEquals(1539, javaCharStream0.getEndColumn());
      assertEquals((-623), javaCharStream0.getBeginLine());
      
      int int1 = javaCharStream0.getEndColumn();
      assertFalse(int1 == int0);
      assertEquals(1539, int1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-623), javaCharStream0.getEndLine());
      assertEquals(1539, javaCharStream0.getBeginColumn());
      assertEquals(1539, javaCharStream0.getColumn());
      assertEquals((-623), javaCharStream0.getLine());
      assertEquals(1539, javaCharStream0.getEndColumn());
      assertEquals((-623), javaCharStream0.getBeginLine());
      
      javaCharStream0.UpdateLineColumn('T');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1540, javaCharStream0.getColumn());
      assertEquals((-623), javaCharStream0.getEndLine());
      assertEquals(1540, javaCharStream0.getBeginColumn());
      assertEquals(1540, javaCharStream0.getEndColumn());
      assertEquals((-623), javaCharStream0.getLine());
      assertEquals((-623), javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[1];
      int int2 = JavaCharStream.hexval('9');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(9, int2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals("M", string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1540, javaCharStream0.getColumn());
      assertEquals((-623), javaCharStream0.getEndLine());
      assertEquals(1540, javaCharStream0.getBeginColumn());
      assertEquals(1540, javaCharStream0.getEndColumn());
      assertEquals((-623), javaCharStream0.getLine());
      assertEquals((-623), javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char char0 = '6';
      char char1 = 'M';
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }
}
