/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:23:44 GMT 2018
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.event.ItemListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.math.BigInteger;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.event.ListDataListener;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.Rotation;
import org.pdfsam.guiclient.dto.VisualPageListItem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      int int0 = 0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)27;
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)27;
      byteArray2[1] = (byte)48;
      byteArray2[2] = (byte)48;
      byteArray2[3] = (byte)27;
      byteArray2[4] = (byte) (-27);
      byteArray2[5] = (byte)18;
      byteArray2[6] = (byte)27;
      byteArray2[7] = (byte) (-27);
      byteArray2[8] = (byte)27;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(2616, 0, byteArray0, byteArray1, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      intArray0[1] = 4;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-567);
      intArray0[5] = 0;
      intArray0[6] = 1;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.removeElements(0, 0, true);
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[8];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      defaultTableModelArray0[0] = defaultTableModel0;
      Object[][] objectArray0 = new Object[7][2];
      Object[] objectArray1 = new Object[0];
      objectArray0[0] = objectArray1;
      objectArray0[1] = (Object[]) defaultTableModelArray0;
      objectArray0[2] = (Object[]) defaultTableModelArray0;
      objectArray0[3] = (Object[]) defaultTableModelArray0;
      Object[] objectArray2 = new Object[5];
      objectArray2[0] = (Object) defaultTableModel0;
      objectArray2[1] = (Object) treeSet0;
      objectArray2[2] = (Object) defaultTableModel0;
      objectArray2[3] = (Object) collection0;
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel1.getElementAt((-3645));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3645
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-925);
      boolean boolean0 = true;
      visualListModel0.removeElements((-925), (-925), true);
      int int1 = 100;
      float[] floatArray0 = new float[0];
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(100, 100, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 0 and should be 10000
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 3;
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(3, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int int0 = 766;
      intArray0[1] = 766;
      intArray0[2] = 1430;
      intArray0[3] = 1507;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.clearData();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.appendAllElements(hashSet0);
      visualListModel0.prependAllElements(hashSet0);
      visualListModel0.elementsChanged();
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(766);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[0];
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultTableModelArray0);
      visualListModel0.addListDataListener(jComboBox0);
      intArray0[0] = (-721);
      intArray0[1] = 0;
      visualListModel0.moveDownIndex((-721));
      intArray0[2] = (-3276);
      intArray0[3] = 0;
      intArray0[4] = (-600);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.moveUpIndex(0);
      int[] intArray1 = new int[1];
      intArray1[0] = (-600);
      visualListModel0.rotateClockwiseElements(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 269;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-643);
      intArray0[5] = (-2051);
      visualListModel0.removeElements(intArray0, true);
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox0.getPreferredSize();
      boolean boolean0 = true;
      jComboBox0.enableInputMethods(true);
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1340);
      intArray0[1] = 2008;
      intArray0[2] = 0;
      int int0 = 1377;
      intArray0[3] = 1377;
      visualListModel0.getValidElements();
      visualListModel0.updateElementAt(700, (VisualPageListItem) null);
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.getValidElements();
      visualListModel0.getValidElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      visualListModel0.getElements();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, true);
      visualListModel0.addAllElements(0, collection0);
      Collection<VisualPageListItem> collection1 = visualListModel0.subList(0, 0);
      assertTrue(collection1.equals((Object)collection0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.data = vector0;
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.prependAllElements(priorityQueue0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel0.reverseElements(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      int int0 = 46;
      intArray0[0] = 46;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 1489;
      boolean boolean0 = true;
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.subList((-1856), 0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.getValidElements();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.removeElements(65, (-328), true);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 310;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(310, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[1] = 0;
      intArray0[4] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.getElementAt(0);
      visualListModel0.moveDownIndex(0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.prependAllElements(linkedList0);
      visualListModel0.undeleteElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 269;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-643);
      intArray0[5] = (-2051);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeElements(269, 0, true);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      assertFalse(visualListModel2.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1127);
      shortArray0[1] = (short) (-3981);
      shortArray0[2] = (short)360;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)3737;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(0, shortArray0);
      HashMap<RenderingHints.Key, Dialog.ModalExclusionType> hashMap0 = new HashMap<RenderingHints.Key, Dialog.ModalExclusionType>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((int) (short)0, 0, false);
      visualListModel0.addAllElements(2371, collection0);
      // Undeclared exception!
      try { 
        visualListModel0.subList(1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox0.getPreferredSize();
      boolean boolean0 = true;
      jComboBox0.enableInputMethods(true);
      visualListModel0.addListDataListener(jComboBox0);
      int int0 = 0;
      int int1 = 1;
      int int2 = 865;
      visualListModel0.subList(1, 865, true);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) null);
      int int3 = 3;
      visualListModel0.subList(0, 3);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[0];
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultTableModelArray0);
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      ItemListener itemListener1 = AWTEventMulticaster.add(itemListener0, itemListener0);
      AWTEventMulticaster.remove(itemListener1, itemListener1);
      jComboBox0.addItemListener((ItemListener) null);
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.moveDownIndex(0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeElements(intArray0, true);
      visualListModel1.moveUpIndex(1500);
      visualListModel1.rotateClockwiseElements(intArray0);
      List<VisualPageListItem> list0 = visualListModel1.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.getListDataListeners();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeElements(66, (-323), true);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.setData(vector0);
      visualListModel0.setData(vector0);
      visualListModel0.getElements();
      AffineTransform affineTransform0 = null;
      try {
        affineTransform0 = new AffineTransform((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      int[] intArray0 = new int[7];
      intArray0[5] = 3481;
      intArray0[1] = 646;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 646;
      intArray0[5] = 0;
      intArray0[6] = 646;
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.getValidElements();
      visualListModel0.getValidElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.getElements();
      int[] intArray1 = new int[0];
      visualListModel1.removeElements(intArray1, true);
      visualListModel0.getElementAt(0);
      int[] intArray2 = new int[21];
      intArray2[0] = 0;
      intArray2[1] = 646;
      intArray2[2] = 3481;
      intArray2[3] = 3481;
      intArray2[4] = 0;
      intArray2[5] = 646;
      intArray2[6] = 3481;
      intArray2[7] = 3481;
      intArray2[8] = 646;
      visualListModel1.reverseElements(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, true);
      visualListModel0.addAllElements(0, collection0);
      visualListModel0.getValidElements();
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[4] = 90;
      intArray1[5] = 0;
      intArray1[6] = 0;
      visualListModel0.reverseElements(intArray1);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.getListDataListeners();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.prependAllElements(vector0);
      vector0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.prependAllElements(vector0);
      assertEquals("[null, null]", vector0.toString());
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getListDataListeners();
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel2.getSize();
      Vector<VisualPageListItem> vector0 = visualListModel2.data;
      vector0.add((VisualPageListItem) null);
      VisualListModel visualListModel4 = new VisualListModel();
      visualListModel4.appendAllElements(vector0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel3.getElements();
      visualListModel4.setData(visualPageListItemArray0);
      visualListModel4.updateElementAt(1, (VisualPageListItem) null);
      assertFalse(visualListModel4.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveDownIndex(1);
      visualListModel1.moveUpIndexes(intArray0);
      assertEquals(0, intArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      priorityQueue0.stream();
      visualListModel0.addAllElements((-1154), (Collection<VisualPageListItem>) arrayDeque0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      priorityQueue0.remove((Object) defaultTableModel0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(priorityQueue0);
      visualListModel0.moveDownIndex(1583);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      priorityQueue0.forEach(consumer0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel1.prependAllElements(priorityQueue0);
      VisualListModel visualListModel3 = new VisualListModel();
      VisualListModel visualListModel4 = new VisualListModel();
      visualListModel1.prependAllElements(arrayDeque0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(444);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.getListDataListeners();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>((SortedSet<? extends VisualPageListItem>) treeSet0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      priorityQueue0.forEach(consumer0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(priorityQueue0);
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.addElementAt((VisualPageListItem) null, 12);
      visualListModel3.prependAllElements(treeSet0);
      Collection<VisualPageListItem> collection0 = visualListModel3.subList((-355), 2008, false);
      assertNull(collection0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.getListDataListeners();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>((SortedSet<? extends VisualPageListItem>) treeSet0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      priorityQueue0.forEach(consumer0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(priorityQueue0);
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.addElementAt((VisualPageListItem) null, 12);
      visualListModel3.prependAllElements(treeSet0);
      visualListModel2.getValidElements();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel3.setData(visualPageListItemArray0);
      assertEquals(5, visualListModel3.getSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.getElements();
      visualListModel0.updateElementAt(839, (VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5536815580297962
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.getListDataListeners();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      priorityQueue0.forEach(consumer0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(priorityQueue0);
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel1.addListDataListener((ListDataListener) null);
      visualListModel3.addElementAt((VisualPageListItem) null, 12);
      visualListModel3.prependAllElements(treeSet0);
      visualListModel2.getValidElements();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualListModel3.addElement((VisualPageListItem) null);
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel3.setData(visualPageListItemArray0);
      visualListModel1.updateElementAt(4, (VisualPageListItem) null);
      visualListModel2.elementChanged(visualPageListItemArray0[0]);
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      visualListModel3.moveDownIndexes(intArray0);
      visualListModel0.removeElements(4, 3775, true);
      int[] intArray1 = new int[2];
      intArray1[0] = 12;
      intArray1[1] = 4;
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel3.reverseElements(intArray0);
      visualListModel2.undeleteElements(intArray0);
      assertFalse(visualListModel2.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.351673301904631
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 24;
      intArray0[1] = 0;
      intArray0[2] = (-3069);
      intArray0[3] = 1618;
      intArray0[4] = (-2545);
      intArray0[5] = 360;
      intArray0[6] = 261;
      intArray0[7] = 270;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.getListDataListeners();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>((SortedSet<? extends VisualPageListItem>) treeSet0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      priorityQueue0.forEach(consumer0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(priorityQueue0);
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.addElementAt((VisualPageListItem) null, 12);
      visualListModel3.prependAllElements(treeSet0);
      visualListModel2.getValidElements();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualListModel3.addElement((VisualPageListItem) null);
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel3.setData(visualPageListItemArray0);
      visualListModel1.updateElementAt(4, (VisualPageListItem) null);
      visualListModel2.elementChanged(visualPageListItemArray0[0]);
      int[] intArray1 = new int[1];
      intArray1[0] = 4;
      visualListModel3.moveDownIndexes(intArray1);
      // Undeclared exception!
      try { 
        visualListModel3.rotateAnticlockwiseElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2459520807289133
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.data = vector0;
      visualListModel0.getListDataListeners();
      visualListModel0.getValidElements();
      visualListModel0.setData(vector0);
      visualListModel0.addElementAt((VisualPageListItem) null, 30000);
      int[] intArray0 = new int[1];
      vector0.add((VisualPageListItem) null);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndex(162);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getSize();
      visualListModel0.moveUpIndex(1);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2450352741261774
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.getListDataListeners();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>((SortedSet<? extends VisualPageListItem>) treeSet0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      priorityQueue0.forEach(consumer0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(priorityQueue0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      Vector<VisualPageListItem> vector0 = visualListModel1.data;
      vector0.add((VisualPageListItem) null);
      visualListModel1.moveDownIndex(0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel1.removeElements(intArray0, true);
      visualListModel1.undeleteElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      assertFalse(visualListModel2.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.getListDataListeners();
      visualListModel0.getValidElements();
      visualListModel0.setData(vector0);
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElementAt((VisualPageListItem) null, 30000);
      int[] intArray0 = new int[0];
      vector0.add((VisualPageListItem) null);
      visualListModel0.moveDownIndex(30000);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getSize();
      visualListModel0.moveUpIndex(1);
      visualListModel0.prependAllElements(vector0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }
}
