/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:01:17 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-d?v_!MB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      jSTerm0.makeEval(true);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      jSTerm0.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      jSTerm1.makeVariable();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      jSTerm1.isFunction();
      jSTerm1.isGround();
      jSTerm0.makeEval(true);
      jSTerm1.makeConstant();
      assertEquals(32, streamTokenizer0.ttype);
      assertFalse(jSTerm0.isVariable());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r=ju(eGL77UJXQ,:%?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      boolean boolean0 = jSTerm1.isFunction();
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fi\"&9Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity((-1));
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeConstant();
      assertFalse(jSTerm1.isFunction());
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm0);
      assertTrue(jSTerm2.isConstant());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.073542846408523
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.parallelStream();
      jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
      
      StringReader stringReader0 = new StringReader(".W;XV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isVariable();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("% ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'w';
      charArray0[2] = '=';
      charArray0[3] = '`';
      charArray0[4] = 'i';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 44, 44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.445467830408648
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      jSTerm0.makeEval(true);
      streamTokenizer0.ordinaryChars(61, 41);
      stringReader0.skip(32);
      streamTokenizer0.ordinaryChars(0, 0);
      stringReader0.skip(0L);
      jSTerm1.isGround();
      streamTokenizer0.pushBack();
      jSTerm0.makeEval(true);
      stringReader0.read();
      streamTokenizer0.quoteChar(61);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      jSTerm0.matches(jSTerm2);
      jSTerm0.isGround();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3^cxN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = null;
      stringReader0.markSupported();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      streamTokenizer0.lowerCaseMode(false);
      JSJshopVars.rightPar = (-2);
      JSJshopVars.rightPar = 45;
      jSTerm0.equals(jSTerm1);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.936977902924339
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.standarizerPredicateForm();
      jSTerm1.print();
      jSTerm1.toStr();
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3143738430069454
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      jSTerm0.add((Object) streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip(0L);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2491615201685384
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      jSTerm0.ensureCapacity(32);
      jSTerm0.makeEval(true);
      streamTokenizer0.ordinaryChars(61, 41);
      stringReader0.skip(32);
      streamTokenizer0.ordinaryChars(0, 0);
      stringReader0.skip(0L);
      jSTerm1.isGround();
      streamTokenizer0.pushBack();
      jSTerm0.makeEval(true);
      jSTerm0.removeElement("w VG");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.call();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0330001999799117
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      jSTerm0.makeEval(true);
      streamTokenizer0.ordinaryChars(61, 41);
      streamTokenizer0.ordinaryChars(0, 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4005631264087506
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YK#E2E%dc>1dV(9d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-3));
      streamTokenizer0.ordinaryChar(1);
      streamTokenizer0.wordChars(1, 0);
      streamTokenizer0.quoteChar(1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.matches(jSTerm2);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      jSTerm2.isGround();
      JSJshopVars.colon = 63;
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm3.equals(jSTerm0);
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.242973226438147
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.ensureCapacity((-3));
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.matches(jSTerm2);
      jSSubstitution0.add((Object) stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3992042962026154
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      jSTerm0.ensureCapacity(32);
      jSTerm0.makeEval(true);
      streamTokenizer0.wordChars(2921, (-710));
      streamTokenizer0.ordinaryChars(61, 41);
      stringReader0.skip(32);
      streamTokenizer0.ordinaryChars(0, 0);
      stringReader0.skip(0L);
      jSTerm1.isGround();
      streamTokenizer0.pushBack();
      jSTerm0.makeEval(true);
      stringReader0.read();
      streamTokenizer0.quoteChar(61);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      streamTokenizer0.resetSyntax();
      jSTerm1.cloneT();
      jSTerm0.matches(jSTerm2);
      jSTerm0.matches(jSTerm2);
      System.setCurrentTimeMillis(1346L);
      jSTerm0.print();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("% ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "V/|f[/kF'x{=#4M7");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      jSSubstitution0.ensureCapacity(40);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader1 = new StringReader("(Y9OW&CH@YPOo HQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8557416057442793
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("74=<#>.4gD/:W\"");
      StringReader stringReader1 = new StringReader("74=<#>.4gD/:W\"");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader2 = new StringReader("call");
      stringReader2.ready();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      streamTokenizer0.eolIsSignificant(true);
      jSTerm1.stream();
      jSTerm1.cloneT();
      jSTerm1.clonePF();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.945934775756114
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      jSTerm0.add((Object) streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip((-31L));
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6357434952314973
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      jSTerm0.add((Object) streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4583113296830845
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?+ibeqa}&T~|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      stringReader0.skip(0L);
      jSTerm1.isGround();
      jSTerm0.toStr();
      stringReader0.reset();
      jSTerm1.cloneT();
      JSJshopVars.rightBrac = (-767);
      jSTerm0.toStr();
      jSTerm1.toStr();
      jSTerm1.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0005440662826808
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      int int0 = 41;
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.stream();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      jSTerm2.retainAll(jSTerm0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.equals(jSTerm4);
      jSTerm4.equals(jSTerm5);
      JSTerm jSTerm6 = new JSTerm();
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      jSTerm3.cloneT();
      System.setCurrentTimeMillis(int0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      long long0 = 1310L;
      System.setCurrentTimeMillis(long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4799555205445176
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "?+ibeqa}&T~|";
      StringReader stringReader0 = new StringReader("?+ibeqa}&T~|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.stream();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.clonePF();
      jSTerm2.matches(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm3.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSSubstitution0.standarizerSubs();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4525766629971564
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?+ibeqa}&T~|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.stream();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.makeFunction();
      Stream stream0 = jSTerm2.stream();
      jSTerm2.add((Object) stream0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.forEach(consumer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isGround();
      JSTerm jSTerm3 = jSTerm1.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm3.matches(jSTerm5);
      jSTerm4.matches(jSTerm2);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.754105330999288
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      jSTerm0.add((Object) streamTokenizer0);
      jSTerm0.makeEval(true);
      streamTokenizer0.ordinaryChars(2, 61);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6313454208085967
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1%PlV^%B5!`eT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      stringReader0.reset();
      stringReader0.read();
      streamTokenizer0.quoteChar((-2));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.nextToken();
      streamTokenizer0.nval = (double) 94;
      JSJshopVars.rightBrac = 49;
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-2));
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
