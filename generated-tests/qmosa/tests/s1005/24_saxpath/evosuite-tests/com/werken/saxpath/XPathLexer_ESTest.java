/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:06:22 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
      
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.setXPath("y#d+;Q");
      xPathLexer0.setXPath("y#d+;Q");
      Token token3 = xPathLexer0.slashes();
      assertEquals("y", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("#", token4.getTokenText());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.div();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
      
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.consume(0);
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.consume(1);
      assertNull(xPathLexer0.getXPath());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.setXPath("b>%");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.consume(2);
      xPathLexer0.hasMoreChars();
      String string0 = xPathLexer0.getXPath();
      assertEquals("b>%", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0967285044662414
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("<");
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.getPreviousToken();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0047670352079594
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.number();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      token0.toString();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.dollar();
      String string0 = token0.toString();
      assertEquals("[ (30) ()", string0);
      
      xPathLexer0.setXPath(")");
      xPathLexer0.setPreviousToken(token0);
      int int0 = xPathLexer0.endPosition();
      assertEquals(1, int0);
      
      Token token5 = xPathLexer0.dollar();
      token5.toString();
      String string1 = token5.toString();
      assertEquals("[ (26) ())", string1);
      
      xPathLexer0.setPreviousToken(token5);
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.getXPath();
      xPathLexer0.pipe();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.121014381538862
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.setXPath("u{oZij=");
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.hasMoreChars();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.XPathLexer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0312161598314362
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("En0Zu}N4'egaI");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(15, token0.getTokenType());
      assertEquals("En0Zu", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("}", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8962733442634114
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bmlg|94");
      xPathLexer0.comma();
      xPathLexer0.plus();
      xPathLexer0.getXPath();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("=[%qAT&Qz_3ENP");
      xPathLexer0.whitespace();
      xPathLexer0.equals();
      xPathLexer0.setXPath("");
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.identifier();
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.isIdentifierStartChar('m');
      xPathLexer0.consume(6);
      assertEquals("", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2416770098402943
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i?}issj");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.isIdentifierStartChar('2');
      xPathLexer0.colon();
      xPathLexer0.minus();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.consume(1472);
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.slashes();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.consume(1472);
      xPathLexer0.mod();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0164539990864934
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.comma();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.leftParen();
      xPathLexer0.endPosition();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.plus();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1328));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.7969806327315819
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b>%");
      XPathLexer xPathLexer1 = new XPathLexer("b>%");
      Token token0 = xPathLexer1.nextToken();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("b", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("b", token1.getTokenText());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9847699478184544
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")si0X=3");
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.consume((-1));
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.star();
      xPathLexer0.setXPath("R TXIAn}Xur0v:IM@");
      xPathLexer0.number();
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      xPathLexer0.endPosition();
      xPathLexer0.pipe();
      xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7450122010993654
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.number();
      token0.toString();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.rightBracket();
      token0.toString();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("J8p5:7<K2|iU5iL=U");
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("J", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals("p", token6.getTokenText());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals("5:", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer1.endPosition();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.star();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer1.identifier();
      assertEquals("7", token11.getTokenText());
      
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer1.rightBracket();
      assertEquals(4, token13.getTokenType());
      assertEquals("<", token13.getTokenText());
      
      xPathLexer1.hasMoreChars();
      char char0 = xPathLexer1.LA(2544);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4673520623996859
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5592961278441804
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.number();
      token0.toString();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.and();
      String string0 = token0.toString();
      assertEquals("[ (30) ()", string0);
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("J8p5:7<K2|iU5iL=U");
      xPathLexer0.div();
      xPathLexer1.nextToken();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals(":", token4.getTokenText());
      
      Token token5 = xPathLexer1.doubleColon();
      assertEquals("7<", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer1.endPosition();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer1.identifier();
      assertEquals("K2", token10.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token11 = xPathLexer1.rightBracket();
      assertEquals("|", token11.getTokenText());
      assertEquals(4, token11.getTokenType());
      
      xPathLexer1.hasMoreChars();
      char char0 = xPathLexer1.LA(2544);
      assertEquals('\uFFFF', char0);
  }
}
