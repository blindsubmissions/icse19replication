/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:15:17 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import wheel.ErrorPage;
import wheel.IEngine;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.id("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "Col component can be added only to a TableBlock.";
      String string1 = "iframe";
      Checkbox checkbox0 = new Checkbox((Component) null, "Col component can be added only to a TableBlock.", "iframe");
      Form form0 = new Form("Col component can be added only to a TableBlock.");
      form0.addFormValidationRule("Col component can be added only to a TableBlock.", "Col component can be added only to a TableBlock.");
      // Undeclared exception!
      try { 
        checkbox0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("cannot convert type: ");
      ActionExpression actionExpression0 = new ActionExpression("cannot convert type: ");
      Form form0 = null;
      try {
        form0 = new Form(xmlEntityRef0, "cannot convert type: ", actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = null;
      try {
        select0 = new Select(xmlEntityRef0, (String) null, "", stringSelectModel0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, (Object) null);
      StandaloneComponent standaloneComponent0 = text0.getPage();
      String string0 = "";
      NumberInput numberInput0 = new NumberInput(standaloneComponent0, "", "");
      errorPage0.getEngine();
      // Undeclared exception!
      try { 
        numberInput0.noframes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "";
      String string1 = "A\\|eM7";
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "A|eM7");
      String string2 = null;
      // Undeclared exception!
      try { 
        checkbox0.li((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Component component0 = null;
      Radio radio0 = new Radio((Component) null, "frameset", "frameset");
      assertEquals("frameset", radio0.getComponentId());
      assertEquals("frameset", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertNotNull(radio0);
      
      String string0 = "/";
      DateInput dateInput0 = new DateInput(radio0, "/", "/", "/");
      assertEquals("frameset", radio0.getComponentId());
      assertEquals("frameset", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("/", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertEquals("/", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertNotNull(dateInput0);
      
      DateInput dateInput1 = (DateInput)dateInput0.actionBinding("./|gkOw#%(");
      assertEquals("frameset", radio0.getComponentId());
      assertEquals("frameset", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("/", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertEquals("/", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("/", dateInput1.getComponentId());
      assertTrue(dateInput1.isValid());
      assertTrue(dateInput1.isEmpty());
      assertFalse(dateInput1._isGeneratedId());
      assertEquals("input", dateInput1.defaultTagName());
      assertEquals("/", dateInput1.getFormElementName());
      assertSame(dateInput0, dateInput1);
      assertSame(dateInput1, dateInput0);
      assertNotNull(dateInput1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/";
      stringArray0[1] = "/";
      stringArray0[2] = "./|gkOw#%(";
      stringArray0[3] = "frameset";
      stringArray0[4] = "frameset";
      // Undeclared exception!
      try { 
        radio0.area(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "dnP";
      Form form0 = new Form("dnP");
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("dnP", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Component component0 = null;
      String string0 = "qvZ2WI_biJfa7_H";
      Checkbox checkbox0 = new Checkbox((Component) null, "qvZ2WI_biJfa7_H", "}dq#\"a+n");
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("}dq#\"a+n", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("qvZ2WI_biJfa7_H", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.validationRule("qvZ2WI_biJfa7_H");
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("}dq#\"a+n", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("qvZ2WI_biJfa7_H", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("}dq#\"a+n", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("qvZ2WI_biJfa7_H", formElement0.getFormElementName());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      
      Hidden hidden0 = new Hidden(formElement0, "}dq#\"a+n", "qvZ2WI_biJfa7_H");
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("}dq#\"a+n", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("qvZ2WI_biJfa7_H", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("}dq#\"a+n", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("qvZ2WI_biJfa7_H", formElement0.getFormElementName());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertEquals("qvZ2WI_biJfa7_H", hidden0.getComponentId());
      assertEquals("}dq#\"a+n", hidden0.getFormElementName());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertNotNull(hidden0);
      
      // Undeclared exception!
      try { 
        checkbox0.dt((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "?%VfmY9Wyq^,Q:j";
      Form form0 = new Form("?%VfmY9Wyq^,Q:j");
      assertEquals("form", form0.defaultTagName());
      assertEquals("?%VfmY9Wyq^,Q:j", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        form0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.em(object0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Label label1 = new Label(label0, label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Long long0 = new Long((-328L));
      assertEquals((-328L), (long)long0);
      assertNotNull(long0);
      
      Label label2 = new Label(label1, long0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertTrue(label2._isGeneratedId());
      assertEquals("span", label2.defaultTagName());
      assertEquals("Label_3", label2.getComponentId());
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertNotNull(label2);
      
      Label label3 = (Label)label1.code((Object) label2);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertTrue(label2._isGeneratedId());
      assertEquals("span", label2.defaultTagName());
      assertEquals("Label_3", label2.getComponentId());
      assertEquals("Label_4", label3.getComponentId());
      assertEquals("span", label3.defaultTagName());
      assertTrue(label3._isGeneratedId());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label1.equals((Object)label2));
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertFalse(label3.equals((Object)label1));
      assertFalse(label3.equals((Object)label2));
      assertFalse(label3.equals((Object)label0));
      assertNotSame(label0, label2);
      assertNotSame(label0, label3);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNotSame(label1, label3);
      assertNotSame(label1, label2);
      assertNotSame(label2, label1);
      assertNotSame(label2, label3);
      assertNotSame(label2, label0);
      assertNotSame(label3, label1);
      assertNotSame(label3, label2);
      assertNotSame(label3, label0);
      assertNotNull(label3);
      
      Block block0 = (Block)label1.s();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label3));
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label1.equals((Object)label3));
      assertFalse(label1.equals((Object)label2));
      assertNotSame(label0, label2);
      assertNotSame(label0, label3);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNotSame(label1, label3);
      assertNotSame(label1, label2);
      assertNotNull(block0);
      
      Label label4 = (Label)label0.dd((Object) label1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label4.defaultTagName());
      assertEquals("Label_5", label4.getComponentId());
      assertTrue(label4._isGeneratedId());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label3));
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label1.equals((Object)label3));
      assertFalse(label1.equals((Object)label2));
      assertFalse(label4.equals((Object)label0));
      assertFalse(label4.equals((Object)label1));
      assertFalse(label4.equals((Object)label2));
      assertFalse(label4.equals((Object)label3));
      assertNotSame(label0, label2);
      assertNotSame(label0, label4);
      assertNotSame(label0, label3);
      assertNotSame(label0, label1);
      assertNotSame(label1, label4);
      assertNotSame(label1, label0);
      assertNotSame(label1, label3);
      assertNotSame(label1, label2);
      assertNotSame(label4, label0);
      assertNotSame(label4, label1);
      assertNotSame(label4, label2);
      assertNotSame(label4, label3);
      assertNotNull(label4);
      
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3719220949954676
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.em(object0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Label label1 = new Label(label0, label0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("span", label1.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Block block0 = (Block)label0.code();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      assertNotNull(block0);
      
      Block block1 = (Block)label1.s();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("span", label1.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(block1.equals((Object)block0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNotSame(block1, block0);
      assertNotNull(block1);
      
      Label label2 = (Label)label0.dd((Object) label1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("span", label1.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertTrue(label2._isGeneratedId());
      assertEquals("Label_3", label2.getComponentId());
      assertEquals("span", label2.defaultTagName());
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label2.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertNotSame(label1, label2);
      assertNotSame(label1, label0);
      assertNotSame(label2, label0);
      assertNotSame(label2, label1);
      assertNotNull(label2);
      
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "frameset");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("frameset", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      // Undeclared exception!
      try { 
        table0.id("8]^LLjc`LI4O\"\"4@\u00008");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Form form0 = new Form((String) null);
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      ElExpression elExpression0 = new ElExpression("'x~(o");
      assertEquals(5, elExpression0.length());
      assertEquals("'x~(o", elExpression0.toString());
      assertEquals("'x~(o", elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      elExpression0.expression = null;
      assertNull(elExpression0.toString());
      assertNull(elExpression0.getExpression());
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("dir");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("dir", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "dir";
      stringArray0[3] = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        form0.i(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Component component0 = null;
      NumberInput numberInput0 = new NumberInput((Component) null, ":5", "\"v");
      assertEquals(":5", numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("\"v", numberInput0.getComponentId());
      assertNotNull(numberInput0);
      
      String string0 = null;
      Checkbox checkbox0 = new Checkbox((Component) null, "", "\"v");
      assertEquals("\"v", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      ElExpression elExpression0 = new ElExpression((String) null);
      assertNull(elExpression0.getExpression());
      assertNull(elExpression0.toString());
      assertNotNull(elExpression0);
      
      String string1 = "wheel.compone*ts.Com@onent";
      Hidden hidden0 = new Hidden(numberInput0, "wheel.compone*ts.Com@onent", "dateInputError");
      assertEquals(":5", numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("\"v", numberInput0.getComponentId());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertEquals("dateInputError", hidden0.getComponentId());
      assertEquals("wheel.compone*ts.Com@onent", hidden0.getFormElementName());
      assertFalse(hidden0._isGeneratedId());
      assertNotNull(hidden0);
      
      FormElement formElement0 = hidden0.value((String) null);
      assertEquals(":5", numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("\"v", numberInput0.getComponentId());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertEquals("dateInputError", hidden0.getComponentId());
      assertEquals("wheel.compone*ts.Com@onent", hidden0.getFormElementName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("wheel.compone*ts.Com@onent", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("dateInputError", formElement0.getComponentId());
      assertSame(hidden0, formElement0);
      assertSame(formElement0, hidden0);
      assertNotNull(formElement0);
      
      // Undeclared exception!
      try { 
        hidden0.placeholder("wheel.compone*ts.Com@onent");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.em(object0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      
      Table table0 = (Table)label0.table();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Label label1 = new Label(label0, label0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      String string0 = "onchange";
      Table table1 = new Table(errorPage0, "onchange");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertFalse(table1.equals((Object)table0));
      assertNotNull(table1);
      
      Table table2 = table1.id("onchange");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("onchange", table2.getComponentId());
      assertFalse(table1.equals((Object)table0));
      assertFalse(table2.equals((Object)table0));
      assertSame(table1, table2);
      assertNotSame(table1, table0);
      assertSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotNull(table2);
      
      Table table3 = table2.renderHint("onchange");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("onchange", table2.getComponentId());
      assertEquals("onchange", table3.getComponentId());
      assertFalse(table3._isGeneratedId());
      assertEquals("table", table3.defaultTagName());
      assertFalse(table1.equals((Object)table0));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table3.equals((Object)table0));
      assertSame(table1, table2);
      assertNotSame(table1, table0);
      assertSame(table1, table3);
      assertSame(table2, table3);
      assertSame(table2, table1);
      assertNotSame(table2, table0);
      assertSame(table3, table1);
      assertSame(table3, table2);
      assertNotSame(table3, table0);
      assertNotNull(table3);
      
      Table table4 = table3.id("onchange");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("onchange", table2.getComponentId());
      assertEquals("onchange", table3.getComponentId());
      assertFalse(table3._isGeneratedId());
      assertEquals("table", table3.defaultTagName());
      assertEquals("onchange", table4.getComponentId());
      assertFalse(table4._isGeneratedId());
      assertEquals("table", table4.defaultTagName());
      assertFalse(table1.equals((Object)table0));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table3.equals((Object)table0));
      assertFalse(table4.equals((Object)table0));
      assertSame(table1, table4);
      assertSame(table1, table2);
      assertNotSame(table1, table0);
      assertSame(table1, table3);
      assertSame(table2, table3);
      assertSame(table2, table1);
      assertNotSame(table2, table0);
      assertSame(table2, table4);
      assertSame(table3, table1);
      assertSame(table3, table4);
      assertSame(table3, table2);
      assertNotSame(table3, table0);
      assertSame(table4, table1);
      assertNotSame(table4, table0);
      assertSame(table4, table3);
      assertSame(table4, table2);
      assertNotNull(table4);
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("oq~!N");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("oq~!N", xmlEntityRef0.getComponentId());
      assertNotNull(xmlEntityRef0);
      
      String string1 = xmlEntityRef0.defaultTagName();
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("oq~!N", xmlEntityRef0.getComponentId());
      assertNull(string1);
      
      table3.addFirst(table2);
      table4.table();
      table2.renderHint(string0);
      table2._clear();
      Component component0 = errorPage0.meta();
      Form form0 = errorPage0.getSubmittedForm();
      String string2 = " does not exist.";
      Block block0 = new Block(component0, string2);
      Checkbox checkbox0 = new Checkbox(block0, string2, string2);
      String string3 = "http://xmlpull.org/v1/doc/features.html#xml-roundtrip";
      FormElement formElement0 = checkbox0.initialFieldValue(string3, (Object) string0);
      form0.addFormElement(formElement0);
      form0.id(string2);
      form0.buildComponent();
      String string4 = null;
      Block block1 = table4.placeholder(string4);
      TableBlock tableBlock0 = new TableBlock(block1);
      tableBlock0.tr();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.em(object0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      
      // Undeclared exception!
      try { 
        label0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.513576162402432
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.em(object0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertNotNull(label0);
      
      Label label1 = new Label(label0, label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Block block0 = (Block)label1.s();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNotNull(block0);
      
      Label label2 = (Label)label0.dd((Object) label1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label2.defaultTagName());
      assertEquals("Label_3", label2.getComponentId());
      assertTrue(label2._isGeneratedId());
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label2.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertNotSame(label0, label1);
      assertNotSame(label0, label2);
      assertNotSame(label1, label0);
      assertNotSame(label1, label2);
      assertNotSame(label2, label0);
      assertNotSame(label2, label1);
      assertNotNull(label2);
      
      String string0 = "area";
      ActionExpression actionExpression0 = new ActionExpression("area");
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(4, actionExpression0.length());
      assertEquals("area", actionExpression0.getActionExpression());
      assertEquals("area", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("area", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.getJavascript());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.event("area");
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(4, actionExpression0.length());
      assertEquals("area", actionExpression0.getActionExpression());
      assertEquals("area", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("area", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("area", actionExpression0.getEvent());
      assertNull(actionExpression0.getJavascript());
      assertEquals("area", actionExpression1.getEvent());
      assertEquals("area", actionExpression1.toString());
      assertEquals("area", actionExpression1.getExpression());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(4, actionExpression1.length());
      assertEquals("area", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(actionExpression1);
      
      String string1 = "fy#ZzDmO=(u";
      ActionExpression actionExpression2 = actionExpression1.javascript("fy#ZzDmO=(u");
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(4, actionExpression0.length());
      assertEquals("area", actionExpression0.getActionExpression());
      assertEquals("area", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("area", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("area", actionExpression0.getEvent());
      assertEquals("fy#ZzDmO=(u", actionExpression0.getJavascript());
      assertEquals("area", actionExpression1.getEvent());
      assertEquals("area", actionExpression1.toString());
      assertEquals("area", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("fy#ZzDmO=(u", actionExpression1.getJavascript());
      assertEquals(4, actionExpression1.length());
      assertEquals("area", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("area", actionExpression2.toString());
      assertEquals("area", actionExpression2.getActionExpression());
      assertEquals(4, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("area", actionExpression2.getExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("fy#ZzDmO=(u", actionExpression2.getJavascript());
      assertEquals("area", actionExpression2.getEvent());
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertNotNull(actionExpression2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) actionExpression1;
      objectArray0[1] = (Object) actionExpression1;
      objectArray0[2] = (Object) "fy#ZzDmO=(u";
      objectArray0[3] = (Object) "fy#ZzDmO=(u";
      objectArray0[4] = (Object) actionExpression0;
      Block block1 = (Block)label2.ol();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label2.defaultTagName());
      assertEquals("Label_3", label2.getComponentId());
      assertTrue(label2._isGeneratedId());
      assertFalse(block1.equals((Object)block0));
      assertFalse(label0.equals((Object)label1));
      assertFalse(label0.equals((Object)label2));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label1.equals((Object)label2));
      assertFalse(label2.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertNotSame(block1, block0);
      assertNotSame(label0, label1);
      assertNotSame(label0, label2);
      assertNotSame(label1, label0);
      assertNotSame(label1, label2);
      assertNotSame(label2, label0);
      assertNotSame(label2, label1);
      assertNotNull(block1);
      
      objectArray0[5] = (Object) label2;
      ActionExpression actionExpression3 = actionExpression2.parameters(objectArray0);
      assertFalse(actionExpression3.isSubmissible());
      assertEquals("area", actionExpression3.toString());
      assertEquals(4, actionExpression3.length());
      assertEquals("area", actionExpression3.getEvent());
      assertEquals("fy#ZzDmO=(u", actionExpression3.getJavascript());
      assertFalse(actionExpression3.isExternalUrl());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals("area", actionExpression3.getExpression());
      assertEquals("area", actionExpression3.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(4, actionExpression0.length());
      assertEquals("area", actionExpression0.getActionExpression());
      assertEquals("area", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("area", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("area", actionExpression0.getEvent());
      assertEquals("fy#ZzDmO=(u", actionExpression0.getJavascript());
      assertEquals("area", actionExpression1.getEvent());
      assertEquals("area", actionExpression1.toString());
      assertEquals("area", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("fy#ZzDmO=(u", actionExpression1.getJavascript());
      assertEquals(4, actionExpression1.length());
      assertEquals("area", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("area", actionExpression2.toString());
      assertEquals("area", actionExpression2.getActionExpression());
      assertEquals(4, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("area", actionExpression2.getExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("fy#ZzDmO=(u", actionExpression2.getJavascript());
      assertEquals("area", actionExpression2.getEvent());
      assertEquals(6, objectArray0.length);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertNotNull(actionExpression3);
      
      Any any0 = new Any(errorPage0, actionExpression2);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(4, actionExpression0.length());
      assertEquals("area", actionExpression0.getActionExpression());
      assertEquals("area", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("area", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("area", actionExpression0.getEvent());
      assertEquals("fy#ZzDmO=(u", actionExpression0.getJavascript());
      assertEquals("area", actionExpression1.getEvent());
      assertEquals("area", actionExpression1.toString());
      assertEquals("area", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("fy#ZzDmO=(u", actionExpression1.getJavascript());
      assertEquals(4, actionExpression1.length());
      assertEquals("area", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("area", actionExpression2.toString());
      assertEquals("area", actionExpression2.getActionExpression());
      assertEquals(4, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("area", actionExpression2.getExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("fy#ZzDmO=(u", actionExpression2.getJavascript());
      assertEquals("area", actionExpression2.getEvent());
      assertNotNull(any0);
      
      // Undeclared exception!
      try { 
        any0.label();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      NumberInput numberInput0 = new NumberInput(errorPage0, "code", "\"v");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("code", numberInput0.getFormElementName());
      assertEquals("\"v", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertNotNull(numberInput0);
      
      ActionExpression actionExpression0 = new ActionExpression("\"v");
      assertEquals("\"v", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertEquals("\"v", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals(2, actionExpression0.length());
      assertEquals("\"v", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNotNull(actionExpression0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "code", "dateInputError");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("code", checkbox0.getFormElementName());
      assertEquals("dateInputError", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertNotNull(checkbox0);
      
      ElExpression elExpression0 = new ElExpression("dateInputError");
      assertEquals(14, elExpression0.length());
      assertEquals("dateInputError", elExpression0.getExpression());
      assertEquals("dateInputError", elExpression0.toString());
      assertNotNull(elExpression0);
      
      String string0 = " in class ";
      ElExpression elExpression1 = elExpression0.errorMessage("dateInputError");
      assertEquals(14, elExpression0.length());
      assertEquals("dateInputError", elExpression0.getExpression());
      assertEquals("dateInputError", elExpression0.toString());
      assertEquals(14, elExpression1.length());
      assertEquals("dateInputError", elExpression1.toString());
      assertEquals("dateInputError", elExpression1.getExpression());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNotNull(elExpression1);
      
      Calendar calendar0 = checkbox0.date();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("code", checkbox0.getFormElementName());
      assertEquals("dateInputError", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      IEngine iEngine0 = errorPage0.getEngine();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNull(iEngine0);
      
      String string1 = "internal error: threshold must be less than capacity: 13";
      // Undeclared exception!
      try { 
        checkbox0.passwordInput("internal error: threshold must be less than capacity: 13");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.672911591796461
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.em(object0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Label label1 = new Label(label0, label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Table table0 = new Table(errorPage0, "onchange");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("onchange", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.id("onchange");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("onchange", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("onchange", table1.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      
      Table table2 = table1.renderHint("onchange");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("onchange", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("onchange", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotNull(table2);
      
      Table table3 = new Table(errorPage0, "");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table3._isGeneratedId());
      assertEquals("table", table3.defaultTagName());
      assertEquals("Table_1", table3.getComponentId());
      assertFalse(table3.equals((Object)table2));
      assertFalse(table3.equals((Object)table0));
      assertFalse(table3.equals((Object)table1));
      assertNotNull(table3);
      
      Block block0 = new Block(label0, "oR8?*GDlC(,+v1z?EA");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertEquals("oR8?*GDlC(,+v1z?EA", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(label0.equals((Object)label1));
      assertNotNull(block0);
      
      ElExpression elExpression0 = new ElExpression("");
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("onchange");
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression1.toString());
      assertEquals("", elExpression1.getExpression());
      assertEquals(0, elExpression1.length());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNotNull(elExpression1);
      
      Text text0 = new Text(table1, elExpression1);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("onchange", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression1.toString());
      assertEquals("", elExpression1.getExpression());
      assertEquals(0, elExpression1.length());
      assertNull(text0.defaultTagName());
      assertTrue(text0._isGeneratedId());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertFalse(text0.isHtml());
      assertFalse(table0.equals((Object)table3));
      assertFalse(table1.equals((Object)table3));
      assertNotNull(text0);
      
      boolean boolean0 = text0.isHtml();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("onchange", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression1.toString());
      assertEquals("", elExpression1.getExpression());
      assertEquals(0, elExpression1.length());
      assertNull(text0.defaultTagName());
      assertTrue(text0._isGeneratedId());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertFalse(text0.isHtml());
      assertFalse(table0.equals((Object)table3));
      assertFalse(table1.equals((Object)table3));
      assertFalse(boolean0);
      assertSame(table0, table1);
      assertNotSame(table0, table3);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertNotSame(table1, table3);
      assertSame(table1, table0);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.em(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertNotNull(label0);
      
      Label label1 = new Label(label0, label0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("xE?evyABQcDP6Gp4");
      assertEquals("xE?evyABQcDP6Gp4", initialFieldValue0.getStringReplacement());
      assertNotNull(initialFieldValue0);
      
      Label label2 = (Label)label0.p((Object) initialFieldValue0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("xE?evyABQcDP6Gp4", initialFieldValue0.getStringReplacement());
      assertEquals("Label_3", label2.getComponentId());
      assertEquals("span", label2.defaultTagName());
      assertTrue(label2._isGeneratedId());
      assertFalse(label0.equals((Object)label1));
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertNotSame(label2, label1);
      assertNotSame(label2, label0);
      assertNotNull(label2);
      
      String string0 = "onchange";
      Table table0 = new Table(errorPage0, "onchange");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("onchange", table0.getComponentId());
      assertNotNull(table0);
      
      Table table1 = table0.id("onchange");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("onchange", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      
      Table table2 = table1.renderHint("onchange");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("onchange", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("onchange", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotNull(table2);
      
      Table table3 = table2.id("onchange");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("onchange", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("onchange", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertFalse(table3._isGeneratedId());
      assertEquals("onchange", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table1, table3);
      assertSame(table2, table0);
      assertSame(table2, table3);
      assertSame(table2, table1);
      assertSame(table3, table0);
      assertSame(table3, table2);
      assertSame(table3, table1);
      assertNotNull(table3);
      
      table2.addFirst(table1);
      table0.renderHint(string0);
      table3._clear();
      errorPage0.meta();
      Form form0 = errorPage0.getSubmittedForm();
      String string1 = " does not exist.";
      Block block0 = new Block(errorPage0, string0);
      String string2 = "h-mYG=4l|k:l!.~2fM%";
      String string3 = "LvmiNf4DqctS-Yj";
      Checkbox checkbox0 = new Checkbox(table0, string2, string3);
      String string4 = "value";
      Checkbox checkbox1 = new Checkbox(label1, string3, string4);
      label0.strike();
      Hidden hidden0 = new Hidden(label0, string3, string1);
      FormElement formElement0 = checkbox1.initialFieldValue(string1, (Object) hidden0);
      form0.addFormElement(formElement0);
      form0.id(string0);
      form0.buildComponent();
      DateInput dateInput0 = new DateInput(errorPage0, string0, string4, string0);
      String string5 = "d]xLDm!}%)w[LYhP;";
      dateInput0.placeholder(string5);
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableBlock tableBlock1 = table3.thead();
      tableBlock1.tr();
      form0.base(string5);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7888535522534657
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.em(object0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Label label1 = new Label(label0, label0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Label label2 = (Label)label0.dd((Object) label1);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("span", label2.defaultTagName());
      assertTrue(label2._isGeneratedId());
      assertEquals("Label_3", label2.getComponentId());
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertNotSame(label1, label2);
      assertNotSame(label1, label0);
      assertNotSame(label2, label1);
      assertNotSame(label2, label0);
      assertNotNull(label2);
      
      String string0 = "area";
      ActionExpression actionExpression0 = new ActionExpression("area");
      assertEquals("area", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("area", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("area", actionExpression0.getExpression());
      assertEquals(4, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.event("area");
      assertEquals("area", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("area", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("area", actionExpression0.getExpression());
      assertEquals(4, actionExpression0.length());
      assertEquals("area", actionExpression0.getEvent());
      assertEquals("area", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("area", actionExpression1.getEvent());
      assertEquals(4, actionExpression1.length());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("area", actionExpression1.getExpression());
      assertEquals("area", actionExpression1.getActionExpression());
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(actionExpression1);
      
      ActionExpression actionExpression2 = actionExpression1.javascript("fy#ZzDmO=(u");
      assertEquals("area", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("area", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("area", actionExpression0.getExpression());
      assertEquals("fy#ZzDmO=(u", actionExpression0.getJavascript());
      assertEquals(4, actionExpression0.length());
      assertEquals("area", actionExpression0.getEvent());
      assertEquals("area", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("area", actionExpression1.getEvent());
      assertEquals(4, actionExpression1.length());
      assertEquals("fy#ZzDmO=(u", actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("area", actionExpression1.getExpression());
      assertEquals("area", actionExpression1.getActionExpression());
      assertEquals("fy#ZzDmO=(u", actionExpression2.getJavascript());
      assertEquals(4, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("area", actionExpression2.getActionExpression());
      assertEquals("area", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("area", actionExpression2.toString());
      assertEquals("area", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertNotNull(actionExpression2);
      
      Radio radio0 = new Radio(label1, " does not exist.", "fy#ZzDmO=(u");
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("fy#ZzDmO=(u", radio0.getComponentId());
      assertEquals(" does not exist.", radio0.getFormElementName());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label2));
      assertFalse(label1.equals((Object)label0));
      assertNotNull(radio0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        radio0.area(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.756197341808054
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.em(object0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      
      String string0 = "onchange";
      Table table0 = new Table(errorPage0, "onchange");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("onchange", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("onchange");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("onchange", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("onchange", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      
      String string1 = "goVpa-5$_b.IWs\"3$x";
      Table table2 = table0.id("goVpa-5$_b.IWs\"3$x");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("goVpa-5$_b.IWs\"3$x", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("goVpa-5$_b.IWs\"3$x", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotNull(table2);
      
      Hidden hidden0 = new Hidden(errorPage0, "goVpa-5$_b.IWs\"3$x", "goVpa-5$_b.IWs\"3$x");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertEquals("goVpa-5$_b.IWs\"3$x", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("goVpa-5$_b.IWs\"3$x", hidden0.getFormElementName());
      assertNotNull(hidden0);
      
      // Undeclared exception!
      try { 
        table0.addFirst(hidden0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
