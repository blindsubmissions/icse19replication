/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:44:52 GMT 2018
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.9702919135521193
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setStdDevWidth(0);
      resultMatrixLatex0.m_PrintRowNames = false;
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.toArray();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 2);
      resultMatrixLatex0.assign(resultMatrixHTML0);
      resultMatrixHTML0.setMeanPrec(2);
      resultMatrixHTML0.isStdDev((-1007));
      resultMatrixLatex0.setMeanPrec(527);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getSummaryTitle(0);
      resultMatrixSignificance0.getDisplayCol(0);
      resultMatrixSignificance0.getDefaultMeanWidth();
      resultMatrixSignificance0.getColOrder();
      resultMatrixSignificance0.getDefaultShowStdDev();
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(523, (-1066));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6635616461296423
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = "v";
      stringArray0[2] = ")";
      stringArray0[3] = "v";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      resultMatrixPlainText0.m_HeaderKeys = vector0;
      resultMatrixPlainText0.clearSummary();
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      resultMatrixPlainText0.m_Counts = doubleArray0;
      stringArray0[4] = "*";
      stringArray0[5] = "(";
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add(vector1);
      stringArray0[6] = "(";
      stringArray0[7] = ")";
      resultMatrixPlainText0.listOptions();
      resultMatrixPlainText0.setOptions(stringArray0);
      resultMatrixPlainText0.padString(")", (-1863), true);
      boolean boolean0 = resultMatrixPlainText0.getShowAverage();
      assertFalse(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.8864004080541186
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.doubleToString(3214.78123, 0);
      resultMatrixPlainText0.setPrintColNames(false);
      resultMatrixPlainText0.getRevision();
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 2);
      String string0 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n# 2 - row1\n\n# data for the plot\n1 '' ''\n2 '' ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:3]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"col0\"\nreplot \"plot.dat\" using 1:3 with lines title \"col1\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 3);
      resultMatrixCSV0.toStringMatrix();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.globalInfo();
      resultMatrixCSV0.setRowHidden(0, true);
      assertFalse(resultMatrixCSV0.getShowAverage());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_EnumerateColNames = false;
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      vector0.iterator();
      resultMatrixLatex0.m_HeaderKeys = vector0;
      boolean boolean0 = resultMatrixLatex0.isMean(0);
      assertFalse(boolean0);
      
      resultMatrixLatex0.getSignificanceWidth();
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_StdDev = null;
      resultMatrixGnuPlot0.getRevision();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      resultMatrixHTML0.m_EnumerateRowNames = true;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.meanWidthTipText();
      resultMatrixGnuPlot0.globalInfo();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringKey();
      resultMatrixHTML0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.addHeader("z)pb34~", "z)pb34~");
      int int1 = (-1169);
      resultMatrixHTML0.m_RowNameWidth = (-1169);
      String[] stringArray0 = new String[0];
      resultMatrixHTML0.m_ColNames = stringArray0;
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.enumerateColNamesTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.padString("weka.experiment.ResultMatrixGnuPlot", 0);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.382026634673871
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(3598, 0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      resultMatrixLatex0.m_RowNameWidth = 0;
      resultMatrixLatex0.m_RemoveFilterName = true;
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
      
      stringArray0[2] = " ";
      resultMatrixLatex0.setOptions(stringArray0);
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixLatex0.getShowAverage();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 0);
      resultMatrixGnuPlot0.getRevision();
      resultMatrixLatex0.setMeanWidth(0);
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.915803308756176
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      
      String string0 = resultMatrixPlainText0.padString("T1@", 1175);
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      
      String string1 = resultMatrixPlainText0.toStringKey();
      assertEquals("Key:\nT1@1T1@ col0\n", string1);
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertNotNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[][] intArray3 = new int[8][1];
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixLatex0.m_MeanWidth = 2;
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 1;
      intArray3[5] = intArray4;
      intArray3[6] = intArray2;
      intArray3[7] = intArray2;
      resultMatrixPlainText0.setSummary(intArray0, intArray3);
      assertEquals(2, intArray0.length);
      assertEquals(8, intArray3.length);
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray3, intArray0);
      
      boolean boolean0 = resultMatrixPlainText0.getDefaultRemoveFilterName();
      assertFalse(boolean0);
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.9889840465642794
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(5, 5);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      int[] intArray0 = new int[1];
      resultMatrixHTML0.setMeanWidth(5);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(5, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      intArray0[0] = 0;
      resultMatrixHTML0.m_RowOrder = intArray0;
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(5, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      resultMatrixHTML0.setEnumerateColNames(false);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(5, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      resultMatrixHTML0.m_ColNameWidth = 0;
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(5, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      String string0 = resultMatrixHTML0.getDisplayName();
      assertEquals("HTML", string0);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(5, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      resultMatrixHTML0.setMeanPrec(5);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(5, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(5, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      String string1 = resultMatrixHTML0.showAverageTipText();
      assertEquals("Whether to show the row with averages.", string1);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(5, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(5, resultMatrixHTML0.getMeanPrec());
      assertNotNull(string1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = resultMatrixHTML0.getColNameWidth();
      assertEquals(0, int0);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(5, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(5, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      String string2 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string2);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.9192923826894943
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      boolean boolean0 = resultMatrixHTML0.getDefaultPrintRowNames();
      assertTrue(boolean0);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*";
      stringArray0[1] = ")";
      stringArray0[2] = " ";
      stringArray0[3] = "*";
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5847789800581973
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      int int0 = resultMatrixLatex0.getDisplayRow(0);
      assertEquals(0, int0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      int[][] intArray0 = new int[8][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 1;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 1;
      intArray4[3] = 0;
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 0;
      intArray4[7] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 0;
      intArray5[1] = 1;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 1;
      intArray5[5] = 0;
      intArray5[6] = 0;
      intArray5[7] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = 0;
      intArray6[5] = 2;
      intArray6[6] = 1;
      intArray6[7] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      
      intArray7[0] = 2;
      intArray7[1] = 0;
      intArray7[2] = 0;
      intArray7[3] = 2;
      intArray7[4] = 0;
      intArray7[5] = 0;
      intArray7[6] = 1;
      intArray7[7] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray2));
      
      intArray8[0] = 0;
      intArray8[1] = 0;
      intArray8[2] = 1;
      intArray8[3] = 0;
      intArray8[4] = 0;
      intArray0[7] = intArray8;
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>[1]</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>[v/ /*]</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixHTML0.addHeader("", "v");
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      boolean[] booleanArray0 = new boolean[1];
      resultMatrixLatex0.LOSS_STRING = "";
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      
      booleanArray0[0] = false;
      resultMatrixLatex0.WIN_STRING = ",BjOD2";
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      
      resultMatrixLatex0.setCountWidth((-3019));
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      
      String string0 = resultMatrixLatex0.toStringSummary();
      assertEquals("-summary data not set-", string0);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      String string1 = resultMatrixLatex0.getRevision();
      assertEquals("8034", string1);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertNotNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string1.equals((Object)string0));
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1472, 1378);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4294241462042714
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixPlainText0.m_MeanWidth = (-1114);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      
      resultMatrixPlainText0.WIN_STRING = "\tWhether to remove the classname package prefixes from the\n\tfilter names in datasets.\n\t(default: no)";
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      
      int int0 = resultMatrixPlainText0.getDefaultCountWidth();
      assertEquals(5, int0);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      boolean boolean0 = resultMatrixPlainText0.getDefaultPrintColNames();
      assertTrue(boolean0);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      boolean boolean1 = resultMatrixPlainText0.getPrintColNames();
      assertTrue(boolean1);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(boolean1 == boolean0);
      
      int int1 = resultMatrixPlainText0.getDisplayRow(97);
      assertEquals((-1), int1);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(int1 == int0);
      
      String string0 = resultMatrixPlainText0.getSummaryTitle(0);
      assertEquals("a", string0);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      assertEquals((-1114), resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      String string1 = resultMatrixPlainText0.padString("\".2-p\"e", 1, true);
      assertEquals("\"", string1);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = resultMatrixPlainText0.getRowName(0);
      assertEquals("row0", string2);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      resultMatrixSignificance0.clear();
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      resultMatrixSignificance0.m_ShowStdDev = true;
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals((-1114), resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.doubleToString((-3345.0238309384), (-5263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixCSV0.LOSS_STRING = "";
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      
      resultMatrixCSV0.setCountWidth(0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixCSV0.clear();
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixCSV0.m_StdDevWidth = 0;
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      
      resultMatrixCSV0.m_EnumerateRowNames = false;
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      
      resultMatrixCSV0.m_ColHidden = null;
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      
      int[][] intArray0 = new int[5][1];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1;
      intArray3[1] = 0;
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 1;
      intArray3[7] = 0;
      intArray3[8] = 2612;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 0;
      intArray4[3] = 2;
      intArray4[4] = 50;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 2;
      intArray5[1] = 2612;
      intArray5[2] = 2612;
      intArray5[3] = (-903);
      intArray5[4] = 0;
      intArray5[5] = 1;
      intArray5[6] = 0;
      intArray0[4] = intArray5;
      resultMatrixCSV0.m_NonSigWins = intArray0;
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      
      resultMatrixCSV0.m_EnumerateRowNames = false;
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      
      Enumeration enumeration0 = resultMatrixCSV0.listOptions();
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertNotNull(enumeration0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixCSV0.m_ShowStdDev = true;
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      
      resultMatrixCSV0.m_ColNameWidth = 0;
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      
      String string0 = resultMatrixCSV0.getRevision();
      assertEquals("8034", string0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      String string1 = resultMatrixCSV0.getSummaryTitle(0);
      assertEquals("a", string1);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = resultMatrixCSV0.getColNameWidth();
      assertEquals(0, int0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      boolean boolean0 = resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      assertFalse(boolean0);
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      int int1 = resultMatrixPlainText0.getDefaultRowNameWidth();
      assertEquals(25, int1);
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.262679877041316
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      resultMatrixCSV0.setMeanWidth(0);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      stringArray0[1] = "v";
      stringArray0[2] = "fq3td^JZmnW5";
      stringArray0[3] = " ";
      stringArray0[4] = "plot";
      stringArray0[5] = "*";
      stringArray0[6] = "[";
      stringArray0[7] = "v";
      stringArray0[8] = "[";
      ResultMatrixCSV.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      resultMatrixCSV0.m_PrintRowNames = false;
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      
      String string0 = resultMatrixCSV0.padString("plot", 0, true);
      assertEquals("plot", string0);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      int[] intArray0 = resultMatrixCSV0.getColOrder();
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertNull(intArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      String string1 = resultMatrixCSV0.toStringRanking();
      assertEquals("-ranking data not set-", string1);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertNotNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      resultMatrixSignificance0.setCountWidth(1);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      int int0 = resultMatrixSignificance0.getDefaultRowNameWidth();
      assertEquals(40, int0);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      int int1 = resultMatrixSignificance0.getCountWidth();
      assertEquals(1, int1);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(int1 == int0);
      
      boolean boolean0 = resultMatrixSignificance0.getDefaultPrintColNames();
      assertFalse(boolean0);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      boolean boolean1 = resultMatrixSignificance0.getDefaultEnumerateRowNames();
      assertFalse(boolean1);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(boolean1 == boolean0);
      
      resultMatrixCSV0.setStdDevPrec((-1950));
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      String[][] stringArray1 = new String[9][7];
      stringArray1[0] = stringArray0;
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = " ";
      stringArray2[1] = "[";
      stringArray2[2] = "]couGS9'&";
      stringArray2[3] = "*";
      stringArray2[4] = "v";
      stringArray2[5] = "fq3td^JZmnW5";
      stringArray2[6] = "fq3td^JZmnW5";
      stringArray2[7] = "[";
      stringArray2[8] = " ";
      stringArray1[1] = stringArray2;
      stringArray1[2] = stringArray0;
      stringArray1[3] = stringArray0;
      stringArray1[4] = stringArray0;
      stringArray1[5] = stringArray0;
      stringArray1[6] = stringArray0;
      String[] stringArray3 = new String[2];
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "v";
      stringArray3[1] = "# display it in a window:\n";
      stringArray1[7] = stringArray3;
      stringArray1[8] = stringArray0;
      int int2 = resultMatrixSignificance0.getColSize(stringArray1, 1448, true, true);
      assertEquals(0, int2);
      assertEquals(9, stringArray1.length);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7612001156935655
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      String string0 = resultMatrixPlainText0.colNameWidthTipText();
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      boolean boolean0 = resultMatrixCSV0.getDefaultPrintColNames();
      assertFalse(boolean0);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(748, 1);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(748, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(748, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      resultMatrixSignificance0.WIN_STRING = "]";
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(748, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(748, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      
      resultMatrixPlainText0.m_RemoveFilterName = true;
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      
      String string1 = resultMatrixSignificance0.padString(")", 0, true);
      assertEquals(")", string1);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(748, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(748, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertNotNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      
      resultMatrixSignificance0.setPrintColNames(false);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(748, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(748, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      resultMatrixSignificance0.setMeanPrec(0);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(748, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanPrec());
      assertEquals(748, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      String string2 = resultMatrixSignificance0.toStringRanking();
      assertEquals("-ranking data not set-", string2);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(748, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanPrec());
      assertEquals(748, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertNotNull(string2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = resultMatrixSignificance0.getRowCount();
      assertEquals(1, int0);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanPrec());
      assertEquals(748, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      resultMatrixCSV0.setMeanPrec(748);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(748, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      boolean boolean1 = resultMatrixCSV0.isStdDev(2);
      assertFalse(boolean1);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(748, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(boolean1 == boolean0);
      
      int int1 = resultMatrixCSV0.getDefaultRowNameWidth();
      assertEquals(25, int1);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(748, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(int1 == int0);
      
      resultMatrixPlainText0.setPrintColNames(false);
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]";
      stringArray0[1] = "";
      stringArray0[2] = "\tWhether to output column names or just numbers representing them.\n\t(default: no)";
      stringArray0[3] = ")";
      stringArray0[4] = "v";
      stringArray0[5] = "]";
      stringArray0[6] = "The maximum width of the column names (0 = optimal).";
      stringArray0[7] = " ";
      stringArray0[8] = "(";
      resultMatrixPlainText0.setOptions(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(5, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2047775241322567
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = "*";
      stringArray0[4] = "v";
      resultMatrixCSV0.setRemoveFilterName(false);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixCSV0.m_RowNames = stringArray0;
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(5, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      
      String string0 = resultMatrixCSV0.toStringSummary();
      assertEquals("-summary data not set-", string0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(5, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      boolean boolean0 = resultMatrixCSV0.getRowHidden(879);
      assertFalse(boolean0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(5, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex((-707), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9288799345939394
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = "*";
      stringArray0[4] = "v";
      resultMatrixCSV0.m_RowNames = stringArray0;
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(5, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      
      String string0 = resultMatrixCSV0.toStringSummary();
      assertEquals("-summary data not set-", string0);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(5, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      
      resultMatrixCSV0.setRowHidden((-707), false);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(5, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.034751942141855
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixLatex.main((String[]) null);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixLatex0.m_CountWidth = 2;
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixLatex0.setColNameWidth((-717));
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixLatex0.m_PrintColNames = false;
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      
      resultMatrixLatex0.setEnumerateColNames(false);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      String string1 = resultMatrixLatex0.removeFilterName("pBY+1*q\"F");
      assertEquals("pBY+1*q\"F", string1);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      
      resultMatrixLatex0.setRowNameWidth((-717));
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      boolean boolean0 = resultMatrixLatex0.getDefaultShowStdDev();
      assertFalse(boolean0);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixLatex0.setSignificance(3, 3, 3);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      String string2 = resultMatrixGnuPlot0.getSummaryTitle(0);
      assertEquals("a", string2);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 3;
      intArray0[6] = 0;
      String string3 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & \\\\\n\\hline\nrow0 & \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string3);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertNotNull(string3);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      intArray0[7] = 0;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertArrayEquals(new int[] {1, 2, 2, 1, 1, 3, 0, 0}, intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      resultMatrixGnuPlot0.setPrintRowNames(true);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      String string4 = resultMatrixGnuPlot0.getDisplayName();
      assertEquals("GNUPlot", string4);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertNotNull(string4);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = resultMatrixLatex0.enumerateColNamesTipText();
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", string5);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertNotNull(string5);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      double double0 = resultMatrixLatex0.getCount(3);
      assertEquals(0.0, double0, 0.01);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.9889840465642794
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertNotNull(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
  }
}
