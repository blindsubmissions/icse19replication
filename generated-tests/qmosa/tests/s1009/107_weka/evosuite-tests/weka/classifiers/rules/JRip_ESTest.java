/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:44:26 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\nOne condition: size = ", 35);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttrValue();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = (-1832.91150274232);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties((Properties) null);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("c(A!P", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Object object0 = jRip_NominalAntd0.copy();
      attribute0.equalsMsg(object0);
      Attribute.typeToString(476);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(2);
      assertEquals(2L, jRip0.getSeed());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.globalInfo();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("/q\u0006CY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /q\u0006CY not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-708.592395811));
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-708.592395811));
      jRip_RipperRule0.size();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1462);
      StringReader stringReader0 = new StringReader("JRIP: No model built yet.");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[JRIP:], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      String string0 = "";
      int int0 = 79;
      jRip_RipperRule0.getRevision();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Attribute attribute0 = new Attribute("8118");
      binarySparseInstance0.setWeight(1292);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("\tRetain enough PC attributes to account \n\tfor this proportion of variance in the original data.\n\t(default = 0.95)", list0, protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals("\tRetain enough PC attributes to account \n\tfor this proportion of variance in the original data.\n\t(default = 0.95) <= NaN", string0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance1);
      assertTrue(boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(1L);
      jRip0.optimizationsTipText();
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      StringReader stringReader0 = new StringReader("g8X*.]18b");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[g8X*.]18b], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.getTechnicalInformation();
      jRip0.getOptions();
      jRip0.enumerateMeasures();
      jRip0.globalInfo();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("wbB j\"t}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wbB j\"t} not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 0;
      jRip0.setOptimizations(0);
      jRip0.minNoTipText();
      int int1 = (-171);
      Attribute attribute0 = new Attribute("The minimum total weight of the instances in a rule.", (-171));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.accuRate = (double) 2;
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-171), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.setOptions((String[]) null);
      jRip0.setDebug(false);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, (String) null, (ProtectedProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      jRip0.getCapabilities();
      Utils.SMALL = Double.NEGATIVE_INFINITY;
      double double0 = 15.0;
      jRip0.setMinNo(15.0);
      String string0 = "";
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getUsePruning();
      jRip0.setDebug(true);
      String string0 = jRip0.globalInfo();
      jRip0.setFolds((-2557));
      jRip0.getMinNo();
      jRip0.setUsePruning(true);
      jRip0.checkErrorRateTipText();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(string0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      KDTree kDTree0 = new KDTree();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      jRip0.getUsePruning();
      jRip0.foldsTipText();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "Whether pruning is performed.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("?L^TI<1P0H P)._x", arrayList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      arrayList0.parallelStream();
      stringArray0[1] = "date";
      stringArray0[2] = "@attribute";
      arrayList0.add("date");
      stringArray0[3] = "numeric";
      stringArray0[4] = "numeric";
      stringArray0[5] = "relational";
      Attribute.main(stringArray0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList1, 4);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray1 = new String[6];
      stringArray1[0] = ".arff";
      stringArray1[1] = "@data";
      instances0.iterator();
      stringArray1[2] = "";
      jRip_NumericAntd1.splitData(instances0, 0.0, 2923.14476);
      jRip_NumericAntd0.toString();
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip1.getRuleStats(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-0.25);
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 3;
      intArray0[4] = 2;
      intArray0[5] = 211;
      intArray0[6] = 3;
      intArray0[7] = (-2857);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(" = ", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("?L^TI<1P0H P)._x", arrayList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      arrayList0.parallelStream();
      stringArray0[1] = "date";
      stringArray0[2] = "@attribute";
      arrayList0.add("date");
      stringArray0[3] = "numeric";
      stringArray0[4] = "numeric";
      stringArray0[5] = "relational";
      Attribute.main(stringArray0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList1, 4);
      String[] stringArray1 = new String[6];
      stringArray1[0] = ".arff";
      stringArray1[1] = "@data";
      jRip0.getMinNo();
      jRip0.getDebug();
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getSplitPoint();
      jRip_NumericAntd1.toString();
      Attribute attribute1 = new Attribute("-O <number of runs>", 1);
      attribute0.addStringValue(attribute1, (-2191));
      jRip_NumericAntd1.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2);
      assertEquals(2.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.540036303820981
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      attribute0.setStringValue("]@r=Gj*MS>yt>");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.att = attribute0;
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      jRip_NumericAntd0.cover = (double) 0;
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getAccuRate();
      System.setCurrentTimeMillis(0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.copy();
      System.setCurrentTimeMillis(0);
      jRip_NumericAntd0.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 75);
      Instances instances1 = new Instances(instances0);
      jRip_NumericAntd0.splitData(instances1, 0, 3);
      jRip0.toString();
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("?TEt%D!E", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 211;
      intArray0[4] = 211;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip0.getSeed();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.kNearestNeighbours(sparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.setOptions((String[]) null);
      jRip0.setCheckErrorRate(true);
      Attribute attribute0 = null;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getCover();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      JRip.main((String[]) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[2] = (-3028);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("KKKWi!n");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass(0.0, (Instances) null, 1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0.0);
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      System.setCurrentTimeMillis(120L);
      Attribute attribute0 = new Attribute("h_", " (");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("*kp>w1K(9QB@", arrayList0, 593);
      Instances instances1 = new Instances(instances0);
      jRip_NumericAntd0.splitData(instances0, 2, (-2562.794624));
      jRip0.toString();
      jRip_NumericAntd0.getAccuRate();
      jRip_RipperRule0.prune(instances0, true);
      jRip_NumericAntd0.splitData(instances1, 120L, 0);
      double double0 = jRip_NumericAntd1.getAccu();
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0642580751745085
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertTrue(boolean0);
      
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attribute attribute0 = new Attribute("ental", protectedProperties0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      attribute0.indexOfValue((String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.getCover();
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(3, jRip0.getFolds());
      assertEquals(11, stringArray0.length);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      jRip_RipperRule0.hasAntds();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable1.m_dtInstances;
      Attribute attribute0 = new Attribute("GvY_I]V.hOs&bmJV", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 244.501, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      ClassOrder classOrder0 = new ClassOrder();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1747);
      jRip0.setOptions((String[]) null);
      int int0 = jRip0.getOptimizations();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ClassOrder classOrder0 = new ClassOrder();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("ItUlpq*xJMt");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd3 = (JRip.NumericAntd)jRip_NumericAntd2.copy();
      assertEquals(Double.NaN, jRip_NumericAntd3.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd3.getSplitPoint(), 0.01);
      assertNotSame(jRip_NumericAntd3, jRip_NumericAntd2);
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      JRip.NumericAntd jRip_NumericAntd4 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd4.toString();
      assertEquals(Double.NaN, jRip_NumericAntd4.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd4.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd4.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd4.getAccu(), 0.01);
      assertEquals("ItUlpq*xJMt <= NaN", string0);
      
      jRip_RipperRule0.toString(attribute0);
      System.setCurrentTimeMillis((-1949L));
      String string1 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => ItUlpq*xJMt=", string1);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string2 = jRip0.debugTipText();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Whether debug information is output to the console.", string2);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      jRip_RipperRule0.hasAntds();
      IBk iBk0 = new IBk(4);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      jRip_RipperRule0.hasAntds();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-S";
      stringArray0[1] = ").\n";
      stringArray0[2] = "key";
      stringArray0[3] = "\nGrowing and pruning Revision ...";
      stringArray0[4] = "7J+%&q1Jo[z:4";
      stringArray0[5] = "{hq%4C";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \").
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("*kp>w1K(9QB@", arrayList0, 593);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "115-123");
      int[] intArray0 = new int[9];
      intArray0[0] = 593;
      intArray0[1] = 593;
      intArray0[2] = 593;
      intArray0[3] = 593;
      intArray0[4] = 593;
      intArray0[5] = 593;
      intArray0[6] = 593;
      intArray0[7] = 593;
      intArray0[8] = 593;
      Attribute attribute0 = new Attribute("Can't print the classifier.", (String) null);
      Attribute attribute1 = attribute0.copy("w");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 0.0, 593);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("bcMDT");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("bcMDT <= NaN", string0);
      
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      JRip jRip1 = new JRip();
      String[] stringArray0 = jRip1.getOptions();
      assertEquals(11, stringArray0.length);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      Attribute attribute0 = new Attribute("o+&");
      jRip_RipperRule0.hasAntds();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip_NumericAntd1.toString();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      jRip_RipperRule0.toString(attribute0);
      jRip_NumericAntd1.value = (-1072.8659);
      System.setCurrentTimeMillis(4);
      String string0 = jRip_NumericAntd1.toString();
      assertEquals("o+& >= NaN", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "f;T>{gS[GOlD 8";
      stringArray0[1] = "-E";
      stringArray0[2] = "Only positive weights allowed!";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "9=M7vI59I";
      stringArray0[6] = "";
      jRip0.setOptions(stringArray0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      jRip0.getOptions();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ls`e>", arrayList1, 854);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip1 = new JRip();
      jRip1.setUsePruning(false);
      jRip1.getOptions();
      assertFalse(jRip1.getUsePruning());
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }
}
