/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:06:18 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("64hMBxqU", false, "64hMBxqU");
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setPadText(true);
      outputFormat0.setIndentSize(467);
      outputFormat0.setXHTML(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent("%nwTt]<vi0KMk9c");
      outputFormat0.setTrimText(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setNewlines(false);
      assertEquals("%nwTt]<vi0KMk9c", outputFormat0.getIndent());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, (String) null);
      outputFormat0.setTrimText(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.getIndent();
      outputFormat0.setNewLineAfterNTags(3734);
      outputFormat0.isTrimText();
      outputFormat0.setPadText(false);
      OutputFormat.createCompactFormat();
      outputFormat0.setNewlines(false);
      assertEquals(3734, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setXHTML(false);
      outputFormat0.setIndent(false);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      
      String string0 = outputFormat1.getIndent();
      assertNull(string0);
      
      boolean boolean0 = outputFormat1.isSuppressDeclaration();
      assertFalse(boolean0);
      
      outputFormat1.setOmitEncoding(false);
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isPadText());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8W+B69pL>+\"ca&";
      stringArray0[1] = "";
      stringArray0[2] = "QuG(K!}s?";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = ">nx$/=2";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-940));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -940
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Q> AUeMm*K'zO~:l");
      outputFormat0.getLineSeparator();
      outputFormat0.setTrimText(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.getNewLineAfterNTags();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setPadText(true);
      outputFormat0.setLineSeparator("\n");
      outputFormat0.setIndentSize(1);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setIndentSize(0);
      outputFormat0.isPadText();
      outputFormat0.setIndentSize(1);
      outputFormat0.getEncoding();
      outputFormat0.getLineSeparator();
      assertEquals(" ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      boolean boolean0 = false;
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.getEncoding();
      int int0 = (-1874);
      outputFormat0.setNewLineAfterNTags((-1874));
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('H');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (H)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags(1);
      String string0 = null;
      outputFormat0.setIndent((String) null);
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent("\n");
      outputFormat0.setNewLineAfterDeclaration(true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(true);
      assertTrue(outputFormat1.isSuppressDeclaration());
      
      outputFormat0.isXHTML();
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(boolean0);
      
      boolean boolean1 = outputFormat0.isExpandEmptyElements();
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("YrLZj UK", false);
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewlines(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "YrLZj UK";
      stringArray0[1] = "gZ E%qCZddxPp";
      stringArray0[2] = "YrLZj UK";
      outputFormat0.parseOptions(stringArray0, 1);
      String string0 = null;
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setPadText(false);
      outputFormat0.setOmitEncoding(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('D');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (D)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("");
      outputFormat0.isNewlines();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndentSize(0);
      outputFormat0.isXHTML();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('3');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (3)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("M", false, "M");
      outputFormat0.isOmitEncoding();
      outputFormat0.setSuppressDeclaration(false);
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(boolean0);
      
      outputFormat0.setOmitEncoding(false);
      outputFormat0.isSuppressDeclaration();
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("\n", string0);
      
      outputFormat0.setEncoding("M");
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("M", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("M", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setPadText(false);
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\r4)Mz`siflR ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      outputFormat0.setNewlines(true);
      outputFormat0.setEncoding("");
      stringArray0[3] = "'+{{/@e%_**^;R";
      outputFormat0.setTrimText(false);
      outputFormat0.setNewlines(false);
      stringArray0[4] = "";
      stringArray0[5] = "";
      outputFormat0.setIndent(true);
      outputFormat0.parseOptions(stringArray0, 153);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndentSize(0);
      outputFormat0.isXHTML();
      outputFormat0.getLineSeparator();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent(false);
      outputFormat0.setPadText(false);
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4547433593334764
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("h", true, "h");
      outputFormat0.setXHTML(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setNewlines(true);
      outputFormat0.setIndentSize(0);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setIndent("-indentSize");
      outputFormat2.setLineSeparator("h");
      outputFormat0.setNewlines(true);
      outputFormat2.getEncoding();
      outputFormat1.isExpandEmptyElements();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "h";
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"h\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7363390511050665
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("YrLZj UK", false);
      outputFormat0.setTrimText(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat1.setNewlines(false);
      outputFormat1.setIndentSize(0);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("-indentSize");
      outputFormat3.setLineSeparator("YrLZj UK");
      outputFormat3.setNewlines(false);
      OutputFormat outputFormat4 = new OutputFormat("I4y6fZc\"@>2`HN{");
      outputFormat4.getEncoding();
      outputFormat4.isExpandEmptyElements();
      outputFormat2.setIndent(false);
      OutputFormat outputFormat5 = new OutputFormat("");
      outputFormat5.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat5.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7325520881169432
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = new OutputFormat(";q&$3,(V", true, "-newlines");
      outputFormat2.setNewlines(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}'S'X4+";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "}'S'X4+";
      outputFormat1.parseOptions(stringArray0, 496);
      assertFalse(outputFormat1.isNewlines());
      
      OutputFormat outputFormat3 = new OutputFormat("");
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat3.setLineSeparator("");
      outputFormat1.setPadText(false);
      assertTrue(outputFormat1.isNewlines());
      
      OutputFormat outputFormat4 = new OutputFormat("KbR=n.[ty/]oB\"", true, "2GL");
      assertEquals("KbR=n.[ty/]oB\"", outputFormat4.getIndent());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat("8%\"i9", true);
      outputFormat1.setExpandEmptyElements(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setPadText(true);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterNTags(1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8%\"i9";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "8%\"i9";
      stringArray0[3] = "^M!Yei";
      stringArray0[4] = "8%\"i9";
      outputFormat2.parseOptions(stringArray0, 2);
      outputFormat2.setPadText(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat2.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1477510561));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1477510561
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6145894329476085
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setAttributeQuoteCharacter('\"');
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setEncoding((String) null);
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat1.setNewLineAfterNTags(1850);
      outputFormat1.setIndent("1lI_`Z");
      outputFormat0.isSuppressDeclaration();
      outputFormat1.setTrimText(false);
      outputFormat1.setLineSeparator("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-encoding";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "1lI_`Z";
      stringArray0[5] = "1lI_`Z";
      stringArray0[6] = "1lI_`Z";
      stringArray0[7] = "q_byJC?Cx|Z*WH";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.536649897488158
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setTrimText(false);
      OutputFormat.createCompactFormat();
      String string0 = "-lineSeparator";
      String string1 = "@bt)U";
      OutputFormat outputFormat1 = new OutputFormat("@bt)U", false, "-lineSeparator");
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-lineSeparator";
      outputFormat1.setLineSeparator("-lineSeparator");
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6250481587325396
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat(")", true);
      outputFormat0.getAttributeQuoteCharacter();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setAttributeQuoteCharacter('\"');
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat3.getAttributeQuoteCharacter();
      outputFormat1.setIndent(")");
      outputFormat2.setLineSeparator(")");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "1lI_`Z";
      OutputFormat.createCompactFormat();
      stringArray0[2] = ")";
      stringArray0[3] = "1lI_`Z";
      stringArray0[4] = "-expandEmty-encoding";
      stringArray0[5] = null;
      stringArray0[6] = "1lI_`Z";
      stringArray0[7] = "CulT+";
      outputFormat2.parseOptions(stringArray0, 1);
      outputFormat2.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-1742));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1742
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9581727782547085
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat("8%\"i9");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8%\"i9";
      stringArray0[1] = "8%\"i9";
      stringArray0[2] = "8%\"i9";
      stringArray0[3] = "8%\"i9";
      stringArray0[4] = "8%\"i9";
      stringArray0[5] = "8%\"i9";
      outputFormat1.parseOptions(stringArray0, 39);
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat2.setEncoding("/&Hhm7;&@DiwjEK7Dh");
      outputFormat0.getAttributeQuoteCharacter();
      OutputFormat outputFormat3 = new OutputFormat();
      outputFormat3.setNewLineAfterNTags(2101);
      outputFormat3.setIndent("-padText");
      outputFormat0.setLineSeparator("/&Hhm7;&@DiwjEK7Dh");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "'y";
      stringArray1[1] = "q_byJC?Cx|Z*WH";
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.parseOptions(stringArray1, 1256);
      OutputFormat outputFormat4 = OutputFormat.createPrettyPrint();
      String[] stringArray2 = new String[6];
      stringArray2[0] = "-padText";
      stringArray2[1] = null;
      stringArray2[2] = "-padText";
      stringArray2[3] = "'y";
      stringArray2[4] = "'y";
      stringArray2[5] = "'y";
      // Undeclared exception!
      try { 
        outputFormat4.parseOptions(stringArray2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.285150884646584
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "S>y>kFlVi";
      stringArray0[1] = "-xhtml'y";
      stringArray0[2] = "-expandEmpty-nehli@nos";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 3);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.7201248812718097
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmZ'y");
      OutputFormat outputFormat1 = new OutputFormat("cD6R/`i&@");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "Eec[@@";
      stringArray0[3] = "-xhtmZ'y";
      stringArray0[4] = "Eec[@@";
      stringArray0[5] = "Invalid attribute quote character (";
      stringArray0[6] = "Eec[@@";
      stringArray0[7] = "-padText";
      outputFormat0.parseOptions(stringArray0, 1);
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat0.parseOptions(stringArray0, 10);
      assertTrue(outputFormat0.isTrimText());
      
      int int0 = outputFormat1.parseOptions(stringArray0, 10);
      assertFalse(outputFormat1.isTrimText());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0642580751745085
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-nehli@nos", true, (String) null);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent(true);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[8];
      outputFormat1.setXHTML(true);
      stringArray0[0] = "-expandEmpty-nehli@nos";
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = "-padext";
      stringArray0[7] = null;
      stringArray0[4] = "-expandEmpty-nehli@nos";
      stringArray0[5] = "-expandEmpty-nehli@nos";
      stringArray0[6] = "-padext";
      stringArray0[7] = "-expandEmpty-nehli@nos";
      outputFormat2.parseOptions(stringArray0, 496);
      int int0 = 2697;
      outputFormat1.parseOptions(stringArray0, 2697);
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat1.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-369));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -369
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "-expandEmpty-nehli@nos";
      String string1 = "KBzcEb2gCtn&";
      boolean boolean0 = true;
      OutputFormat outputFormat0 = new OutputFormat("KBzcEb2gCtn&", true, "-indent");
      OutputFormat outputFormat1 = new OutputFormat("KBzcEb2gCtn&");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-padext";
      stringArray0[1] = "-indent";
      stringArray0[2] = "-expandEmpty-nehli@nos";
      stringArray0[3] = "KBzcEb2gCtn&";
      stringArray0[4] = "-padext";
      outputFormat1.parseOptions(stringArray0, 1);
      int int0 = (-1600);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-1600));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1600
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
