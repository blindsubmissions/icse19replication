/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:15:11 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1262));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "A{g5u0K", 0, 0);
      StringWriter stringWriter1 = stringWriter0.append('8');
      stringWriter1.append('8');
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0, 0, 0);
      JavaParser javaParser0 = new JavaParser("A{g5u0K");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "A{g5u0K");
      stringWriter2.write(charArray0);
      simpleNode0.dump("A{g5u0K", stringWriter2);
      simpleNode0.toString();
      simpleNode0.jjtOpen();
      simpleNode1.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode1.jjtAddChild(simpleNode0, (-801));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-3637);
      SimpleNode simpleNode0 = new SimpleNode((-3637));
      StringReader stringReader0 = new StringReader("_~)+z");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      javaCharStream0.bufline = javaParserTokenManager0.jjnewLexState;
      simpleNode0.parser = javaParser1;
      javaParserTokenManager0.TokenLexicalActions(simpleNode0.parser.token);
      char char0 = 'Y';
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: ~
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 285;
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 285, 285);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1871);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 1871);
      simpleNode1.children = null;
      simpleNode0.jjtAddChild(simpleNode1, 1871);
      simpleNode0.jjtGetNumChildren();
      String string0 = "m7ZqN";
      // Undeclared exception!
      try { 
        simpleNode0.toString("m7ZqN");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1871
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(24);
      simpleNode0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.listIterator();
      simpleNode0.identifiers = arrayList0;
      simpleNode0.setIdentifier("implements");
      arrayList0.spliterator();
      simpleNode0.parent = null;
      arrayList0.addAll(1, (Collection<? extends String>) simpleNode0.identifiers);
      arrayList0.addAll(1, (Collection<? extends String>) simpleNode0.identifiers);
      simpleNode0.setIdentifier("");
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.setIdentifier("implements");
      simpleNode0.jjtOpen();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString("");
      simpleNode0.jjtGetNumChildren();
      simpleNode0.setIdentifier("");
      assertEquals(2, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("o'S&");
      simpleNode0.setIdentifier("n;wVsKrg.#D3/N");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      simpleNode0.parser = javaParser0;
      simpleNode0.children = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "n;wVsKrg.#D3/N", 0, 0);
      String string0 = "N";
      int int0 = 0;
      stringWriter0.write("o'S&", 0, (int) (byte)0);
      simpleNode0.jjtAddChild((Node) null, 7);
      stringWriter1.write("N", (int) (byte)0, 0);
      stringWriter0.write((int) (byte)0);
      stringWriter1.write("o'S&", (int) (byte)0, (int) (byte)0);
      simpleNode0.dump("WhileStatement", stringWriter1);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-3014));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3014
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.450805020083924
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(24);
      simpleNode0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.listIterator();
      simpleNode0.identifiers = arrayList0;
      simpleNode0.setIdentifier("implements");
      arrayList0.spliterator();
      simpleNode0.parent = null;
      arrayList0.addAll(1, (Collection<? extends String>) simpleNode0.identifiers);
      arrayList0.addAll(1, (Collection<? extends String>) simpleNode0.identifiers);
      simpleNode0.setIdentifier("");
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('`');
      simpleNode0.dump("FormalParameter", stringWriter1);
      assertEquals(2, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-3723));
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-2034852666));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2034852666
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.073542846408523
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "A{g5u0K", 0, 0);
      StringWriter stringWriter1 = stringWriter0.append('8');
      stringWriter1.append('8');
      char[] charArray0 = new char[0];
      int int0 = 0;
      stringWriter0.write(charArray0, 0, 0);
      JavaParser javaParser0 = new JavaParser("A{g5u0K");
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("VariableDeclaratorId", stringWriter2);
      simpleNode0.toString();
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.popNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(24);
      simpleNode0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.listIterator();
      simpleNode0.identifiers = arrayList0;
      simpleNode0.setIdentifier("implements");
      arrayList0.spliterator();
      simpleNode0.parent = null;
      arrayList0.addAll(1, (Collection<? extends String>) simpleNode0.identifiers);
      arrayList0.addAll(1, (Collection<? extends String>) simpleNode0.identifiers);
      simpleNode0.setIdentifier("");
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.jjtAddChild((Node) null, 24);
      assertEquals(25, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(24);
      simpleNode0.toString();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.listIterator();
      simpleNode0.identifiers = arrayList0;
      simpleNode0.setIdentifier("implements");
      arrayList0.spliterator();
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode((-1170));
      Node[] nodeArray0 = new Node[0];
      simpleNode1.children = nodeArray0;
      simpleNode1.dump("FormalParameter", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1170
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8717814824679821
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(39);
      simpleNode0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.listIterator();
      simpleNode0.identifiers = arrayList0;
      simpleNode0.setIdentifier("implements");
      arrayList0.spliterator();
      simpleNode0.parent = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.setIdentifier(">>");
      simpleNode0.setIdentifier("wA");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.toString();
      simpleNode0.dump("wA", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('?');
      JavaParser javaParser0 = new JavaParser("S=ta+uE khA`F~@0u_[");
      simpleNode0.toString("wA");
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("S=ta+uE khA`F~@0u_[", stringWriter1);
      simpleNode0.dump("Literal", stringWriter1);
      assertEquals("<AssignmentOperator>\n  <identifier>implements</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>wA</identifier>\n</AssignmentOperator>\n?<AssignmentOperator>\n  <identifier>implements</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>wA</identifier>\n</AssignmentOperator>\n<AssignmentOperator>\n  <identifier>implements</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>wA</identifier>\n</AssignmentOperator>\n<AssignmentOperator>\n  <identifier>implements</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>wA</identifier>\n</AssignmentOperator>\n", stringWriter1.toString());
      assertEquals("<AssignmentOperator>\n  <identifier>implements</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>wA</identifier>\n</AssignmentOperator>\n?<AssignmentOperator>\n  <identifier>implements</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>wA</identifier>\n</AssignmentOperator>\n<AssignmentOperator>\n  <identifier>implements</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>wA</identifier>\n</AssignmentOperator>\n<AssignmentOperator>\n  <identifier>implements</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>wA</identifier>\n</AssignmentOperator>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5875009311062074
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(14);
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter0 = new StringWriter(397);
      simpleNode0.toString();
      SystemInUtil.addInputLine("wzK!AP(My,<(\u0006s=`");
      simpleNode0.dump("wA", stringWriter0);
      simpleNode0.dump("wzK!AP(My,<(\u0006s=`", stringWriter0);
      simpleNode0.toString();
      StringWriter stringWriter1 = new StringWriter(14);
      simpleNode0.dump("(U9u", stringWriter1);
      simpleNode0.dump("ClassOrInterfaceBody : &&", stringWriter1);
      assertEquals("<ClassOrInterfaceBody>\n  <identifier>*amp</identifier>\n</ClassOrInterfaceBody>\n<ClassOrInterfaceBody>\n  <identifier>*amp</identifier>\n</ClassOrInterfaceBody>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(14);
      simpleNode0.setIdentifier("wzK!AP(My,<(\u0006s=`");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.listIterator();
      simpleNode0.setIdentifier("wzK!AP(My,<(\u0006s=`");
      simpleNode0.setIdentifier("wzK!AP(My,<(\u0006s=`");
      StringWriter stringWriter0 = new StringWriter(14);
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '?';
      charArray0[2] = '7';
      charArray0[3] = 'z';
      charArray0[4] = '%';
      stringWriter0.write(charArray0);
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter1 = stringWriter0.append('-');
      simpleNode0.dump("&", stringWriter1);
      assertEquals("|?7z%-<ClassOrInterfaceBody>\n  <identifier>wzK!AP(My,<(\u0006s=`</identifier>\n  <identifier>wzK!AP(My,<(\u0006s=`</identifier>\n  <identifier>wzK!AP(My,<(\u0006s=`</identifier>\n  <identifier>*amp</identifier>\n</ClassOrInterfaceBody>\n", stringWriter1.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("ClassOrInterfaceBody : wzK!AP(My,<(\u0006s=` : wzK!AP(My,<(\u0006s=` : wzK!AP(My,<(\u0006s=` : &", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8377716126398524
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(14);
      SimpleNode simpleNode0 = new SimpleNode(14);
      simpleNode0.setIdentifier("<<");
      simpleNode0.dump("\"void\"", stringWriter0);
      simpleNode0.toString();
      simpleNode0.dump("ClassOrInterfaceBody : <<", stringWriter0);
      assertEquals("<ClassOrInterfaceBody>\n  <identifier>*lshft</identifier>\n</ClassOrInterfaceBody>\n<ClassOrInterfaceBody>\n  <identifier>*lshft</identifier>\n</ClassOrInterfaceBody>\n", stringWriter0.toString());
      
      JavaParser javaParser0 = new JavaParser((String) null);
      JavaParser javaParser1 = new JavaParser((String) null);
      SimpleNode simpleNode1 = new SimpleNode(javaParser1, 1);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode1.dump("wH$}as@7_D:E1<AMB", stringWriter1);
      String string0 = simpleNode0.toString();
      assertEquals("ClassOrInterfaceBody : <<", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.7549967581308246
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(6);
      simpleNode0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.listIterator();
      simpleNode0.identifiers = arrayList0;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('q');
      stringWriter1.append('U');
      simpleNode0.dump("\"void\"", stringWriter0);
      simpleNode0.dump("VariableDeclaratorId", stringWriter0);
      StringWriter stringWriter2 = new StringWriter(344);
      simpleNode0.setIdentifier("<");
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("qU<ExtendsList>\n  <identifier>*lt</identifier>\n  <identifier>*lt</identifier>\n</ExtendsList>\n", stringWriter0.toString());
  }
}
