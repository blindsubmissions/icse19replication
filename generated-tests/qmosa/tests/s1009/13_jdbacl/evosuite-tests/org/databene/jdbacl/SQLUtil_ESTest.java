/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:17:30 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.catalog.UUID;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.command.ddl.CreateTableData;
import org.h2.command.dml.RunScriptCommand;
import org.h2.engine.Session;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "K";
      stringArray0[1] = "K";
      String string0 = SQLUtil.join("", "K", stringArray0, "", "K", stringArray0);
      assertEquals(" as K on K.K = K.K and K.K = K.K", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "LL\\tf.r$KY-yO'";
      SQLUtil.mutatesDataOrStructure("LL\tf.r$KY-yO'");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("LL\tf.r$KY-yO'", compositeDBObject0);
      tableContainer0.getTable("LL\tf.r$KY-yO'");
      tableContainer0.getTable("LL\tf.r$KY-yO'");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("LL\tf.r$KY-yO'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("exec");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "exec";
      stringArray0[1] = "exec";
      stringArray0[2] = "0DX1(";
      stringArray0[3] = "exec";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(exec, exec, 0DX1(, exec)", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("42X73", stringArray0);
      assertEquals("42X73.exec, 42X73.exec, 42X73.0DX1(, 42X73.exec", string1);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("42X73.exec, 42X73.exec, 42X73.0DX1(, 42X73.exec", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("COLTYPE", dBSchema0);
      String string2 = SQLUtil.typeAndName(dBPackage0);
      assertEquals("null COLTYPE", string2);
      assertNotNull(string2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      dBSchema0.setDoc("XMLNODE");
      SQLUtil.ownerDotComponent(dBSchema0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RAND", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "#0x9o|0l6.J)N+%$";
      String string0 = "/f7WG2Wym7#m";
      stringArray0[1] = "/f7WG2Wym7#m";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "SELECT * FROM null WHERE #0x9o|0l6.J)N+%$ = '#0x9o|0l6.J)N+%$' AND /f7WG2Wym7#m = '/f7WG2Wym7#m'");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // SELECT * FROM null WHERE #0x9o|0l6.J)N+%$ = '#0x9o|0l6.J)N+%$' AND /f7WG2Wym7#m = '/f7WG2Wym7#m'
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "SG#S!#8%Oi?@-T=}";
      SQLUtil.isDDL("SG#S!#8%Oi?@-T=}");
      SQLUtil.normalize("SG#S!#8%Oi?@-T=}", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "SG # S ! # 8 % Oi ? @ - T = }";
      stringArray0[1] = "SG#S!#8%Oi?@-T=}";
      stringArray0[2] = "SG # S ! # 8 % Oi ? @ - T = }";
      stringArray0[3] = "SG # S ! # 8 % Oi ? @ - T = }";
      String string1 = "";
      SQLUtil.leftJoin("SG#S!#8%Oi?@-T=}", stringArray0, "", (String) null, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string2 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(123, (-1882));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 123
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[2];
      stringArray1[0] = ">Q:<bj";
      stringArray1[1] = ">Q:<bj";
      SQLUtil.innerJoin(">Q:<bj", stringArray0, ">Q:<bj", "", stringArray1);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, ">Q:<bj as  on ", ">Q:<bj", basicUUID0, false);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "<P\"O?ZxI ", schemaDescriptor0, (-2617), false, true);
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getConstraintDescriptors(tableDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.isQuery("");
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.normalize("", true);
      SQLUtil.parseColumnTypeAndSize("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "F+8CdPS;azx?X{f/G", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      dBSchema0.setDoc("XMLNODE");
      SQLUtil.ownerDotComponent(dBSchema0);
      String string0 = "RAND";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RAND");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "RAND");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RAND", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBTable0.removeForeignKeyConstraint((DBForeignKeyConstraint) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ZC! T^YM";
      stringArray0[1] = "ZC! T^YM";
      stringArray0[2] = "ZC! T^YM";
      stringArray0[3] = "ZC! T^YM";
      defaultDBTable0.getComponents();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ZC! T^YM", false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      String string0 = "org.databene.jdbacl.SQLUtil";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CONSTRAINT \"ZC! T^YM\" ");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2260), (Object) "ZC! T^YM");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2260
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("selectleft");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "selectleft";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(selectleft)", string0);
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = "(selectleft)";
      stringArray1[1] = "42X73";
      stringArray1[2] = "ygF<3bil)4)Zbs_`fc";
      stringArray1[3] = "42X73";
      stringArray1[4] = "0DX1(";
      String string1 = SQLUtil.renderColumnListWithTableName("selectleft", stringArray1);
      assertEquals("selectleft.(selectleft), selectleft.42X73, selectleft.ygF<3bil)4)Zbs_`fc, selectleft.42X73, selectleft.0DX1(", string1);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("create unique indexnlo>nx$/=2", dBCatalog0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      String string2 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string2);
      assertNotNull(string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.renderValue((Object) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "--";
      stringArray0[1] = "%`Y/\"1lI_`Z2H";
      stringArray0[2] = "--";
      stringArray0[3] = "null";
      stringArray0[4] = "--";
      stringArray0[2] = "%`Y/\"1lI_`Z2H";
      stringArray0[6] = "null";
      SQLUtil.substituteMarkers("--", "%`Y/\"1lI_`Z2H", "null");
      SQLUtil.renderColumnListWithTableName("org.apache.derby.impl.sql.compile.DropTableNode", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("*DN:8,bERsXWEIogX", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("COLTYPE", dBSchema0);
      SQLUtil.typeAndName(dBPackage0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("r4)+'<!;(2\"bn|B5*");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("--", "*DN:8,bERsXWEIogX", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable(" as ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ' as '
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.removeComments("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Yv*1*4I$ASlT-q(A9");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "Yv*1*4I$ASlT-q(A9";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "//";
      stringArray0[6] = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '1';
      // Undeclared exception!
      try { 
        stringBuilder1.append(charArray0, 1681, 1681);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.isDDL("alter materialized viewsg#s!#8%oi?@-t=}");
      SQLUtil.isQuery(", ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "alter materialized viewsg#s!#8%oi?@-t=}";
      stringArray0[1] = "alter materialized viewsg#s!#8%oi?@-t=}";
      stringArray0[2] = "alter materialized viewsg#s!#8%oi?@-t=}";
      stringArray0[3] = ", ";
      stringArray0[4] = "alter materialized viewsg#s!#8%oi?@-t=}";
      stringArray0[5] = ", ";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (alter materialized viewsg#s!#8%oi?@-t=}, alter materialized viewsg#s!#8%oi?@-t=}, alter materialized viewsg#s!#8%oi?@-t=}, , , alter materialized viewsg#s!#8%oi?@-t=}, , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBTable dBTable0 = null;
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'a';
      stringWriter0.append('a');
      String string0 = "hG@-0'edUQS";
      Object[] objectArray0 = new Object[0];
      DBDataType dBDataType0 = DBDataType.getInstance((-2937), "hG@-0'edUQS");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hG@-0'edUQS", (DBTable) null, dBDataType0, integer0, integer1);
      defaultDBColumn0.setOwner((CompositeDBObject<?>) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.isDML("HG@-0'EDUQS(2,0)");
      SQLUtil.isQuery("HG@-0'EDUQS(2,0)");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("hG@-0'edUQS", true, (DBTable) null, "hG@-0'edUQS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(44);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(true);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      SQLUtil.isDDL("- 0");
      boolean boolean0 = SQLUtil.isDDL("nlO>nx$/=2");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XMNgmODE", false, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "nlO>nx$/=2", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT XMNgmODE PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.isQuery(">*N|B");
      String string0 = "(=}aRJ";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(=}aRJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (=}aRJ
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7351264569629226
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%`Y/\"1lI_`Z2H";
      stringArray0[1] = "--";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XMNgmODE", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "XSAM0.S", true, stringArray0);
      defaultDBTable0.getUniqueConstraints(true);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = new DBPrimaryKeyConstraint(defaultDBTable0, " = ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint2, nameSpec0);
      assertEquals("PRIMARY KEY (%`Y/\"1lI_`Z2H, --)", string1);
      
      String string2 = SQLUtil.typeAndName(dBPrimaryKeyConstraint1);
      assertEquals("unique constraint XSAM0.S", string2);
      assertNotNull(string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('\"');
      SQLUtil.addOptionalCondition("into", stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder("ZC! T^YM");
      // Undeclared exception!
      try { 
        stringBuilder0.delete(70, 171);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "T/{qs";
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      Character character0 = new Character('&');
      SQLUtil.renderValue(character0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.90853528164356
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("XMLNODE");
      assertFalse(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog("//");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ac=!&:H";
      stringArray0[1] = "";
      stringArray0[2] = "XMNgmODE";
      stringArray0[3] = "XMLNODE";
      stringArray0[4] = "XMLNODE";
      stringArray0[5] = "XMNgmODE";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "H:aM0Au-", true, stringArray0);
      defaultDBTable0.getUniqueConstraints(false);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "Ac=!&:H";
      stringArray1[1] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("CONSTRAINT H:aM0Au- PRIMARY KEY (Ac=!&:H, , XMNgmODE, XMLNODE, XMLNODE, XMNgmODE)", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4941751382893083
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" RENAME ");
      SQLUtil.mutatesDataOrStructure(" RENAME ");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "getDistinctGroupedAggregateResultSet");
      stringBuilder0.append("getDistinctGroupedAggregateResultSet");
      stringBuilder0.insert(1, (float) 1);
      SQLUtil.addRequiredCondition("getDistinctGroupedAggregateResultSet", stringBuilder0);
      assertEquals("g1.0etDistinctGroupedAggregateResultSetgetDistinctGroupedAggregateResultSet and getDistinctGroupedAggregateResultSet", stringBuilder0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4306853360872929
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.removeComments("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Less severe exception raised during cleanup (ignored) ";
      stringArray0[1] = "";
      stringArray0[2] = "//";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "//";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName("create tablet/{qs", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(" < ", dBCatalog0);
      dBSchema0.getTriggers();
      DBPackage dBPackage0 = new DBPackage("8L^{Q?<r KLd.6M2i", dBSchema0);
      SQLUtil.typeAndName(dBCatalog0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("UNIQUE_INDEX_NAME");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(" REFERENCES ", "Less severe exception raised during cleanup (ignored) ", versionNumber0);
      SQLUtil.normalize("Less severe exception raised during cleanup (ignored) ", true);
      SQLUtil.parseColumnTypeAndSize("create materialized view");
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("org.apache.derby.impl.sql.compile.DropTableNode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'org.apache.derby.impl.sql.compile.DropTableNode'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("Xl[o,NN");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "--";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "XMNgmODE";
      stringArray0[6] = "XMNgmODE";
      stringArray0[7] = "XMNgmODE";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      defaultDBTable0.getUniqueConstraints(false);
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      dBSchema0.setName("XMLNODE");
      dBSchema0.setDoc("XMLNODE");
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("XMLNODE", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k#ND", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "XMLNODE";
      stringArray0[1] = "XMLNODE";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "o$_*/*T", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (XMLNODE, XMLNODE)", string1);
      
      String string2 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint o$_*/*T", string2);
      assertNotNull(string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(53);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/t|0!2_f");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.println(".V_JmX)CvxCG%%c");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf((Locale) null, "select intoll\tf.r$ky-yo'", objectArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID("select intoll\tf.r$ky-yo'");
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTableDescriptor((UUID) basicUUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-3420), "*/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*/");
      StringBuilder stringBuilder0 = new StringBuilder("42504");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("42504");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "42504";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "42504", true, stringArray0);
      dBPrimaryKeyConstraint0.addColumnName("*/");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, (String[]) null, defaultDBTable1, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      assertNull(dBForeignKeyConstraint0.getDoc());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-3420), "*/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*/");
      StringBuilder stringBuilder0 = new StringBuilder("42504");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("42504");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*/";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "42504", true, stringArray0);
      dBPrimaryKeyConstraint0.addColumnName("*/");
      dBPrimaryKeyConstraint0.setName("42504");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis((-3420));
      System.setCurrentTimeMillis((-3420));
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("42504CONSTRAINT 42504 ", stringBuilder0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9559838465843622
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "exec";
      SQLUtil.removeComments("exec");
      SQLUtil.mutatesDataOrStructure("exec");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("exec");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(53);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema(")", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      TableContainer tableContainer0 = new TableContainer("sg#s!#o8%o", dBCatalog0);
      defaultDBTable0.isIdentical(tableContainer0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getUniqueConstraints(false);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter table- 0", false, (String[]) null);
      dBUniqueConstraint0.setName("rYjMns<f:/R|lfR%");
      SQLUtil.normalize("fBLM+d]{ON", false);
      SQLUtil.parseColumnTypeAndSize("rYjMns<f:/R|lfR%");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fBLM  + d ] { ON");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ")");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder("fBLM  + d ] { ON");
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-1983719162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBDataType.getInstance((-2), "*/");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      SQLUtil.ownerDotComponent(dBSchema0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-181677392), "*/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn1);
      defaultDBColumn1.getForeignKeyConstraint();
      String string0 = "snfV0?";
      StringBuilder stringBuilder0 = new StringBuilder(5737);
      SQLUtil.mutatesDataOrStructure("insertcasewhen");
      stringBuilder0.append("$bDB ");
      TableContainer tableContainer0 = new TableContainer("alter table");
      DBSchema dBSchema0 = new DBSchema("5.[=Y?dqA[.MGCyqG_");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("*/", dBSchema0);
      StringBuilder stringBuilder1 = new StringBuilder(90030);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("5.[=Y?dqA[.MGCyqG_", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(5737, 128);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 5737
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = "alter materialized view";
      stringArray0[2] = "alter materialized view";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized view", true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      DBDataType.getInstance((-2), "gs47r<RtVu");
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      dBCatalog0.getSchema("gs47r<RtVu");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("gs47r<RtVu", (DBSchema) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSchema dBSchema0 = new DBSchema("s[Te", dBCatalog0);
      DBSchema dBSchema1 = new DBSchema("s[Te", dBCatalog0);
      dBSchema1.setOwner(defaultDBTable0);
      dBSchema0.setDoc("reate tablerename");
      DBPackage dBPackage0 = new DBPackage("reate tablerename", dBSchema1);
      SQLUtil.typeAndName((DBObject) null);
      VersionNumber.valueOf("9 rH$%! l4EUeo");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("gs47r<RtVu");
      assertNull(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBDataType.getInstance((-2), "*/");
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      dBCatalog0.getSequences();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      defaultDBTable0.isIdentical(dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getUniqueConstraints(true);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      SQLUtil.constraintName(dBUniqueConstraint0);
      Random.setNextRandom((-2));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("rename");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder("-=K^@X&CKP.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertll\tf.r$ky-yo'");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "AZ:23{%1S&L)W2sY";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "AZ:23{%1S&L)W2sY", true, stringArray0);
      dBPrimaryKeyConstraint0.addColumnName("rename");
      dBPrimaryKeyConstraint0.setName((String) null);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (AZ:23{%1S&L)W2sY, rename)", string0);
      
      dBPrimaryKeyConstraint0.setDoc("AZ:23{%1S&L)W2sY");
      System.setCurrentTimeMillis(2081L);
      System.setCurrentTimeMillis(1915L);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("-=K^@X&CKP.", stringBuilder0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.15841057013179086
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("alter materialized viewll\tf.r$ky-yo'", true);
      StringBuilder stringBuilder0 = new StringBuilder(3694);
      SQLUtil.addRequiredCondition("alter materialized viewll\tf.r$ky-yo'", stringBuilder0);
      assertEquals("alter materialized viewll\tf.r$ky-yo'", stringBuilder0.toString());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0330001999799117
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-181677392), "*/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn1);
      defaultDBColumn1.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(5737);
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      stringBuilder0.append("update#h~(4w");
      TableContainer tableContainer0 = new TableContainer("*/");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("\"9Tst", true);
      assertEquals("\"9Tst\"", string0);
      
      String string1 = SQLUtil.normalize("6o_", false);
      assertEquals("6o_", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.187777614050575
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-3420), "*/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize(".^*2><", false);
      assertEquals(".^ * 2 > <", string0);
      
      String string1 = SQLUtil.normalize("zW134Mz", false);
      assertEquals("zW134Mz", string1);
      
      boolean boolean0 = SQLUtil.isQuery("*/");
      assertFalse(boolean0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      String string0 = SQLUtil.normalize("setCharacterStream(String,Reader,int)", false);
      assertEquals("setCharacterStream (String, Reader, int)", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.30463609734923813
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      SQLUtil.normalize("//", false);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Less severe exception raised during cleanup (ignored) ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ignored\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-181677392), "*/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn1);
      defaultDBColumn1.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(5737);
      SQLUtil.mutatesDataOrStructure("insertcasewhen");
      stringBuilder0.append("$bDB ");
      TableContainer tableContainer0 = new TableContainer("alter table");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "*/", false, stringArray0);
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2173, "drop indexinsertcasewhen");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter session", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.mutatesDataOrStructure("alter session DROP INDEXINSERTCASEWHEN NULL");
      TableContainer tableContainer0 = new TableContainer("2");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.normalize("2", true);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable1.getUniqueConstraint("alter session");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3420), "*/");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.h2.message.TraceObject", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Xj2[2", defaultDBTable0, dBDataType0, integer2);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DBDataType dBDataType1 = DBDataType.getInstance((-3420), "Xj2[2");
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("Xj2[2", defaultDBTable0, dBDataType1, integer0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("JR8P,|/m!e<hz~uG", defaultDBTable0, dBDataType0, integer3);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("nio:", defaultDBTable0, dBDataType0);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn5;
      DefaultDBColumn defaultDBColumn6 = new DefaultDBColumn("drop index", defaultDBTable0, (-517329621), "JR8P,|/m!e<hz~uG");
      dBColumnArray0[6] = (DBColumn) defaultDBColumn6;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String string0 = SQLUtil.removeComments("alter index");
      assertEquals("alter index", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9053685045623691
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-181677392), "*/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn1);
      defaultDBColumn1.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(5737);
      SQLUtil.normalize("*/ */(2) NULL", false);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("gc");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3046193848206715
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-181677392), "*/");
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBColumn1.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(246);
      SQLUtil.mutatesDataOrStructure("insertcasewhen");
      stringBuilder0.append("*/ */ NULL");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn1);
      arrayList0.add((DBColumn) defaultDBColumn0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("java.sql.PreparedStatement", 256);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("0OsT4y-5'4PlvvG");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7351264569629226
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-181677418), "*/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*/";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "*/", false, stringArray0);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      String[] stringArray1 = defaultDBTable0.getPKColumnNames();
      assertNotSame(stringArray1, stringArray0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W+]");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "W+]";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "W+]", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getPKColumnNames();
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        errorMessages0.getNCharacterStream("W+]");
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // Method org/apache/derby/diag/ErrorMessages.getNCharacterStream(Ljava/lang/String;)Ljava/io/Reader; is abstract
         //
         verifyException("org.apache.derby.diag.ErrorMessages", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(2984, "into");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType dBDataType0 = DBDataType.getInstance(389, "create unique indexless severe exception raised during cleanup (ignored)");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(",3YXGR[h\"=U", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.renderColumn(defaultDBColumn1);
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(197);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=?");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }
}
