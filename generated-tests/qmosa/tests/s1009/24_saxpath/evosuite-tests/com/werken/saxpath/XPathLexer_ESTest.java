/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:15:45 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      xPathLexer0.leftParen();
      xPathLexer0.consume((-1));
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.consume((-1));
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.div();
      xPathLexer0.getXPath();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.minus();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token5);
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('j');
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.dollar();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      xPathLexer0.setXPath("");
      boolean boolean1 = xPathLexer0.isIdentifierChar('~');
      assertFalse(boolean1);
      
      boolean boolean2 = xPathLexer0.isIdentifierChar('j');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      assertNull(xPathLexer0.getXPath());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0057536938536618
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.consume(1576);
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      xPathLexer0.not();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.LA(4831);
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-476));
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.identifier();
      xPathLexer0.LA(61);
      Token token0 = xPathLexer0.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0596736472752233
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.isIdentifierChar('6');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.setXPath("&jLgkB9*L&d%*M");
      Token token4 = xPathLexer0.rightParen();
      assertEquals("&", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("jLgkB9", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      assertNotNull(token5);
      
      xPathLexer0.isIdentifierChar('n');
      Token token6 = xPathLexer0.slashes();
      assertEquals("*", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("L", token7.getTokenText());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("&", token8.getTokenText());
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("d", token9.getTokenText());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3192707621675714
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.colon();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('5');
      xPathLexer0.pipe();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNull(token7);
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("");
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.consume(30);
      xPathLexer0.consume(30);
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertTrue(boolean1 == boolean0);
      
      xPathLexer0.whitespace();
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer0.whitespace();
      assertEquals((-2), token11.getTokenType());
      
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
      
      boolean boolean2 = xPathLexer0.isIdentifierChar('5');
      assertFalse(boolean2 == boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.193015797743519
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("m.werken.saxpath.XPathLexer", token3.getTokenText());
      assertNotNull(token3);
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.13542463178894
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("S", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("N", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.star();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
      
      xPathLexer0.number();
      Token token3 = xPathLexer0.star();
      assertEquals("'", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.consume(0);
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("c", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierStartChar('X');
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4667127410335872
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-412));
      xPathLexer0.setXPath("@J");
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("@", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("J", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('1');
      assertTrue(boolean0);
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7905399943953901
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-412));
      xPathLexer0.setXPath(".Jfs5MG-");
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.isIdentifierChar('g');
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.997766565380617
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      xPathLexer0.not();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.LA(4831);
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-476));
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9540198478236683
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.isIdentifierChar('\'');
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.isIdentifierChar('[');
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2444926304072963
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals("S", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.star();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("'", token3.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("SNc!'c+dIB");
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("S", token5.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("N", token6.getTokenText());
      
      xPathLexer0.consume(12);
      xPathLexer0.consume(3266);
      XPathLexer xPathLexer1 = new XPathLexer("SNc!'c+dIB");
      boolean boolean1 = xPathLexer1.hasMoreChars();
      assertTrue(boolean1);
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer1.operatorName();
      Token token9 = xPathLexer1.dollar();
      assertEquals("S", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      boolean boolean2 = xPathLexer2.isIdentifierChar('5');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2875493488414336
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-412));
      xPathLexer0.setXPath("@J");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.isIdentifierChar('1');
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2668103291664836
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.plus();
      assertEquals("6", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("4", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("hM", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.isIdentifierChar('\'');
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("64hMBxqU");
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.identifier();
      assertEquals("hMBxqU", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      xPathLexer1.currentPosition();
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3116307656233763
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.slashes();
      assertEquals("S", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.equals();
      assertEquals("!", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("'", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("c", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("+", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.LA(0);
      xPathLexer0.not();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("I", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals("B", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('j');
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.dollar();
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.whitespace();
      assertEquals((-2), token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer0.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      xPathLexer0.setXPath(") (");
      xPathLexer0.isIdentifierChar('+');
      boolean boolean1 = xPathLexer0.isIdentifierChar('~');
      assertFalse(boolean1 == boolean0);
      
      xPathLexer0.or();
      Token token15 = xPathLexer0.nextToken();
      assertEquals(")", token15.getTokenText());
      assertEquals(2, token15.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.736339051105066
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<kC-?L^TI<");
      Token token0 = xPathLexer0.literal();
      assertEquals("kC-?L^TI", token0.getTokenText());
      assertNotNull(token0);
      assertEquals(27, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer1.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer1.comma();
      assertEquals(32, token5.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer2.identifier();
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Bb");
      xPathLexer3.currentPosition();
      Token token4 = xPathLexer0.dots();
      assertEquals("m.", token4.getTokenText());
      assertEquals(14, token4.getTokenType());
  }
}
