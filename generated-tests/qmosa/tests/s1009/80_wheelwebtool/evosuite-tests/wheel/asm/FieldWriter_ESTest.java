/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:58:02 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(321);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 321, "&%", "Signature", "Signature", "Signature");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
      
      ByteVector byteVector0 = new ByteVector(321);
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = fieldWriter0.next;
      Attribute attribute0 = new Attribute("&%");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'y';
      charArray0[2] = 'S';
      FieldWriter fieldWriter2 = new FieldWriter(classWriter0, 4096, "", "", "3", (Object) null);
      int int1 = fieldWriter2.getSize();
      assertEquals(22, int1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9433483923290392
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(321);
      String string0 = "&%";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 321, "&%", "Signature", (String) null, "Signature");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(321);
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = fieldWriter0.next;
      FieldWriter fieldWriter2 = null;
      try {
        fieldWriter2 = new FieldWriter(classWriter0, 868, "Signature", "&%", "", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ByteVector@b
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33554432);
      ClassWriter classWriter1 = new ClassWriter(1442);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 1, "", "u|[\"0)|B", "", "");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("u|[\"0)|B", true);
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("", false);
      assertNotSame(annotationVisitor1, annotationVisitor0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0704745451731499
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(321);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 321, "&%", "Signature", "Signature", "Signature");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(321);
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = fieldWriter0.next;
      Attribute attribute0 = new Attribute("&%");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'y';
      charArray0[2] = 'S';
      FieldWriter fieldWriter2 = classWriter0.lastField;
      fieldWriter2.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2086));
      ClassWriter classWriter1 = new ClassWriter((-2086));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "S*6RUSc0[G9(%MB_>", "EFFFFFFFFGGFFFGGFFFEEFGFGFHEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEDEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEF%DEFFDEDEERBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "S*6RUSc0[G9(%MB_>", "");
      fieldWriter0.getSize();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FieldWriter fieldWriter1 = new FieldWriter(classWriter1, (-3105), "L9dg*)PX,0z-h,", "L9dg*)PX,0z-h,", "", "RuntimeVisibleAnnotations");
      FieldWriter fieldWriter2 = classWriter1.lastField;
      fieldWriter2.visitAnnotation("O[2Z`yc}z5", false);
      fieldWriter1.getSize();
      fieldWriter1.visitAnnotation("", false);
      ByteVector byteVector0 = classWriter1.pool;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S*6RUSc0[G9(%MB_>");
      ByteVector byteVector1 = byteVector0.putInt(1);
      ByteVector byteVector2 = byteVector1.putLong(1786L);
      ByteVector byteVector3 = byteVector2.putByte(46);
      fieldWriter2.put(byteVector3);
      assertSame(fieldWriter2, fieldWriter1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(481);
      ClassWriter classWriter1 = new ClassWriter((-2355));
      classWriter1.visitSource("", (String) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, (-2355), "org.apache.commons.io.filefilter.NameFileFilter", "S*6RUSc0[G9(%MB_>", "S*6RUSc0[G9(%MB_>", "");
      ClassWriter classWriter2 = new ClassWriter(1);
      classWriter2.newField("", "", "S*6RUSc0[G9(%MB_>");
      fieldWriter0.next = fieldWriter0;
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12(353, 6);
      fieldWriter0.next.put(byteVector1);
      fieldWriter0.getSize();
      fieldWriter0.next.visitEnd();
      assertSame(fieldWriter0.next, fieldWriter0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0317671113505356
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(321);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 321, "&%", "Signature", "Signature", "Signature");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(321);
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = fieldWriter0.next;
      Attribute attribute0 = new Attribute("&%");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'y';
      charArray0[2] = 'S';
      FieldWriter fieldWriter2 = classWriter0.lastField;
      fieldWriter2.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0042424730540764
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter((-2325));
      classWriter0.version = (-2325);
      classWriter0.visitSource("", (String) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2325), "org.apache.commons.io.filefilter.NameFileFilter", "S*6RUSc0[G9(%MB_>", "S*6RUSc0[G9(%MB_>", "");
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      ByteVector byteVector1 = new ByteVector(5);
      ByteVector byteVector2 = byteVector0.put12(1, 167);
      ByteVector byteVector3 = byteVector2.putLong(30);
      fieldWriter0.put(byteVector2);
      fieldWriter0.put(byteVector1);
      assertNotSame(byteVector1, byteVector3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1491));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "L9dg*)PX,0z-h,", "9rpw>H", "{f+d 4}", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter0.visitAnnotation("9rpw>H", false);
      fieldWriter1.getSize();
      fieldWriter1.visitAnnotation("9rpw>H", true);
      ByteVector byteVector0 = classWriter0.pool;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O[2Z`yc}z5");
      ByteVector byteVector1 = byteVector0.putInt(2);
      byteVector0.putLong((-1866L));
      ByteVector byteVector2 = byteVector0.putShort((-1491));
      byteVector2.putByte((-3105));
      fieldWriter1.put(byteVector2);
      assertSame(byteVector2, byteVector1);
  }
}
