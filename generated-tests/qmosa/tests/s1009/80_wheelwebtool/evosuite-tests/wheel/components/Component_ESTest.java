/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:20:38 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.IEngine;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "siflR 54$)A&Be;j";
      Form form0 = new Form("siflR 54$)A&Be;j");
      form0.renderHint("siflR 54$)A&Be;j");
      ActionExpression actionExpression0 = new ActionExpression("siflR 54$)A&Be;j");
      actionExpression0.submitForm(false);
      String string1 = null;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2510), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Table table0 = null;
      try {
        table0 = new Table((Component) null, "S$(QptP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "code", "code");
      FormElement formElement0 = checkbox0.setFormElementName("Can't add components to a component that is not an instance of IContainer.");
      // Undeclared exception!
      try { 
        formElement0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "Y;]H/}\\p^}Um";
      TextArea textArea0 = new TextArea(errorPage0, "Y;]H/}p^}Um", "Y;]H/}p^}Um");
      Link link0 = new Link(errorPage0, textArea0);
      Table table0 = new Table(link0, "Y;]H/}p^}Um");
      String string1 = "4lQG/QbmmmVdXp+";
      // Undeclared exception!
      try { 
        table0.id("4lQG/QbmmmVdXp+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "[dXTLi\"c";
      Form form0 = new Form("[dXTLi\"c");
      String string1 = "";
      DateInput dateInput0 = null;
      try {
        dateInput0 = new DateInput(form0, "[dXTLi\"c", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a%n?DXOXx;KxYH=");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("ul");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(xmlEntityRef0, "F#*1tL=H-SySuM{g/B", "_;ytp[8-WNJ1NZSN", stringSelectModel0, elExpression0);
      Checkbox checkbox0 = new Checkbox(checkboxGroup0, "_;ytp[8-WNJ1NZSN", "F#*1tL=H-SySuM{g/B");
      FormElement formElement0 = checkbox0.validationRule("_;ytp[8-WNJ1NZSN");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "a%n?DXOXx;KxYH=";
      stringArray0[1] = "%Zq?";
      stringArray0[2] = "F#*1tL=H-SySuM{g/B";
      stringArray0[3] = "5(O7!cy,+ 6?@";
      stringArray0[4] = "F#*1tL=H-SySuM{g/B";
      // Undeclared exception!
      try { 
        formElement0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      Select select0 = new Select(errorPage0, (String) null, (String) null, (ISelectModel) null, (CharSequence) null);
      Any any0 = new Any(select0, (CharSequence) null);
      String string1 = "span";
      Submit submit0 = new Submit(any0, "span", "Failed to initialize SimpleDateFormat with pattern '");
      FormElement formElement0 = submit0.value("Failed to initialize SimpleDateFormat with pattern '");
      // Undeclared exception!
      try { 
        formElement0.samp((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "n0n";
      Form form0 = new Form("n0n");
      // Undeclared exception!
      try { 
        form0.h4((Object) "J`[L\"DWDWZ(rs@[;1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "_wrapper", "9ih2 {m$LfM", "_wrapper");
      String string0 = "812!i\"6W;p~K.U";
      TextInput textInput0 = new TextInput(dateInput0, "812!i\"6W;p~K.U", "_wrapper");
      FormElement formElement0 = textInput0.value("9ih2 {m$LfM");
      String string1 = "5!X5O2_9M^u;[_";
      Table table0 = new Table(formElement0, "5!X5O2_9M^u;[_");
      // Undeclared exception!
      try { 
        textInput0.entity("_wrapper");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      String string0 = "";
      Submit submit0 = new Submit(text0, "", "");
      String string1 = "Ja8c{zSYBi";
      FormElement formElement0 = submit0.value("Ja8c{zSYBi");
      Table table0 = new Table(formElement0, "");
      Table table1 = table0.renderHint("Ja8c{zSYBi");
      TableBlock tableBlock0 = table1.thead();
      Component component0 = tableBlock0.sub();
      ElExpression elExpression0 = new ElExpression("");
      elExpression0.eval("", component0);
      String string2 = "";
      ElExpression elExpression1 = elExpression0.errorMessage("");
      // Undeclared exception!
      try { 
        submit0.s((Object) elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      ElExpression elExpression0 = new ElExpression("");
      assertNotNull(elExpression0);
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      
      ElExpression elExpression1 = elExpression0.errorMessage("s");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNotNull(elExpression1);
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression1.toString());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.getExpression());
      
      RadioGroup radioGroup0 = new RadioGroup((Component) null, "HJ\"]!5gs,iph2X?[6", "s", stringSelectModel0, elExpression1);
      assertNotNull(radioGroup0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression1.toString());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.getExpression());
      assertTrue(radioGroup0.isValid());
      assertFalse(radioGroup0._isBuilt());
      assertFalse(radioGroup0._isGeneratedId());
      assertEquals("s", radioGroup0.getComponentId());
      assertEquals("input", radioGroup0.defaultTagName());
      assertTrue(radioGroup0.isEmpty());
      assertEquals("HJ\"]!5gs,iph2X?[6", radioGroup0.getFormElementName());
      
      // Undeclared exception!
      try { 
        radioGroup0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      
      String string0 = "Could not find component with id '";
      Any any0 = (Any)errorPage0.param("Could not find component with id '", "Could not find component with id '");
      assertNotNull(any0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      
      // Undeclared exception!
      try { 
        any0.h2();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      
      // Undeclared exception!
      try { 
        errorPage0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "xS|%";
      Form form0 = new Form("xS|%");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("xS|%", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        form0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "F_$n(.", "org.apache.commons.io.filefilter.SizeFileFilter");
      assertNotNull(textInput0);
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression(" (near code: << ... ");
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertEquals(20, actionExpression0.length());
      
      ActionExpression actionExpression1 = actionExpression0.submissible(true);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(actionExpression1);
      assertNull(actionExpression0.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(20, actionExpression0.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression1.getExpression());
      assertEquals(20, actionExpression1.length());
      assertEquals(" (near code: << ... ", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      
      ActionExpression actionExpression2 = actionExpression1.javascript(" (near code: << ... ");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertNotNull(actionExpression2);
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(20, actionExpression0.length());
      assertEquals(" (near code: << ... ", actionExpression0.getJavascript());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression1.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression1.getExpression());
      assertEquals(20, actionExpression1.length());
      assertEquals(" (near code: << ... ", actionExpression1.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertEquals(20, actionExpression2.length());
      assertEquals(" (near code: << ... ", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression2.toString());
      
      ActionExpression actionExpression3 = actionExpression2.submitForm(true);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertNotNull(actionExpression3);
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(20, actionExpression0.length());
      assertEquals(" (near code: << ... ", actionExpression0.getJavascript());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression1.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression1.getExpression());
      assertEquals(20, actionExpression1.length());
      assertEquals(" (near code: << ... ", actionExpression1.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertEquals(20, actionExpression2.length());
      assertEquals(" (near code: << ... ", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression2.toString());
      assertEquals(" (near code: << ... ", actionExpression3.getExpression());
      assertEquals(" (near code: << ... ", actionExpression3.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression3.getActionExpression());
      assertTrue(actionExpression3.isSubmissible());
      assertNull(actionExpression3.getEvent());
      assertEquals(20, actionExpression3.length());
      assertEquals(" (near code: << ... ", actionExpression3.toString());
      assertTrue(actionExpression3.isSubmitForm());
      assertFalse(actionExpression3.isExternalUrl());
      
      ActionExpression actionExpression4 = actionExpression3.event("KMa`/AjZPHJWp|");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression4);
      assertSame(actionExpression4, actionExpression0);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression3);
      assertSame(actionExpression4, actionExpression1);
      assertNotNull(actionExpression4);
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("KMa`/AjZPHJWp|", actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(20, actionExpression0.length());
      assertEquals(" (near code: << ... ", actionExpression0.getJavascript());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression1.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression1.getActionExpression());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression1.getExpression());
      assertEquals(20, actionExpression1.length());
      assertEquals(" (near code: << ... ", actionExpression1.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("KMa`/AjZPHJWp|", actionExpression1.getEvent());
      assertEquals(" (near code: << ... ", actionExpression2.getExpression());
      assertEquals("KMa`/AjZPHJWp|", actionExpression2.getEvent());
      assertEquals(20, actionExpression2.length());
      assertEquals(" (near code: << ... ", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression2.toString());
      assertEquals(" (near code: << ... ", actionExpression3.getExpression());
      assertEquals(" (near code: << ... ", actionExpression3.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression3.getActionExpression());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(20, actionExpression3.length());
      assertEquals("KMa`/AjZPHJWp|", actionExpression3.getEvent());
      assertEquals(" (near code: << ... ", actionExpression3.toString());
      assertTrue(actionExpression3.isSubmitForm());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression4.getExpression());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals(20, actionExpression4.length());
      assertEquals(" (near code: << ... ", actionExpression4.getJavascript());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression4.toString());
      assertTrue(actionExpression4.isSubmitForm());
      assertEquals("KMa`/AjZPHJWp|", actionExpression4.getEvent());
      assertEquals(" (near code: << ... ", actionExpression4.getActionExpression());
      
      TextInput textInput1 = (TextInput)textInput0.actionBinding(actionExpression4);
      assertSame(textInput0, textInput1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression4);
      assertSame(actionExpression4, actionExpression0);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression3);
      assertSame(actionExpression4, actionExpression1);
      assertSame(textInput1, textInput0);
      assertNotNull(textInput1);
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression0.getSourceId());
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("KMa`/AjZPHJWp|", actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(20, actionExpression0.length());
      assertEquals(" (near code: << ... ", actionExpression0.getJavascript());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression1.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression1.getActionExpression());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression1.getSourceId());
      assertEquals(" (near code: << ... ", actionExpression1.getExpression());
      assertEquals(20, actionExpression1.length());
      assertEquals(" (near code: << ... ", actionExpression1.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("KMa`/AjZPHJWp|", actionExpression1.getEvent());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression2.getSourceId());
      assertEquals(" (near code: << ... ", actionExpression2.getExpression());
      assertEquals("KMa`/AjZPHJWp|", actionExpression2.getEvent());
      assertEquals(20, actionExpression2.length());
      assertEquals(" (near code: << ... ", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression2.toString());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression3.getSourceId());
      assertEquals(" (near code: << ... ", actionExpression3.getExpression());
      assertEquals(" (near code: << ... ", actionExpression3.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression3.getActionExpression());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(20, actionExpression3.length());
      assertEquals("KMa`/AjZPHJWp|", actionExpression3.getEvent());
      assertEquals(" (near code: << ... ", actionExpression3.toString());
      assertTrue(actionExpression3.isSubmitForm());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression4.getSourceId());
      assertEquals(" (near code: << ... ", actionExpression4.getExpression());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals(20, actionExpression4.length());
      assertEquals(" (near code: << ... ", actionExpression4.getJavascript());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression4.toString());
      assertTrue(actionExpression4.isSubmitForm());
      assertEquals("KMa`/AjZPHJWp|", actionExpression4.getEvent());
      assertEquals(" (near code: << ... ", actionExpression4.getActionExpression());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput1.getComponentId());
      assertEquals("input", textInput1.defaultTagName());
      assertFalse(textInput1._isGeneratedId());
      assertTrue(textInput1.isEmpty());
      assertTrue(textInput1.isValid());
      assertEquals("F_$n(.", textInput1.getFormElementName());
      
      List<RenderableComponent> list0 = textInput0._getRenderableChildren();
      assertSame(textInput0, textInput1);
      assertNotNull(list0);
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      
      Any any0 = new Any(errorPage0, (CharSequence) null);
      assertNotNull(any0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      
      String string0 = "";
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertNotNull(dynamicSelectModel1);
      
      Text text0 = new Text(any0, "");
      assertNotNull(text0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(text0._isGeneratedId());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertNull(text0.defaultTagName());
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      Table table0 = new Table(errorPage0, "");
      assertNotNull(table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      
      Any any1 = (Any)table1.base("");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(any1, any0);
      assertFalse(any1.equals((Object)any0));
      assertNotNull(any1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("Any_2", any1.getComponentId());
      assertTrue(any1._isGeneratedId());
      assertNull(any1.defaultTagName());
      
      String string1 = "3(s7hV9_SH*";
      String string2 = "9gJr,";
      // Undeclared exception!
      try { 
        any0.reset("9gJr,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "F_$n(.";
      TextInput textInput0 = new TextInput((Component) null, "F_$n(.", "org.apache.commons.io.filefilter.SizeFileFilter");
      assertNotNull(textInput0);
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        textInput0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Component component0 = null;
      String string0 = "F_$n(.";
      String string1 = "org.apache.commons.io.filefilter.SizeFileFilter";
      TextInput textInput0 = new TextInput((Component) null, "F_$n(.", "org.apache.commons.io.filefilter.SizeFileFilter");
      assertNotNull(textInput0);
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        textInput0.u((Object) "F_$n(.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a%n?DXOXx;KxYH=");
      assertNotNull(xmlEntityRef0);
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      ElExpression elExpression0 = new ElExpression("ul");
      assertNotNull(elExpression0);
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      assertEquals(2, elExpression0.length());
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(xmlEntityRef0, "F#*1tL=H-SySuM{g/B", "_;ytp[8-WNJ1NZSN", stringSelectModel0, elExpression0);
      assertNotNull(checkboxGroup0);
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      assertEquals(2, elExpression0.length());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertFalse(checkboxGroup0._isBuilt());
      
      Checkbox checkbox0 = new Checkbox(checkboxGroup0, "_;ytp[8-WNJ1NZSN", "F#*1tL=H-SySuM{g/B");
      assertNotNull(checkbox0);
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      assertEquals(2, elExpression0.length());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertFalse(checkboxGroup0._isBuilt());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("F#*1tL=H-SySuM{g/B", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      
      FormElement formElement0 = checkbox0.validationRule("_;ytp[8-WNJ1NZSN");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      assertEquals(2, elExpression0.length());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertFalse(checkboxGroup0._isBuilt());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("F#*1tL=H-SySuM{g/B", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("F#*1tL=H-SySuM{g/B", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", formElement0.getFormElementName());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "a%n?DXOXx;KxYH=";
      stringArray0[1] = "%Zq?";
      stringArray0[2] = "F#*1tL=H-SySuM{g/B";
      stringArray0[3] = "5(O7!cy,+ 6?@";
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      // Undeclared exception!
      try { 
        checkbox0.strike((Object) "F#*1tL=H-SySuM{g/B");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.components.XmlEntityRef cannot be cast to wheel.components.StandaloneComponent
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      
      Any any0 = (Any)errorPage0.hr();
      assertNotNull(any0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      
      Any any1 = new Any(errorPage0, (CharSequence) null);
      assertFalse(any1.equals((Object)any0));
      assertNotNull(any1);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Any_2", any1.getComponentId());
      assertTrue(any1._isGeneratedId());
      assertNull(any1.defaultTagName());
      
      // Undeclared exception!
      try { 
        any1.button();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      
      Block block0 = (Block)errorPage0.pre();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      
      ActionExpression actionExpression0 = new ActionExpression("_(1cJ\"Mak,2B74S2");
      assertNotNull(actionExpression0);
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals(16, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      
      Form form0 = new Form(block0, "_(1cJ\"Mak,2B74S2", actionExpression0);
      assertNotNull(form0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals(16, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertFalse(form0._isBuilt());
      
      Form form1 = form0.addFormValidationRule("", "");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNotNull(form1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals(16, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form1.getComponentId());
      
      Form form2 = form1.addFormValidationError("");
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertNotNull(form2);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals(16, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form1.getComponentId());
      assertFalse(form2._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", form2.getComponentId());
      assertFalse(form2._isBuilt());
      
      Form form3 = form2.id("[");
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form0, form1);
      assertSame(form1, form2);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form2, form3);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertSame(form3, form2);
      assertSame(form3, form1);
      assertSame(form3, form0);
      assertNotNull(form3);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals(16, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("[", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("[", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertEquals("[", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertFalse(form3._isBuilt());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isGeneratedId());
      assertEquals("[", form3.getComponentId());
      
      ElExpression elExpression0 = new ElExpression("iframe");
      assertNotNull(elExpression0);
      assertEquals("iframe", elExpression0.getExpression());
      assertEquals("iframe", elExpression0.toString());
      assertEquals(6, elExpression0.length());
      
      Table table0 = new Table(form2, "legend");
      assertNotNull(table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals(16, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("[", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("[", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertEquals("[", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("legend", table0.getComponentId());
      
      Table table1 = table0.renderHint("_(1cJ\"Mak,2B74S2");
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form0, form1);
      assertSame(form1, form2);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form2, form3);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals(16, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("[", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("[", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertEquals("[", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("legend", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("legend", table1.getComponentId());
      
      Table table2 = table1.renderHint("[");
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form0, form1);
      assertSame(form1, form2);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form2, form3);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotNull(table2);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals(16, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("[", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("[", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertEquals("[", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("legend", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("legend", table1.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("legend", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = " on the page.";
      TableBlock tableBlock0 = new TableBlock(errorPage0, " on the page.");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      
      Any any0 = tableBlock0.col();
      assertNotNull(any0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      
      Text text0 = new Text(tableBlock0, errorPage0);
      assertNotNull(text0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertFalse(text0.isCdata());
      assertFalse(text0.isHtml());
      assertNull(text0.defaultTagName());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(text0._isGeneratedId());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Any any1 = (Any)any0.clasS(stringBuilder0);
      assertSame(any0, any1);
      assertSame(any1, any0);
      assertNotNull(any1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("", stringBuilder0.toString());
      assertTrue(any1._isGeneratedId());
      assertEquals("Any_1", any1.getComponentId());
      assertNull(any1.defaultTagName());
      
      // Undeclared exception!
      try { 
        any0.dateFormat(" on the page.", text0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern ' on the page.'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      Block block0 = (Block)errorPage0.pre();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("_(1cJ\"Mak,2B74S2");
      assertNotNull(actionExpression0);
      assertEquals(16, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "_(1cJ\"Mak,2B74S2", "_(1cJ\"Mak,2B74S2");
      assertNotNull(checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      
      Checkbox checkbox1 = (Checkbox)checkbox0.fieldBinding(">SmgbLCm.B|%fKq");
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertNotNull(checkbox1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getComponentId());
      
      Form form0 = new Form(checkbox1, "}wn$^2-?&e8Ojv", actionExpression0);
      assertNotNull(form0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(16, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("}wn$^2-?&e8Ojv", form0.getComponentId());
      
      Form form1 = form0.addFormValidationRule("", "java.lang.StringBuilder@0000000008");
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNotNull(form1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(16, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("}wn$^2-?&e8Ojv", form0.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("}wn$^2-?&e8Ojv", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      
      Form form2 = form0.addFormValidationError("mte^0.QXb{:H_i");
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form2, form0);
      assertSame(form2, form1);
      assertNotNull(form2);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(16, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("}wn$^2-?&e8Ojv", form0.getComponentId());
      assertFalse(form2._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertEquals("}wn$^2-?&e8Ojv", form2.getComponentId());
      assertFalse(form2._isBuilt());
      
      Form form3 = form0.id("");
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form3, form0);
      assertSame(form3, form2);
      assertSame(form3, form1);
      assertNotNull(form3);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(16, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("", form0.getComponentId());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isGeneratedId());
      assertFalse(form3._isBuilt());
      assertEquals("", form3.getComponentId());
      
      TextInput textInput0 = new TextInput(form3, "", "|xAbu");
      assertNotNull(textInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(16, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("", form0.getComponentId());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isGeneratedId());
      assertFalse(form3._isBuilt());
      assertEquals("", form3.getComponentId());
      assertTrue(textInput0.isValid());
      assertEquals("", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertEquals("|xAbu", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      
      Form form4 = form0.addFormElement(checkbox0);
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form0, form4);
      assertSame(form4, form0);
      assertSame(form4, form3);
      assertSame(form4, form2);
      assertSame(form4, form1);
      assertNotNull(form4);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(16, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox1.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("", form0.getComponentId());
      assertEquals("form", form4.defaultTagName());
      assertFalse(form4._isGeneratedId());
      assertFalse(form4._isBuilt());
      assertEquals("", form4.getComponentId());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.SizeFileFilter";
      TextInput textInput0 = new TextInput((Component) null, "F_$n(.", "org.apache.commons.io.filefilter.SizeFileFilter");
      assertNotNull(textInput0);
      assertFalse(textInput0._isGeneratedId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      
      String string1 = "5(O7!cy,+ 6?@";
      textInput0._renderClassReferenceFromHints((XmlSerializer) null);
      assertFalse(textInput0._isGeneratedId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.io.filefilter.SizeFileFilter";
      // Undeclared exception!
      try { 
        textInput0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a%n?DXOXx;KxYH=");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      ElExpression elExpression0 = new ElExpression("ul");
      assertNotNull(elExpression0);
      assertEquals(2, elExpression0.length());
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(xmlEntityRef0, "F#*1tL=H-SySuM{g/B", "_;ytp[8-WNJ1NZSN", stringSelectModel0, elExpression0);
      assertNotNull(checkboxGroup0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals(2, elExpression0.length());
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertFalse(checkboxGroup0._isBuilt());
      
      Checkbox checkbox0 = new Checkbox(checkboxGroup0, "_;ytp[8-WNJ1NZSN", "F#*1tL=H-SySuM{g/B");
      assertNotNull(checkbox0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals(2, elExpression0.length());
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkbox0.getComponentId());
      
      FormElement formElement0 = checkbox0.validationRule("_;ytp[8-WNJ1NZSN");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals(2, elExpression0.length());
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkbox0.getComponentId());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("_;ytp[8-WNJ1NZSN", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("F#*1tL=H-SySuM{g/B", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "a%n?DXOXx;KxYH=";
      stringArray0[1] = "%Zq?";
      stringArray0[2] = "F#*1tL=H-SySuM{g/B";
      TextInput textInput0 = new TextInput(formElement0, "}", "s-J");
      assertNotNull(textInput0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals(2, elExpression0.length());
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkbox0.getComponentId());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("_;ytp[8-WNJ1NZSN", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("F#*1tL=H-SySuM{g/B", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("s-J", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("}", textInput0.getFormElementName());
      
      List<RenderableComponent> list0 = textInput0._getRenderableChildren();
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(list0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals(2, elExpression0.length());
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkbox0.getComponentId());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("_;ytp[8-WNJ1NZSN", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("F#*1tL=H-SySuM{g/B", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("s-J", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("}", textInput0.getFormElementName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        formElement0.checkboxGroup("}", stringSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Block block0 = (Block)errorPage0.pre();
      assertNotNull(block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("_(1cJ\"Mak,2B74S2");
      assertNotNull(actionExpression0);
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      
      Form form0 = new Form(block0, "_(1cJ\"Mak,2B74S2", actionExpression0);
      assertNotNull(form0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(form0._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      
      String string0 = "";
      Form form1 = form0.addFormValidationRule("", "");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNotNull(form1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(form0._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      
      String string1 = "";
      Form form2 = form1.addFormValidationError("");
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form2, form0);
      assertSame(form2, form1);
      assertNotNull(form2);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(form0._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form2.getComponentId());
      
      Form form3 = form2.id("[");
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form0, form3);
      assertSame(form1, form2);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form2, form0);
      assertSame(form2, form1);
      assertSame(form2, form3);
      assertSame(form3, form2);
      assertSame(form3, form1);
      assertSame(form3, form0);
      assertNotNull(form3);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("[", form0.getComponentId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("[", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("[", form2.getComponentId());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertFalse(form3._isBuilt());
      assertEquals("form", form3.defaultTagName());
      assertEquals("[", form3.getComponentId());
      assertFalse(form3._isGeneratedId());
      
      TextInput textInput0 = new TextInput(form2, "*>Q:<bjJqZdRKK[[}7", "");
      assertNotNull(textInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("[", form0.getComponentId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("[", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("[", form2.getComponentId());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertEquals("*>Q:<bjJqZdRKK[[}7", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      
      Form form4 = form3.addFormElement(textInput0);
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form0, form3);
      assertSame(form0, form4);
      assertSame(form1, form2);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form1, form4);
      assertSame(form2, form0);
      assertSame(form2, form1);
      assertSame(form2, form3);
      assertSame(form2, form4);
      assertSame(form3, form2);
      assertSame(form3, form1);
      assertSame(form3, form0);
      assertSame(form3, form4);
      assertSame(form4, form1);
      assertSame(form4, form2);
      assertSame(form4, form0);
      assertSame(form4, form3);
      assertNotNull(form4);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("[", form0.getComponentId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("[", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("[", form2.getComponentId());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertFalse(form3._isBuilt());
      assertEquals("form", form3.defaultTagName());
      assertEquals("[", form3.getComponentId());
      assertFalse(form3._isGeneratedId());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertEquals("*>Q:<bjJqZdRKK[[}7", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(form4._isGeneratedId());
      assertFalse(form4._isBuilt());
      assertEquals("[", form4.getComponentId());
      assertEquals("form", form4.defaultTagName());
      
      Checkbox checkbox0 = new Checkbox(form0, "[", "_(1cJ\"Mak,2B74S2");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("[", form0.getComponentId());
      assertEquals("_(1cJ\"Mak,2B74S2", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("[", checkbox0.getFormElementName());
      
      // Undeclared exception!
      try { 
        checkbox0.isInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "F_$n(.";
      String string1 = "org.apache.commons.io.filefilter.SizeFileFilter";
      TextInput textInput0 = new TextInput((Component) null, "F_$n(.", "org.apache.commons.io.filefilter.SizeFileFilter");
      assertNotNull(textInput0);
      assertTrue(textInput0.isValid());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      
      String string2 = " (near code: << ... ";
      ActionExpression actionExpression0 = new ActionExpression(" (near code: << ... ");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(20, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      
      ActionExpression actionExpression1 = actionExpression0.submissible(true);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(actionExpression1);
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(20, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(20, actionExpression1.length());
      assertEquals(" (near code: << ... ", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getEvent());
      assertNull(actionExpression1.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression1.getExpression());
      assertEquals(" (near code: << ... ", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      
      ActionExpression actionExpression2 = actionExpression1.javascript(" (near code: << ... ");
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertNotNull(actionExpression2);
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(20, actionExpression0.length());
      assertEquals(" (near code: << ... ", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(20, actionExpression1.length());
      assertEquals(" (near code: << ... ", actionExpression1.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals(" (near code: << ... ", actionExpression1.getExpression());
      assertEquals(" (near code: << ... ", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression2.toString());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertEquals(20, actionExpression2.length());
      assertEquals(" (near code: << ... ", actionExpression2.getJavascript());
      
      ActionExpression actionExpression3 = actionExpression2.submitForm(true);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertNotNull(actionExpression3);
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(20, actionExpression0.length());
      assertEquals(" (near code: << ... ", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(20, actionExpression1.length());
      assertEquals(" (near code: << ... ", actionExpression1.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals(" (near code: << ... ", actionExpression1.getExpression());
      assertEquals(" (near code: << ... ", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression2.toString());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertEquals(20, actionExpression2.length());
      assertEquals(" (near code: << ... ", actionExpression2.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression3.toString());
      assertNull(actionExpression3.getEvent());
      assertEquals(" (near code: << ... ", actionExpression3.getExpression());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(20, actionExpression3.length());
      assertEquals(" (near code: << ... ", actionExpression3.getJavascript());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression3.getActionExpression());
      assertFalse(actionExpression3.isExternalUrl());
      
      String string3 = "KMa`/AjZPHJWp|";
      ActionExpression actionExpression4 = actionExpression3.event("KMa`/AjZPHJWp|");
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression4);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression4, actionExpression3);
      assertSame(actionExpression4, actionExpression0);
      assertSame(actionExpression4, actionExpression1);
      assertSame(actionExpression4, actionExpression2);
      assertNotNull(actionExpression4);
      assertEquals(" (near code: << ... ", actionExpression0.toString());
      assertEquals(" (near code: << ... ", actionExpression0.getExpression());
      assertEquals("KMa`/AjZPHJWp|", actionExpression0.getEvent());
      assertEquals(" (near code: << ... ", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(20, actionExpression0.length());
      assertEquals(" (near code: << ... ", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(20, actionExpression1.length());
      assertEquals(" (near code: << ... ", actionExpression1.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression1.getActionExpression());
      assertEquals(" (near code: << ... ", actionExpression1.getExpression());
      assertEquals("KMa`/AjZPHJWp|", actionExpression1.getEvent());
      assertEquals(" (near code: << ... ", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("KMa`/AjZPHJWp|", actionExpression2.getEvent());
      assertEquals(" (near code: << ... ", actionExpression2.toString());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression2.getExpression());
      assertEquals(20, actionExpression2.length());
      assertEquals(" (near code: << ... ", actionExpression2.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression3.toString());
      assertEquals("KMa`/AjZPHJWp|", actionExpression3.getEvent());
      assertEquals(" (near code: << ... ", actionExpression3.getExpression());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(20, actionExpression3.length());
      assertEquals(" (near code: << ... ", actionExpression3.getJavascript());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals(" (near code: << ... ", actionExpression3.getActionExpression());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals(20, actionExpression4.length());
      assertEquals(" (near code: << ... ", actionExpression4.toString());
      assertEquals("KMa`/AjZPHJWp|", actionExpression4.getEvent());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals(" (near code: << ... ", actionExpression4.getExpression());
      assertTrue(actionExpression4.isSubmitForm());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals(" (near code: << ... ", actionExpression4.getJavascript());
      assertEquals(" (near code: << ... ", actionExpression4.getActionExpression());
      
      TextInput textInput1 = new TextInput(textInput0, " (near code: << ... ", "org.apache.commons.io.filefilter.SizeFileFilter");
      assertTrue(textInput1.equals((Object)textInput0));
      assertNotNull(textInput1);
      assertTrue(textInput0.isValid());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertTrue(textInput1.isValid());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput1.getComponentId());
      assertEquals(" (near code: << ... ", textInput1.getFormElementName());
      assertEquals("input", textInput1.defaultTagName());
      assertFalse(textInput1._isGeneratedId());
      assertTrue(textInput1.isEmpty());
      
      Form form0 = new Form("F_$n(.");
      assertNotNull(form0);
      assertEquals("F_$n(.", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      String[] stringArray0 = new String[7];
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      // Undeclared exception!
      try { 
        form0.multiSelect("KMa`/AjZPHJWp|", stringSelectModel0, actionExpression2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "a%n?DXOXx;KxYH=";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a%n?DXOXx;KxYH=");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      String string1 = "F\\#*1tL=H-SySuM{g/B";
      String string2 = "_;ytp[8-WNJ1NZSN";
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      ElExpression elExpression0 = new ElExpression("ul");
      assertNotNull(elExpression0);
      assertEquals(2, elExpression0.length());
      assertEquals("ul", elExpression0.toString());
      assertEquals("ul", elExpression0.getExpression());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre((Object) elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7575707051255156
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      
      Block block0 = (Block)errorPage0.pre();
      assertNotNull(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("_(1cJ\"Mak,2B74S2");
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      
      Form form0 = new Form(block0, "_(1cJ\"Mak,2B74S2", actionExpression0);
      assertNotNull(form0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      String string0 = "oM@A)5/mI?~r";
      Checkbox checkbox0 = new Checkbox(form0, "oM@A)5/mI?~r", "");
      assertNotNull(checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("oM@A)5/mI?~r", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      
      String string1 = ",Lf,vDduXU";
      String string2 = null;
      ElExpression elExpression0 = new ElExpression((String) null);
      assertNotNull(elExpression0);
      assertNull(elExpression0.toString());
      assertNull(elExpression0.getExpression());
      
      ElExpression elExpression1 = elExpression0.errorMessage((String) null);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNotNull(elExpression1);
      assertNull(elExpression0.toString());
      assertNull(elExpression0.getExpression());
      assertNull(elExpression1.getExpression());
      assertNull(elExpression1.toString());
      
      // Undeclared exception!
      try { 
        checkbox0.fileInput(",Lf,vDduXU", elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = " on the page.";
      TableBlock tableBlock0 = new TableBlock(errorPage0, " on the page.");
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      
      Text text0 = new Text(tableBlock0, errorPage0);
      assertNotNull(text0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      
      String string1 = "HK35L]js YM t\\H#";
      ActionExpression actionExpression0 = tableBlock0.action("HK35L]js YM tH#");
      assertNotNull(actionExpression0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals(15, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("HK35L]js YM tH#", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("HK35L]js YM tH#", actionExpression0.toString());
      assertEquals("HK35L]js YM tH#", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      
      // Undeclared exception!
      try { 
        errorPage0.find((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "acSZriW7[!4}p", "acSZriW7[!4}p");
      assertNotNull(textInput0);
      assertEquals("acSZriW7[!4}p", textInput0.getFormElementName());
      assertEquals("acSZriW7[!4}p", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        textInput0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!e#QWxZoA~9xHx");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!e#QWxZoA~9xHx", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      ElExpression elExpression0 = new ElExpression("!e#QWxZoA~9xHx");
      assertNotNull(elExpression0);
      assertEquals("!e#QWxZoA~9xHx", elExpression0.getExpression());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.toString());
      assertEquals(14, elExpression0.length());
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(xmlEntityRef0, "script", "F#*1tL=H-SySuM{g/B", stringSelectModel0, elExpression0);
      assertNotNull(checkboxGroup0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!e#QWxZoA~9xHx", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.getExpression());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.toString());
      assertEquals(14, elExpression0.length());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertEquals("script", checkboxGroup0.getFormElementName());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isValid());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getComponentId());
      
      Checkbox checkbox0 = new Checkbox(checkboxGroup0, "h67(e", "Uw~>^n{Y#Pehtd");
      assertNotNull(checkbox0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!e#QWxZoA~9xHx", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.getExpression());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.toString());
      assertEquals(14, elExpression0.length());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertEquals("script", checkboxGroup0.getFormElementName());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isValid());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("Uw~>^n{Y#Pehtd", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("h67(e", checkbox0.getFormElementName());
      
      Checkbox checkbox1 = new Checkbox(checkbox0, "@/h-8+[xqh", "F#*1tL=H-SySuM{g/B");
      assertFalse(checkbox1.equals((Object)checkbox0));
      assertNotNull(checkbox1);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!e#QWxZoA~9xHx", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.getExpression());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.toString());
      assertEquals(14, elExpression0.length());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertEquals("script", checkboxGroup0.getFormElementName());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isValid());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("Uw~>^n{Y#Pehtd", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("h67(e", checkbox0.getFormElementName());
      assertTrue(checkbox1.isValid());
      assertEquals("@/h-8+[xqh", checkbox1.getFormElementName());
      assertTrue(checkbox1.isEmpty());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertEquals("F#*1tL=H-SySuM{g/B", checkbox1.getComponentId());
      
      FormElement formElement0 = checkbox1.validationRule("script");
      assertNotSame(checkbox0, formElement0);
      assertNotSame(checkbox0, checkbox1);
      assertSame(checkbox1, formElement0);
      assertNotSame(checkbox1, checkbox0);
      assertNotSame(formElement0, checkbox0);
      assertSame(formElement0, checkbox1);
      assertFalse(checkbox0.equals((Object)checkbox1));
      assertFalse(checkbox1.equals((Object)checkbox0));
      assertFalse(formElement0.equals((Object)checkbox0));
      assertNotNull(formElement0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!e#QWxZoA~9xHx", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.getExpression());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.toString());
      assertEquals(14, elExpression0.length());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertEquals("script", checkboxGroup0.getFormElementName());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isValid());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("Uw~>^n{Y#Pehtd", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("h67(e", checkbox0.getFormElementName());
      assertTrue(checkbox1.isValid());
      assertEquals("@/h-8+[xqh", checkbox1.getFormElementName());
      assertTrue(checkbox1.isEmpty());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertEquals("F#*1tL=H-SySuM{g/B", checkbox1.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("F#*1tL=H-SySuM{g/B", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("@/h-8+[xqh", formElement0.getFormElementName());
      
      String[] stringArray0 = new String[0];
      Checkbox checkbox2 = (Checkbox)checkbox0.attributes(stringArray0);
      assertNotSame(checkbox0, formElement0);
      assertNotSame(checkbox0, checkbox1);
      assertSame(checkbox0, checkbox2);
      assertNotSame(checkbox2, checkbox1);
      assertSame(checkbox2, checkbox0);
      assertNotSame(checkbox2, formElement0);
      assertFalse(checkbox0.equals((Object)formElement0));
      assertFalse(checkbox0.equals((Object)checkbox1));
      assertFalse(checkbox2.equals((Object)checkbox1));
      assertFalse(checkbox2.equals((Object)formElement0));
      assertEquals(0, stringArray0.length);
      assertNotNull(checkbox2);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!e#QWxZoA~9xHx", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.getExpression());
      assertEquals("!e#QWxZoA~9xHx", elExpression0.toString());
      assertEquals(14, elExpression0.length());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertEquals("script", checkboxGroup0.getFormElementName());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isValid());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("Uw~>^n{Y#Pehtd", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("h67(e", checkbox0.getFormElementName());
      assertTrue(checkbox2.isEmpty());
      assertEquals("input", checkbox2.defaultTagName());
      assertEquals("h67(e", checkbox2.getFormElementName());
      assertEquals("Uw~>^n{Y#Pehtd", checkbox2.getComponentId());
      assertFalse(checkbox2._isGeneratedId());
      assertTrue(checkbox2.isValid());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = " on the page.";
      TableBlock tableBlock0 = new TableBlock(errorPage0, " on the page.");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      
      Text text0 = new Text(tableBlock0, errorPage0);
      assertNotNull(text0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      
      String string1 = "HK35L]js YM t\\H#";
      // Undeclared exception!
      try { 
        text0.blockquote();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1500602244842355
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "F_$n(.", "org.apache.commons.io.filefilter.SizeFileFilter");
      assertNotNull(textInput0);
      assertTrue(textInput0.isValid());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      
      ActionExpression actionExpression0 = new ActionExpression("F_$n(.");
      assertNotNull(actionExpression0);
      assertEquals(6, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("F_$n(.", actionExpression0.getActionExpression());
      assertEquals("F_$n(.", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("F_$n(.", actionExpression0.toString());
      
      ActionExpression actionExpression1 = actionExpression0.submissible(true);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(actionExpression1);
      assertEquals(6, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("F_$n(.", actionExpression0.getActionExpression());
      assertEquals("F_$n(.", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("F_$n(.", actionExpression0.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals(6, actionExpression1.length());
      assertEquals("F_$n(.", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals("F_$n(.", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("F_$n(.", actionExpression1.toString());
      
      ActionExpression actionExpression2 = actionExpression1.javascript("org.apache.commons.io.filefilter.SizeFileFilter");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertNotNull(actionExpression2);
      assertEquals(6, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("F_$n(.", actionExpression0.getActionExpression());
      assertEquals("F_$n(.", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("F_$n(.", actionExpression0.toString());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression1.getJavascript());
      assertEquals(6, actionExpression1.length());
      assertEquals("F_$n(.", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals("F_$n(.", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("F_$n(.", actionExpression1.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("F_$n(.", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("F_$n(.", actionExpression2.toString());
      assertEquals(6, actionExpression2.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression2.getJavascript());
      assertEquals("F_$n(.", actionExpression2.getExpression());
      
      ActionExpression actionExpression3 = actionExpression2.submitForm(true);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertNotNull(actionExpression3);
      assertEquals(6, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("F_$n(.", actionExpression0.getActionExpression());
      assertEquals("F_$n(.", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("F_$n(.", actionExpression0.toString());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression1.getJavascript());
      assertEquals(6, actionExpression1.length());
      assertEquals("F_$n(.", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals("F_$n(.", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("F_$n(.", actionExpression1.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("F_$n(.", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("F_$n(.", actionExpression2.toString());
      assertEquals(6, actionExpression2.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression2.getJavascript());
      assertEquals("F_$n(.", actionExpression2.getExpression());
      assertEquals("F_$n(.", actionExpression3.getActionExpression());
      assertTrue(actionExpression3.isSubmitForm());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("F_$n(.", actionExpression3.toString());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(6, actionExpression3.length());
      assertNull(actionExpression3.getEvent());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression3.getJavascript());
      assertEquals("F_$n(.", actionExpression3.getExpression());
      
      ActionExpression actionExpression4 = actionExpression3.event("KMa`/AjZPHJWp|");
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression4);
      assertSame(actionExpression4, actionExpression0);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression3);
      assertSame(actionExpression4, actionExpression1);
      assertNotNull(actionExpression4);
      assertEquals("KMa`/AjZPHJWp|", actionExpression0.getEvent());
      assertEquals(6, actionExpression0.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("F_$n(.", actionExpression0.getActionExpression());
      assertEquals("F_$n(.", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("F_$n(.", actionExpression0.toString());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression1.getJavascript());
      assertEquals(6, actionExpression1.length());
      assertEquals("F_$n(.", actionExpression1.getExpression());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals("F_$n(.", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("KMa`/AjZPHJWp|", actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("F_$n(.", actionExpression1.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("F_$n(.", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("KMa`/AjZPHJWp|", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("F_$n(.", actionExpression2.toString());
      assertEquals(6, actionExpression2.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression2.getJavascript());
      assertEquals("F_$n(.", actionExpression2.getExpression());
      assertEquals("KMa`/AjZPHJWp|", actionExpression3.getEvent());
      assertEquals("F_$n(.", actionExpression3.getActionExpression());
      assertTrue(actionExpression3.isSubmitForm());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("F_$n(.", actionExpression3.toString());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(6, actionExpression3.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression3.getJavascript());
      assertEquals("F_$n(.", actionExpression3.getExpression());
      assertEquals("F_$n(.", actionExpression4.toString());
      assertEquals("F_$n(.", actionExpression4.getExpression());
      assertTrue(actionExpression4.isSubmitForm());
      assertEquals("KMa`/AjZPHJWp|", actionExpression4.getEvent());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals("F_$n(.", actionExpression4.getActionExpression());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals(6, actionExpression4.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression4.getJavascript());
      
      TextInput textInput1 = (TextInput)textInput0.actionBinding(actionExpression4);
      assertSame(textInput0, textInput1);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression4);
      assertSame(actionExpression4, actionExpression0);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression3);
      assertSame(actionExpression4, actionExpression1);
      assertSame(textInput1, textInput0);
      assertNotNull(textInput1);
      assertTrue(textInput0.isValid());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertEquals("KMa`/AjZPHJWp|", actionExpression0.getEvent());
      assertEquals(6, actionExpression0.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("F_$n(.", actionExpression0.getActionExpression());
      assertEquals("F_$n(.", actionExpression0.getExpression());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression0.getSourceId());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("F_$n(.", actionExpression0.toString());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression1.getSourceId());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression1.getJavascript());
      assertEquals(6, actionExpression1.length());
      assertEquals("F_$n(.", actionExpression1.getExpression());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals("F_$n(.", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("KMa`/AjZPHJWp|", actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("F_$n(.", actionExpression1.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("F_$n(.", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("KMa`/AjZPHJWp|", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("F_$n(.", actionExpression2.toString());
      assertEquals(6, actionExpression2.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression2.getJavascript());
      assertEquals("F_$n(.", actionExpression2.getExpression());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression2.getSourceId());
      assertEquals("KMa`/AjZPHJWp|", actionExpression3.getEvent());
      assertEquals("F_$n(.", actionExpression3.getActionExpression());
      assertTrue(actionExpression3.isSubmitForm());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("F_$n(.", actionExpression3.toString());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression3.getSourceId());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(6, actionExpression3.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression3.getJavascript());
      assertEquals("F_$n(.", actionExpression3.getExpression());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression4.getSourceId());
      assertEquals("F_$n(.", actionExpression4.toString());
      assertEquals("F_$n(.", actionExpression4.getExpression());
      assertTrue(actionExpression4.isSubmitForm());
      assertEquals("KMa`/AjZPHJWp|", actionExpression4.getEvent());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals("F_$n(.", actionExpression4.getActionExpression());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals(6, actionExpression4.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression4.getJavascript());
      assertTrue(textInput1.isValid());
      assertTrue(textInput1.isEmpty());
      assertEquals("F_$n(.", textInput1.getFormElementName());
      assertEquals("input", textInput1.defaultTagName());
      assertFalse(textInput1._isGeneratedId());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput1.getComponentId());
      
      String string0 = null;
      Radio radio0 = new Radio(textInput1, (String) null, "()[Ljava/lang/reflect/Method;");
      assertNotNull(radio0);
      assertTrue(textInput0.isValid());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertEquals("KMa`/AjZPHJWp|", actionExpression0.getEvent());
      assertEquals(6, actionExpression0.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("F_$n(.", actionExpression0.getActionExpression());
      assertEquals("F_$n(.", actionExpression0.getExpression());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression0.getSourceId());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("F_$n(.", actionExpression0.toString());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression1.getSourceId());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression1.getJavascript());
      assertEquals(6, actionExpression1.length());
      assertEquals("F_$n(.", actionExpression1.getExpression());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals("F_$n(.", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("KMa`/AjZPHJWp|", actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("F_$n(.", actionExpression1.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("F_$n(.", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("KMa`/AjZPHJWp|", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("F_$n(.", actionExpression2.toString());
      assertEquals(6, actionExpression2.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression2.getJavascript());
      assertEquals("F_$n(.", actionExpression2.getExpression());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression2.getSourceId());
      assertEquals("KMa`/AjZPHJWp|", actionExpression3.getEvent());
      assertEquals("F_$n(.", actionExpression3.getActionExpression());
      assertTrue(actionExpression3.isSubmitForm());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("F_$n(.", actionExpression3.toString());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression3.getSourceId());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(6, actionExpression3.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression3.getJavascript());
      assertEquals("F_$n(.", actionExpression3.getExpression());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression4.getSourceId());
      assertEquals("F_$n(.", actionExpression4.toString());
      assertEquals("F_$n(.", actionExpression4.getExpression());
      assertTrue(actionExpression4.isSubmitForm());
      assertEquals("KMa`/AjZPHJWp|", actionExpression4.getEvent());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals("F_$n(.", actionExpression4.getActionExpression());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals(6, actionExpression4.length());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", actionExpression4.getJavascript());
      assertTrue(textInput1.isValid());
      assertTrue(textInput1.isEmpty());
      assertEquals("F_$n(.", textInput1.getFormElementName());
      assertEquals("input", textInput1.defaultTagName());
      assertFalse(textInput1._isGeneratedId());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput1.getComponentId());
      assertEquals("()[Ljava/lang/reflect/Method;", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertNull(radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      
      MXSerializer mXSerializer0 = new MXSerializer();
      assertNotNull(mXSerializer0);
      assertNull(mXSerializer0.getName());
      assertEquals(0, mXSerializer0.getDepth());
      assertNull(mXSerializer0.getNamespace());
      
      XmlSerializerDelegate xmlSerializerDelegate0 = new XmlSerializerDelegate(mXSerializer0);
      assertNotNull(xmlSerializerDelegate0);
      assertNull(mXSerializer0.getName());
      assertEquals(0, mXSerializer0.getDepth());
      assertNull(mXSerializer0.getNamespace());
      assertNull(xmlSerializerDelegate0.getNamespace());
      assertEquals(0, xmlSerializerDelegate0.getDepth());
      assertNull(xmlSerializerDelegate0.getName());
      
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance();
      assertNotNull(xmlPullParserFactory0);
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance(xmlPullParserFactory0);
      assertNotNull(xmlPullWrapperFactory0);
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper(xmlSerializerDelegate0, xmlPullWrapperFactory0);
      assertNotNull(staticXmlSerializerWrapper0);
      assertNull(mXSerializer0.getName());
      assertEquals(0, mXSerializer0.getDepth());
      assertNull(mXSerializer0.getNamespace());
      assertNull(xmlSerializerDelegate0.getNamespace());
      assertEquals(0, xmlSerializerDelegate0.getDepth());
      assertNull(xmlSerializerDelegate0.getName());
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertEquals(0, staticXmlSerializerWrapper0.getDepth());
      assertNull(staticXmlSerializerWrapper0.getName());
      assertNull(staticXmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertNull(staticXmlSerializerWrapper0.getNamespace());
      
      String string1 = null;
      String string2 = null;
      // Undeclared exception!
      try { 
        textInput0.h3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0467385326945515
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "a%n?DXOXx;KxYH=";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a%n?DXOXx;KxYH=");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      
      String string1 = "F\\#*1tL=H-SySuM{g/B";
      String string2 = "_;ytp[8-WNJ1NZSN";
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      ElExpression elExpression0 = new ElExpression("ul");
      assertNotNull(elExpression0);
      assertEquals("ul", elExpression0.toString());
      assertEquals(2, elExpression0.length());
      assertEquals("ul", elExpression0.getExpression());
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(xmlEntityRef0, "F#*1tL=H-SySuM{g/B", "_;ytp[8-WNJ1NZSN", stringSelectModel0, elExpression0);
      assertNotNull(checkboxGroup0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("ul", elExpression0.toString());
      assertEquals(2, elExpression0.length());
      assertEquals("ul", elExpression0.getExpression());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("input", checkboxGroup0.defaultTagName());
      
      // Undeclared exception!
      try { 
        checkboxGroup0.cite((Object) elExpression0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.933809998920632
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "a%n?DXOXx;KxYH=";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a%n?DXOXx;KxYH=");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      ElExpression elExpression0 = new ElExpression("ul");
      assertNotNull(elExpression0);
      assertEquals("ul", elExpression0.getExpression());
      assertEquals("ul", elExpression0.toString());
      assertEquals(2, elExpression0.length());
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(xmlEntityRef0, "F#*1tL=H-SySuM{g/B", "_;ytp[8-WNJ1NZSN", stringSelectModel0, elExpression0);
      assertNotNull(checkboxGroup0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("ul", elExpression0.getExpression());
      assertEquals("ul", elExpression0.toString());
      assertEquals(2, elExpression0.length());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertFalse(checkboxGroup0._isBuilt());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      
      Checkbox checkbox0 = new Checkbox(checkboxGroup0, "_;ytp[8-WNJ1NZSN", "F#*1tL=H-SySuM{g/B");
      assertNotNull(checkbox0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("ul", elExpression0.getExpression());
      assertEquals("ul", elExpression0.toString());
      assertEquals(2, elExpression0.length());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertFalse(checkboxGroup0._isBuilt());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      
      FormElement formElement0 = checkbox0.validationRule("_;ytp[8-WNJ1NZSN");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("ul", elExpression0.getExpression());
      assertEquals("ul", elExpression0.toString());
      assertEquals(2, elExpression0.length());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertFalse(checkboxGroup0._isBuilt());
      assertEquals("_;ytp[8-WNJ1NZSN", checkboxGroup0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("F#*1tL=H-SySuM{g/B", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("_;ytp[8-WNJ1NZSN", formElement0.getFormElementName());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.wBlock("F#*1tL=H-SySuM{g/B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "F_$n(.", "org.apache.commons.io.filefilter.SizeFileFilter");
      assertNotNull(textInput0);
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      
      List<RenderableComponent> list0 = textInput0._getRenderableChildren();
      assertNotNull(list0);
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("F_$n(.", textInput0.getFormElementName());
      assertEquals("org.apache.commons.io.filefilter.SizeFileFilter", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        textInput0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0791512728828505
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "a%n?DXOXx;KxYH=";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a%n?DXOXx;KxYH=");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      ElExpression elExpression0 = new ElExpression("a%n?DXOXx;KxYH=");
      assertNotNull(elExpression0);
      assertEquals(15, elExpression0.length());
      assertEquals("a%n?DXOXx;KxYH=", elExpression0.toString());
      assertEquals("a%n?DXOXx;KxYH=", elExpression0.getExpression());
      
      ElExpression elExpression1 = elExpression0.errorMessage("a%n?DXOXx;KxYH=");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNotNull(elExpression1);
      assertEquals(15, elExpression0.length());
      assertEquals("a%n?DXOXx;KxYH=", elExpression0.toString());
      assertEquals("a%n?DXOXx;KxYH=", elExpression0.getExpression());
      assertEquals("a%n?DXOXx;KxYH=", elExpression1.toString());
      assertEquals(15, elExpression1.length());
      assertEquals("a%n?DXOXx;KxYH=", elExpression1.getExpression());
      
      List<Component> list0 = xmlEntityRef0.findAll(elExpression1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNotNull(list0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(15, elExpression0.length());
      assertEquals("a%n?DXOXx;KxYH=", elExpression0.toString());
      assertEquals("a%n?DXOXx;KxYH=", elExpression0.getExpression());
      assertEquals("a%n?DXOXx;KxYH=", elExpression1.toString());
      assertEquals(15, elExpression1.length());
      assertEquals("a%n?DXOXx;KxYH=", elExpression1.getExpression());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "a%n?DXOXx;KxYH=", "a%n?DXOXx;KxYH=");
      assertNotNull(checkbox0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("a%n?DXOXx;KxYH=", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("a%n?DXOXx;KxYH=", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("a%n?DXOXx;KxYH=", checkbox0.getFormElementName());
      
      // Undeclared exception!
      try { 
        checkbox0.fileInput("a%n?DXOXx;KxYH=", (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      
      Block block0 = (Block)errorPage0.b();
      assertNotNull(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      Block block1 = (Block)errorPage0.pre();
      assertNotSame(block1, block0);
      assertFalse(block1.equals((Object)block0));
      assertNotNull(block1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("_(1cJ\"Mak,2B74S2");
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      
      Form form0 = new Form(block1, "_(1cJ\"Mak,2B74S2", actionExpression0);
      assertFalse(block1.equals((Object)block0));
      assertNotNull(form0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      
      String string0 = "";
      Form form1 = form0.addFormValidationRule("", "");
      assertNotSame(block1, block0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(block1.equals((Object)block0));
      assertNotNull(form1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form1.getComponentId());
      
      String string1 = "";
      Form form2 = form1.addFormValidationError("");
      assertNotSame(block1, block0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertFalse(block1.equals((Object)block0));
      assertNotNull(form2);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("_(1cJ\"Mak,2B74S2", form1.getComponentId());
      assertFalse(form2._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertEquals("_(1cJ\"Mak,2B74S2", form2.getComponentId());
      assertFalse(form2._isGeneratedId());
      
      String string2 = "[";
      Form form3 = form2.id("[");
      assertNotSame(block1, block0);
      assertSame(form0, form3);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form3);
      assertSame(form2, form0);
      assertSame(form3, form0);
      assertSame(form3, form2);
      assertSame(form3, form1);
      assertFalse(block1.equals((Object)block0));
      assertNotNull(form3);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("[", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("[", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form2._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertEquals("[", form2.getComponentId());
      assertFalse(form2._isGeneratedId());
      assertFalse(form3._isBuilt());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isGeneratedId());
      assertEquals("[", form3.getComponentId());
      
      TextInput textInput0 = new TextInput(form2, "*>Q:<bjJqZdRKK[[}7", "");
      assertFalse(block1.equals((Object)block0));
      assertNotNull(textInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getActionExpression());
      assertEquals(16, actionExpression0.length());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("_(1cJ\"Mak,2B74S2", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("[", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("[", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form2._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertEquals("[", form2.getComponentId());
      assertFalse(form2._isGeneratedId());
      assertEquals("*>Q:<bjJqZdRKK[[}7", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        textInput0.strong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      IEngine iEngine0 = errorPage0.getEngine();
      assertNull(iEngine0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Submit submit0 = new Submit(errorPage0, "java.lang.String@0000000012", "q");
      assertNotNull(submit0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("q", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      
      String string0 = "java.lang.String@0000000012";
      FormElement formElement0 = submit0.value("java.lang.String@0000000012");
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertNotNull(formElement0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("q", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("q", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      
      Radio radio0 = new Radio(formElement0, "java.lang.StringBuilder@0000000008", "org.mvel.conversion.IntegerCH$11");
      assertNotNull(radio0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("q", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("q", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("org.mvel.conversion.IntegerCH$11", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      
      String string1 = "CHECKCAST java/lang/CharSequence";
      // Undeclared exception!
      try { 
        submit0.s();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
