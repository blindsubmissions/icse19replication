/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:20:12 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "Substring bounds error";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Substring bounds error
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      String string1 = "";
      jSONObject0.optBoolean("", true);
      int int0 = 120;
      int int1 = (-372);
      JSONObject.valueToString((Object) null);
      int int2 = (-1239);
      int int3 = 2147;
      jSONObject0.toString((-1239), 2147);
      jSONObject0.toString(120, (-372));
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "' and instead saw '";
      stringArray0[1] = "";
      stringArray0[2] = "Substring bounds error";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      double double0 = jSONObject0.optDouble("C'+{{/@e%_**^;R", (double) (byte)48);
      assertEquals(48.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Double.NaN;
      Double double1 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double1);
      String string0 = "JSONArray initial value should be a string or collection or array.";
      try { 
        jSONObject0.getLong("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum(0.0F, (-965.9004F));
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(0.0F, 0.0F);
      jSONObject0.put("", (-432L));
      JSONObject jSONObject1 = jSONObject0.put("", (-432L));
      jSONObject1.putOpt("A JSONArray text must start with '['", jSONObject0);
      try { 
        jSONObject0.getString("1d{{co(|3>Rl=+C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1d{{co(|3>Rl=+C\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Collection<Boolean> collection0 = null;
      JSONObject jSONObject1 = jSONObject0.put("[dXTLi\"c", (Collection) null);
      jSONObject1.toString();
      jSONObject1.put("[dXTLi\"c", (Collection) null);
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      JSONObject jSONObject2 = jSONObject0.putOpt((String) null, byte1);
      jSONObject2.optDouble((String) null, (double) (byte)0);
      try { 
        jSONObject2.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "o&snH@*^*j5S3Mu<3da";
      JSONArray jSONArray0 = null;
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getInt("o&snH@*^*j5S3Mu<3da");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o&snH@*^*j5S3Mu<3da\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Short short0 = new Short((short) (-1338));
      short short1 = (short) (-1484);
      Short.toUnsignedInt((short) (-1484));
      Short.compare((short) (-1338), (short) (-1338));
      JSONObject.valueToString(short0, 0, 2240);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7664123555634645
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)17);
      JSONObject.valueToString(byte0, (byte)17, (byte)17);
      Byte.toUnsignedLong((byte)17);
      String string0 = "Substring bounds error";
      jSONObject0.remove("Substring bounds error");
      Integer integer0 = new Integer(0);
      jSONObject0.accumulate("cp8e@]#ylx0T", integer0);
      Boolean boolean0 = new Boolean("java.lang.Byte@0000000002");
      JSONObject.getNames((Object) boolean0);
      try { 
        jSONObject0.getString(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-34));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&onUU.J{I;K@3RD";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.has("&onUU.J{I;K@3RD");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.keys();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject0.optDouble("mq.':?ye3wxoH.d(", 7.0025040318452);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("zLFNgKO/uR");
      assertEquals("\"zLFNgKO/uR\"", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Byte byte0 = new Byte((byte)43);
      Byte.toUnsignedLong((byte)43);
      jSONObject0.optInt((String) null);
      JSONObject.valueToString(byte0, 0, 0);
      jSONObject0.optInt((String) null);
      JSONObject.getNames(object0);
      Byte byte1 = new Byte((byte)0);
      JSONObject.valueToString(byte1);
      String string0 = "wheel.json.JSONTokener";
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 46;
      jSONObject0.toString(46);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject0.getString("{}");
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{}";
      jSONObject0.toString(0, 0);
      jSONObject0.optLong("Expected a ':' after a key");
      JSONObject jSONObject1 = jSONObject0.put("{}", (-1099.0));
      jSONObject1.remove("gettoHexString");
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = null;
      jSONObject0.toString();
      jSONObject0.keys();
      JSONObject.getNames((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("*9vvNIT(@>v.r");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of *9vvNIT(@>v.r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.130379400018645
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      long long0 = (-1867L);
      jSONObject0.optLong("bl?uXU:b)G@n3", (-1867L));
      JSONObject jSONObject1 = jSONObject0.put("OJ=<LUC|5E^", (-1867L));
      jSONObject1.toString(62, 13);
      try { 
        jSONObject1.getInt("^1w(>'3xS)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^1w(>'3xS)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1330383173241705
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>(linkedList0);
      JSONObject.valueToString(linkedList0);
      Integer integer0 = new Integer(115);
      jSONObject0.accumulate("L^TI<1", integer0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.remove("\b");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "[]";
      stringArray0[3] = "[]";
      stringArray0[4] = "[]";
      stringArray0[5] = "\b";
      stringArray0[6] = "[]";
      stringArray0[7] = "\b";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optBoolean((String) null);
      jSONObject1.optBoolean("\b", false);
      String string0 = "\\u";
      jSONObject0.optString(string0);
      JSONObject.quote("\b");
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9225715051691912
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.remove("\b");
      jSONObject0.toString(0);
      jSONObject0.toString(32);
      jSONObject0.remove("min");
      Double double0 = new Double(32);
      try { 
        jSONObject0.append((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      String string0 = "b\"v9[FKn<-(wsPAzD";
      stringArray0[0] = "b\"v9[FKn<-(wsPAzD";
      stringArray0[1] = "";
      stringArray0[2] = "`U$U9Bx";
      stringArray0[3] = "";
      String string1 = ",`GNF--_B,(?/szJ";
      jSONObject0.put("pXAB-#:}D!AxS7%", true);
      try { 
        jSONObject0.getJSONArray("iZ{iV7{u7,X;DJ0,CB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iZ{iV7{u7,X;DJ0,CB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "getoptInt";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.listIterator();
      double double0 = (-610.306);
      Double double1 = new Double((-610.306));
      Byte byte0 = new Byte((byte)62);
      hashMap0.put(double1, byte0);
      // Undeclared exception!
      try { 
        linkedList1.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject0.toString(44, 44);
      JSONObject jSONObject2 = jSONObject1.append("op", hashMap0);
      jSONObject2.optLong("{}", (long) 44);
      JSONObject jSONObject3 = jSONObject1.append("qnK", "op");
      jSONObject3.optDouble("qnK", 1473.0);
      jSONObject1.accumulate("op", "op");
      JSONObject jSONObject4 = jSONObject1.put("getjoin", (Map) hashMap0);
      Short short0 = new Short((short)76);
      Short.toUnsignedInt((short)76);
      JSONObject.valueToString(short0);
      JSONObject.quote("getgetInt");
      jSONObject2.optJSONArray("yK");
      JSONObject.numberToString(short0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optInt(1403);
      jSONArray0.put(76, (Object) jSONObject2);
      jSONObject4.toJSONArray(jSONArray0);
      jSONObject2.isNull("getgetInt");
      jSONObject2.put("4-}2/fDjIo", true);
      String string1 = jSONObject4.toString();
      assertEquals(4, jSONObject1.length());
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2110688711446103
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Float float0 = new Float((-0.2800526626261734));
      Float.sum(0.0F, (-965.9004F));
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(0.0F, 0.0F);
      Float.min((-965.9004F), (-965.9004F));
      JSONObject jSONObject1 = jSONObject0.put("", (-432L));
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject2.putOpt("A JSONArray text must start with '['", jSONObject0);
      Boolean.logicalAnd(true, true);
      Float.sum(1.0F, 1423.5F);
      jSONObject3.names();
      jSONObject1.optString("", "FbRVLpYTPW");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1625502645608736
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString(44, 44);
      JSONObject jSONObject2 = jSONObject1.append("op", hashMap0);
      jSONObject0.optLong("{}", (-1867L));
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.put("lo", (long) 44);
      jSONObject2.toString(44, 44);
      try { 
        jSONObject0.getInt("{\"java.lang.String@0000000006\": [{}]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000006\\\": [{}]}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "`U$U9Bx";
      JSONObject jSONObject1 = jSONObject0.put("]b{G_.", false);
      try { 
        jSONObject1.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Short short0 = new Short((short) (-12));
      Short.toUnsignedLong((short) (-12));
      Short.toUnsignedInt((short)1258);
      Short.toUnsignedInt((short)96);
      Short.toUnsignedInt((short) (-12));
      JSONObject.numberToString(short0);
      JSONObject.doubleToString(1748.02729);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        Double.valueOf("get");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1137191065066494
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString(44, 44);
      JSONObject jSONObject2 = jSONObject1.append("op", hashMap0);
      jSONObject2.optLong("{}", (long) 44);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>(linkedList0);
      JSONObject.valueToString("");
      Integer integer0 = new Integer((-3720));
      Boolean boolean0 = new Boolean("op");
      try { 
        jSONObject1.accumulate((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8839296958518494
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Short short0 = new Short((short)92);
      Short.toUnsignedLong((short)125);
      JSONObject jSONObject0 = new JSONObject(short0);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String string0 = jSONObject0.optString("Null key.");
      assertEquals("", string0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray1.length);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4829870244288417
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "bl?uXU:b)G@n3";
      jSONObject0.optLong("bl?uXU:b)G@n3", (-1867L));
      JSONObject jSONObject1 = jSONObject0.put("OJ=<LUC|5E^", (-1867L));
      jSONObject1.toString(62, 13);
      try { 
        jSONObject1.getInt("{\n                                                                           \"java.lang.String@0000000003\": java.lang.Long@0000000004,\n                                                                           \"java.lang.String@0000000005\": \"java.lang.Class@0000000006\"\n             }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n                                                                           \\\"java.lang.String@0000000003\\\": java.lang.Long@0000000004,\\n                                                                           \\\"java.lang.String@0000000005\\\": \\\"java.lang.Class@0000000006\\\"\\n             }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>(linkedList0);
      JSONObject.valueToString(linkedList0);
      Integer integer0 = new Integer((-1915));
      jSONObject0.accumulate("L^TI<1", (Object) null);
      Long long1 = new Long((-108L));
      JSONObject.testValidity(long1);
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5175807295209243
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString(44, 44);
      JSONObject jSONObject2 = jSONObject1.append("op", hashMap0);
      jSONObject2.optLong("{}", (long) 44);
      JSONObject jSONObject3 = jSONObject1.append("qnK", "op");
      jSONObject3.optDouble("qnK", (double) 44L);
      jSONObject1.accumulate("op", "op");
      JSONObject jSONObject4 = jSONObject1.put("getjoin", (Map) hashMap0);
      Short short0 = new Short((short)76);
      Short.toUnsignedInt((short)76);
      JSONObject.valueToString(short0);
      JSONObject.valueToString((Object) null);
      jSONObject1.toString();
      jSONObject4.toString(76);
      Object object0 = jSONObject0.remove("{}");
      assertNull(object0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6996512342550605
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-2364), (-2364));
      assertEquals(3, jSONObject0.length());
  }
}
