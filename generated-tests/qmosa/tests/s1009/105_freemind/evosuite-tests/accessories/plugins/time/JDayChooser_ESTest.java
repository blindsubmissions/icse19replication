/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:44:59 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.extensions.ExportHook;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.ImageObserver;
import java.awt.image.Kernel;
import java.util.Date;
import java.util.Locale;
import javax.help.BackAction;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.plaf.PanelUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.ElemUse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setYear(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12, 0, 0, 0, 'e');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.getDefaultLocale();
      jDayChooser0.initialized = true;
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getMinSelectableDate();
      int int0 = (-1628);
      long long0 = 1183L;
      int int1 = 349;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-1628), (-1428), (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getComponentPopupMenu();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeMouseListener(defaultCaret0);
      KeyStroke.getKeyStroke("day");
      KeyStroke.getKeyStroke(0, 2480);
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      jDayChooser0.getToolTipText();
      jDayChooser0.getLocale();
      jDayChooser0.init();
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 0, "");
      actionEvent0.paramString();
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAlignmentX();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.decorationBackgroundVisible = true;
      jDayChooser0.getMaxSelectableDate();
      int int0 = 0;
      jDayChooser0.setYear(0);
      jDayChooser0.drawDays();
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemUse elemUse0 = new ElemUse();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemUse0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8072459411997186
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setAutoscrolls(true);
      jMonthChooser0.addMouseMotionListener((MouseMotionListener) null);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDayBordersVisible();
      FocusEvent focusEvent0 = new FocusEvent(jMonthChooser0, 6, true);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setYear(28);
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.isWeekOfYearVisible();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=28,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.setDecorationBackgroundVisible(false);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.712170165855426
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(140);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 140, true);
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      dimension0.height = (-350);
      jDayChooser0.initDecorations();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(203, 203, 0, 67108864, 203);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8421151244608924
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setYear(28);
      jDayChooser0.dayBordersVisible = false;
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.isWeekOfYearVisible();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=28,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setYear(28);
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(458752);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JYearChooser jYearChooser0 = new JYearChooser();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      FontInfo fontInfo0 = pDFDocumentGraphics2D0.getFontInfo();
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources(458752);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFResourceContext0, "", "replaceAttributeActionPair", 458752);
      jYearChooser0.printComponents(pDFGraphics2D0);
      jDayChooser0.setYearChooser(jYearChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BackAction backAction0 = new BackAction(jMonthChooser0);
      jDayChooser_DecoratorButton0.requestFocus(false);
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) backAction0, (MouseListener) backAction0);
      jDayChooser_DecoratorButton0.addMouseListener(mouseListener0);
      jDayChooser0.setDayBordersVisible(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.getMaxSelectableDate();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertSame(date1, date0);
      
      jDayChooser0.drawDays();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.094825497977894
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(458752);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JYearChooser jYearChooser0 = new JYearChooser();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      pDFDocumentGraphics2D0.getFontInfo();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDayBordersVisible();
      FocusEvent focusEvent0 = new FocusEvent(jMonthChooser0, 6, true);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(jYearChooser0);
      jDayChooser1.focusLost(focusEvent0);
      jDayChooser0.setFocus();
      jDayChooser1.setMaxDayCharacters(5);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getToolkit();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.defaultMinSelectableDate = date0;
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setAutoscrolls(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, 300000L, 2488, (-4781), 'H');
      jDayChooser0.keyTyped(keyEvent0);
      keyEvent0.paramString();
      InputEvent.getModifiersExText(2488);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getLocale();
      jDayChooser0.getDay();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(14, 0, 0, 14, 1828, 14);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9763062291411693
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getToolkit();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.defaultMinSelectableDate = date0;
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setAutoscrolls(false);
      jDayChooser0.setWeekOfYearVisible(true);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 14, false);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 14);
      Object object0 = new Object();
      focusEvent1.setSource(object0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1777);
      floatArray0[1] = (float) 40;
      floatArray0[2] = (float) (-2525);
      floatArray0[3] = (float) (-2525);
      floatArray0[4] = (float) (-1777);
      Color.RGBtoHSB((-2525), 1661, 40, floatArray0);
      FocusEvent focusEvent2 = new FocusEvent(jDayChooser0, (-1777), true);
      focusEvent2.setSource(color0);
      jDayChooser0.focusLost(focusEvent2);
      jDayChooser0.initDecorations();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1923, 1923, 14, 31, 4);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7823559208895667
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setOpaque(false);
      jDayChooser0.setMaxDayCharacters((-1752));
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3606), false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.focusGained(focusEvent0);
      focusEvent0.paramString();
      jDayChooser0.setDay((-3606));
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.getWeekdayForeground();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.075192957971897
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(458752);
      jDayChooser0.isDecorationBordersVisible();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JYearChooser jYearChooser0 = new JYearChooser();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      pDFDocumentGraphics2D0.getFontInfo();
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.isDayBordersVisible();
      FocusEvent focusEvent0 = new FocusEvent(jMonthChooser0, 6, false);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(jMonthChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser1.setFocus();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setMaxDayCharacters(5);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1609);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDayBordersVisible(false);
      SystemColor systemColor0 = SystemColor.scrollbar;
      jDayChooser0.setSundayForeground(systemColor0);
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2491, 2333L, 2491, 22, 'i');
      jDayChooser0.keyPressed(keyEvent0);
      MockDate mockDate0 = new MockDate(927, 10, (-777), (-1013), 30);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.updateUI();
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9763062291411693
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDoubleBuffered(true);
      jDayChooser0.getMinimumSize();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setDay(25);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 9999, false);
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, fontInfo0, pDFDocument0, (PDFResourceContext) null, "replaceAttributeActionPair", "day", 203);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BackAction backAction0 = new BackAction("replaceAttributeActionPair");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.requestFocus(false);
      AWTEventMulticaster.add((MouseListener) backAction0, (MouseListener) backAction0);
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getContainerListeners();
      jDayChooser1.getMaxDayCharacters();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMinSelectableDate((Date) null);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.drawDays();
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      assertEquals(25, jDayChooser0.getDay());
      
      jDayChooser2.setFocus();
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8199156776450796
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDoubleBuffered(true);
      jDayChooser0.getMinimumSize();
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser1.minSelectableDate;
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      jDayChooser1.setDay(871);
      int int0 = 9999;
      boolean boolean0 = true;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 140, true);
      focusEvent0.setSource(date0);
      jDayChooser1.focusLost(focusEvent0);
      jDayChooser1.initDecorations();
      int int1 = 30;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1857), 1208, 7, 1208, 0);
      jDayChooser1.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setMonth(140);
      jDayChooser0.drawDays();
      char char0 = 'W';
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 203, 1271L, (-1663), (-1263), 'W', (-1663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }
}
