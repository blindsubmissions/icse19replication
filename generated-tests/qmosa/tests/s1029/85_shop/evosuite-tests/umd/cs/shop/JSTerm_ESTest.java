/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:56:19 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hDz5|5c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      stringReader0.reset();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standardizerTerm();
      JSJshopVars.minus = (-1);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      jSTerm1.equals(jSTerm0);
      jSTerm0.makeFunction();
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^r-(uIM0p7#Zk6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%TI/RS >*MP&V");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0620695413001644
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      streamTokenizer0.whitespaceChars(0, 3085);
      JSJshopVars.lessT = 41;
      jSTerm0.print();
      jSTerm0.isFunction();
      jSTerm0.makeEval(false);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.631345420808597
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "U)KtWpY|";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = 41;
      stringReader0.ready();
      jSTerm0.isConstant();
      jSTerm0.spliterator();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChar(41);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      boolean boolean1 = jSTerm1.isGround();
      assertTrue(jSTerm0.isVariable());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7m&=Si;6gJxj+e1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(7.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6151195500604119
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      JSJshopVars.interrogation = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      JSJshopVars.lessT = 41;
      jSTerm0.print();
      streamTokenizer0.commentChar((-2798));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertFalse(jSTerm2.isFunction());
      assertEquals("[?tvj.]", jSTerm1.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm2.isVariable());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      JSJshopVars.lessT = 41;
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[tvj.]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "U)KtWpY|";
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'U';
      charArray0[2] = '5';
      charArray0[3] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-1);
      stringReader0.ready();
      jSTerm0.isConstant();
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.print();
      streamTokenizer0.commentChar(2);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1831872696020134
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%TI/RS >*MP&V");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      jSTerm1.isEval();
      jSTerm0.makeFunction();
      jSTerm0.isEval();
      jSTerm1.isGround();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      boolean boolean0 = jSTerm3.equals(jSTerm0);
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8192897823758833
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      JSJshopVars.interrogation = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      boolean boolean0 = jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
      
      jSTerm0.isEval();
      boolean boolean1 = jSTerm0.isEval();
      assertFalse(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution4 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertEquals("[?tvj.]", jSTerm2.toString());
      assertEquals(1, jSSubstitution4.size());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.326087056453926
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "|U)KtWpY|";
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'U';
      charArray0[2] = '5';
      stringReader0.reset();
      charArray0[3] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-1);
      jSTerm0.isConstant();
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      jSTerm0.makeEval(true);
      streamTokenizer0.commentChar((-1));
      jSTerm0.makeFunction();
      jSTerm0.isEval();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9561874676604514
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      JSJshopVars.interrogation = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) "tvj.{)5");
      jSPredicateForm0.add((Object) streamTokenizer0);
      streamTokenizer0.pushBack();
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      JSJshopVars.lessT = 41;
      jSTerm0.print();
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals(1, jSTerm0.size());
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      int int0 = 124;
      StringReader stringReader0 = new StringReader("% ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5975087827449324
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "|U)KtWpY|";
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'U';
      charArray0[2] = '5';
      stringReader0.reset();
      charArray0[3] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-1);
      jSTerm0.isConstant();
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3739151642719136
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "|U)KtWpY|";
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'U';
      charArray0[2] = '5';
      stringReader0.reset();
      charArray0[3] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-1);
      jSTerm0.isConstant();
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.isEval();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.5982695885852573
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      JSJshopVars.interrogation = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      JSJshopVars.lessT = 41;
      stringReader0.skip(41);
      jSTerm0.print();
      streamTokenizer0.commentChar((-2798));
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0330001999799117
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "|U)KtWpY|";
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'U';
      charArray0[2] = '5';
      stringReader0.reset();
      charArray0[3] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-1);
      jSTerm0.isConstant();
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      jSTerm0.makeEval(true);
      jSTerm0.call();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.cloneT();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0954096187023272
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      jSTerm0.add((Object) stringReader0);
      JSJshopVars.interrogation = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      jSTerm0.isEval();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertEquals(2, jSTerm0.size());
      
      System.setCurrentTimeMillis(0L);
      jSTerm2.applySubstitutionT(jSSubstitution3);
      jSTerm0.cloneT();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.call();
      jSTerm2.cloneT();
      assertTrue(jSTerm2.isConstant());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2873138796779617
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "|U)KtWpY|";
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'L';
      charArray0[2] = '5';
      stringReader0.reset();
      charArray0[3] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-1);
      jSTerm0.isConstant();
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.isEval();
      jSTerm0.isGround();
      charBuffer0.mark();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(4);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "|U)KtWpY|";
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'L';
      charArray0[2] = '5';
      stringReader0.reset();
      charArray0[3] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-1);
      jSTerm0.isConstant();
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.isEval();
      jSTerm0.isGround();
      jSTerm0.print();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5360884544749416
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "|U)KtWpY|";
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'U';
      charArray0[2] = '5';
      stringReader0.reset();
      charArray0[3] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-1);
      jSTerm0.isConstant();
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.makeFunction();
      jSTerm0.isEmpty();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.clone();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm3.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm4.toStr();
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1256156913444824
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      jSTerm0.add((Object) stringReader0);
      JSJshopVars.interrogation = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeEval(true);
      streamTokenizer0.lowerCaseMode(false);
      jSTerm1.makeFunction();
      jSTerm1.isEmpty();
      jSTerm1.isGround();
      jSTerm1.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.clone();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.setSize(1607);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2609368563805945
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "|U)KtWpY|";
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'U';
      charArray0[2] = '5';
      stringReader0.reset();
      charArray0[3] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-1);
      jSTerm0.isConstant();
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.698011019844113
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      jSTerm0.add((Object) stringReader0);
      JSJshopVars.interrogation = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.isEval();
      jSTerm1.makeEval(false);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm1.makeFunction();
      jSTerm2.isEval();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.equals(jSTerm1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm3.matches(jSTerm4, jSSubstitution3);
      jSTerm2.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3945573191650282
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("%TI/RS >*MP&V");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm1.isEval();
      jSTerm2.isEval();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7825356235725929
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      jSTerm0.add((Object) stringReader0);
      JSJshopVars.interrogation = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm1.isEval();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.isEval();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3598492521638335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals("[., [tvj.], [nil]]", jSTerm1.toString());
      
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.isGround();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSSubstitution> function1 = unaryOperator0.andThen((Function<? super Object, ? extends JSSubstitution>) function0);
      function1.compose((Function<? super String, ?>) unaryOperator0);
      Function<Object, JSSubstitution> function2 = unaryOperator0.andThen((Function<? super Object, ? extends JSSubstitution>) function1);
      unaryOperator0.andThen((Function<? super Object, ?>) function2);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertTrue(jSTerm3.isFunction());
      
      JSTerm jSTerm4 = jSTerm2.call();
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm4.isFunction());
      assertNotSame(jSTerm4, jSTerm2);
      assertTrue(jSTerm4.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.714452351742496
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.isGround();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSSubstitution> function1 = unaryOperator0.andThen((Function<? super Object, ? extends JSSubstitution>) function0);
      function1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm1.isEval();
      jSTerm0.isGround();
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6613229347629224
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.isGround();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSSubstitution> function1 = unaryOperator0.andThen((Function<? super Object, ? extends JSSubstitution>) function0);
      function1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm2.isEval();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      jSTerm3.isGround();
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.equals(jSTerm4);
      jSTerm1.toStr();
      jSTerm2.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tvj.{)5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = 41;
      jSTerm0.add((Object) stringReader0);
      JSJshopVars.interrogation = 41;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.containsAll(jSPredicateForm0);
      stringReader0.reset();
      stringReader0.reset();
      boolean boolean0 = jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm2, jSSubstitution2);
      boolean boolean1 = jSTerm2.isEval();
      assertFalse(boolean1);
      
      jSTerm2.equals(jSTerm1);
      jSTerm0.isFunction();
      jSTerm0.print();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      assertFalse(jSSubstitution5.equals((Object)jSSubstitution4));
      
      JSSubstitution jSSubstitution6 = jSTerm1.matches(jSTerm2, (JSSubstitution) null);
      assertEquals(1, jSSubstitution6.size());
      
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      boolean boolean2 = jSTerm3.equals(jSTerm0);
      assertFalse(boolean2 == boolean0);
      
      StringBuffer stringBuffer0 = jSTerm3.toStr();
      assertFalse(jSTerm3.isFunction());
      assertEquals(5, stringBuffer0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6235217562718085
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "|U)KtWpY|";
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'Y';
      charArray0[2] = '5';
      stringReader0.reset();
      charArray0[3] = '5';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-1);
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      jSTerm0.equals(jSTerm0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSJshopVars.dot = 4;
      jSTerm2.standardizerTerm();
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
