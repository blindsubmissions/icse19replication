/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:45:59 GMT 2018
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscStmtHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.NativeGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isEmpty();
      Integer integer0 = new Integer(560);
      linkedList0.removeFirstOccurrence(integer0);
      fBCachedFetcher0.relative(212);
      fBCachedFetcher0.setFetchSize((-616));
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(560);
      linkedList0.removeFirstOccurrence(integer0);
      fBCachedFetcher0.relative(212);
      fBCachedFetcher0.absolute((-1710));
      int int0 = fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.last();
      fBCachedFetcher0.afterLast();
      fBCachedFetcher0.isAfterLast();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean1 = fBCachedFetcher1.last();
      fBCachedFetcher1.close();
      assertTrue(fBCachedFetcher1.isEmpty());
      
      fBCachedFetcher0.afterLast();
      int int1 = fBCachedFetcher0.getRowNum();
      assertTrue(int1 == int0);
      
      boolean boolean2 = fBCachedFetcher0.isAfterLast();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.toArray();
      linkedList0.removeFirstOccurrence((Object) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.next();
      linkedList0.pollFirst();
      fBCachedFetcher0.isEmpty();
      byte[][] byteArray0 = new byte[1][8];
      fBCachedFetcher0.last();
      linkedList0.offerFirst(byteArray0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.addLast((byte[][]) null);
      linkedList0.iterator();
      linkedList0.clone();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList0.poll();
      fBCachedFetcher0.close();
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.first();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.beforeFirst();
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      byte[][] byteArray0 = new byte[1][9];
      byte[] byteArray1 = new byte[9];
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.add("3");
      linkedList0.retainAll(linkedBlockingDeque0);
      linkedList0.clone();
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)44;
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isLast();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      byte[][] byteArray0 = new byte[1][9];
      byte[] byteArray1 = new byte[9];
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.add("3");
      linkedList0.retainAll(linkedBlockingDeque0);
      linkedList0.clone();
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)44;
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isLast();
      boolean boolean1 = fBCachedFetcher0.absolute(31);
      assertFalse(boolean1);
      
      boolean boolean2 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3592367006650063
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      byte[][] byteArray0 = new byte[1][9];
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      InternalTransactionCoordinator.AbstractTransactionCoordinator internalTransactionCoordinator_AbstractTransactionCoordinator0 = null;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-1080));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.next();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator((InternalTransactionCoordinator.AbstractTransactionCoordinator) null);
      fBCachedFetcher0.isFirst();
      assertTrue(fBCachedFetcher0.isLast());
      
      FBCachedFetcher fBCachedFetcher2 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher2.isFirst();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][3];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-65);
      byteArray2[1] = (byte) (-108);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-108);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[0];
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[5];
      byteArray6[0] = (byte) (-108);
      byteArray6[1] = (byte) (-108);
      byteArray6[2] = (byte) (-65);
      byteArray6[3] = (byte) (-65);
      byteArray6[4] = (byte) (-108);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[3];
      byteArray7[0] = (byte) (-65);
      byteArray7[1] = (byte) (-65);
      byteArray0[6] = byteArray7;
      linkedList0.addLast(byteArray0);
      linkedList0.iterator();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.updateRow(byteArray0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1458417525947544
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArrayArray0 = null;
      linkedList0.addLast((byte[][]) null);
      linkedList0.iterator();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.afterLast();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      fBCachedFetcher1.isAfterLast();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6987829895138007
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.add("You cannot position to the row 0 with absolute() method.");
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.retainAll(linkedBlockingDeque0);
      linkedList0.clone();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.last();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.isLast();
      try { 
        fBCachedFetcher0.absolute((-1));
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8184831630123652
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8848713335781606
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.isEmpty();
      assertFalse(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5532370029937144
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.first();
      fBCachedFetcher0.next();
      fBCachedFetcher0.last();
      fBCachedFetcher0.relative(24);
      fBCachedFetcher0.absolute(2183);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.first();
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.absolute(1111);
      byte[][] byteArray0 = new byte[9][1];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-43);
      byteArray1[1] = (byte) (-10);
      byteArray1[2] = (byte) (-101);
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte)26;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)100;
      byteArray2[1] = (byte) (-101);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-101);
      byteArray3[1] = (byte) (-10);
      byteArray3[2] = (byte) (-17);
      byteArray3[3] = (byte)100;
      byteArray3[4] = (byte) (-43);
      byteArray3[5] = (byte)88;
      byteArray3[6] = (byte)126;
      byteArray3[7] = (byte)26;
      byteArray3[8] = (byte)100;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)71;
      byteArray4[1] = (byte) (-114);
      byteArray4[2] = (byte)26;
      byteArray4[3] = (byte)126;
      byteArray4[4] = (byte) (-10);
      byteArray4[5] = (byte) (-101);
      byteArray4[6] = (byte) (-10);
      byteArray4[7] = (byte) (-17);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)100;
      byteArray5[1] = (byte)100;
      byteArray5[2] = (byte) (-101);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte)100;
      byteArray6[1] = (byte)26;
      byteArray6[2] = (byte) (-101);
      byteArray6[3] = (byte) (-17);
      byteArray6[4] = (byte) (-17);
      byteArray6[5] = (byte) (-10);
      byteArray6[6] = (byte)100;
      byteArray6[7] = (byte) (-114);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[4];
      byteArray7[0] = (byte)100;
      byteArray7[1] = (byte) (-43);
      byteArray7[2] = (byte)71;
      byteArray7[3] = (byte) (-114);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[4];
      byteArray8[0] = (byte)126;
      byteArray8[1] = (byte)100;
      byteArray8[2] = (byte)100;
      byteArray8[3] = (byte) (-10);
      byteArray0[7] = byteArray8;
      byte[] byteArray9 = new byte[2];
      byteArray9[0] = (byte)26;
      byteArray9[1] = (byte) (-17);
      byteArray0[8] = byteArray9;
      fBCachedFetcher0.updateRow(byteArray0);
      assertFalse(fBCachedFetcher0.isEmpty());
  }
}
