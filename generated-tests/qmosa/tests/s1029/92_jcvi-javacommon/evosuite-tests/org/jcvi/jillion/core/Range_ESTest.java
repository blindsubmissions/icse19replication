/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:45:18 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      range0.getLength();
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4224L, 4224L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        Range.of(3444L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 3444, -9223372036854775808 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4965075614664793
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(2452L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4224142040147285
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      Range.ofLength(0L);
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(2888L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4817039798222162
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      range2.intersects(range1);
      range2.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 1L, 1L);
      List<Range> list0 = range2.complement(range1);
      List<Range> list1 = range3.complementFrom(list0);
      range3.complementFrom(list1);
      range3.toString();
      range1.getEnd();
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("t+QO)qnm5 _q8Vx~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.t+QO)qnm5 _q8Vx~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.319492576154752
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.Comparators.values();
      long long0 = (-1070L);
      Range range0 = Range.of((-9223372036854775808L), (-1070L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1901L), 2147483647L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3284718813307355
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 1L;
      long long1 = 1574L;
      Range range0 = Range.of(1L, 1574L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      range1.isEmpty();
      Range range2 = Range.parseRange("[ 2 .. 1575 ]/RB");
      range2.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 2 .. 1575 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 2 .. 1575 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      long long1 = (-1049L);
      Range range0 = Range.of((-1049L));
      long long2 = (-560L);
      Range range1 = Range.of((-560L));
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      long long3 = 232L;
      long long4 = 383L;
      // Undeclared exception!
      try { 
        Range.of(65535L, 383L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long0 = 0L;
      range_Builder0.expandEnd(0L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2825L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4137285204154786
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range range0 = Range.of(1L);
      List<Range> list0 = range0.split(4294967295L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("Skg}~g9]Go`{i6V.o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Skg}~g9]Go`{i6V.o into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 661L;
      Range.Builder range_Builder0 = new Range.Builder(661L, 661L);
      range_Builder0.expandEnd(0L);
      range_Builder0.build();
      Range.of((-856L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 661L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.23823154034824
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = 909L;
      Range range0 = Range.ofLength(909L);
      List<Range> list0 = range0.split(909L);
      range0.equals(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("Y|8d,qP&c2W;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Y|8d,qP&c2W; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4128530730082143
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = 2147483647L;
      Range range1 = Range.of(1L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      range2.getBegin();
      range0.isSubRangeOf(range1);
      String string0 = "2v^9";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("2v^9", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 2v^9 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.941616952644221
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("O]d|!(`?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse O]d|!(`? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.120291565301284
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-3752L);
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3752L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.997068727089017
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2331L, 2331L);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("4J>9F)\"~FT/u&", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 4J>9F)\"~FT/u& into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.887577825056549
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0026974323801805
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(2201L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.983464401471834
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.getLength();
      range_Builder0.expandEnd(2825L);
      range_Builder0.contractBegin(2825L);
      Range range1 = range_Builder0.build();
      Range.ofLength(0L);
      long long0 = (-1951L);
      range_Builder0.contractBegin((-1951L));
      range1.getLength();
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2814860976177402
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 32767L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.ofLength(32767L);
      Range.of(range_CoordinateSystem0, (-1L), 32767L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0407272942644323
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), (-1L));
      List<Range> list0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.6537024929636477
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(641L, 641L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(641L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(641L);
      Range range3 = range0.intersection(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range3.split(641L);
      range0.getEnd(range_CoordinateSystem1);
      range0.equals(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9606885123462443
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 4294967295L;
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2201L;
      Range range0 = Range.of(2201L);
      long long2 = 652L;
      Range range1 = Range.of(652L);
      range1.endsBefore(range0);
      String string0 = ",nd+k/";
      // Undeclared exception!
      try { 
        Range.parseRange(",nd+k/", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ,nd+k/ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7914209200851943
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.expandEnd(4294967295L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.parseRange("mO:cd(tiP", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse mO:cd(tiP into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.446087406185579
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(3444L, 9223372036854775764L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775764L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(2944L);
      Range.Builder range_Builder1 = new Range.Builder(2944L, 3444L);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 2944L, 9223372036854775764L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("F!2w|#r%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.F!2w|#r%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.543190220730083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(641L, 641L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(641L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      range1.startsBefore(range0);
      Range range2 = Range.of(641L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range1.split(641L);
      range0.getEnd(range_CoordinateSystem1);
      range0.equals(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.6482353417095723
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L, 2147483647L);
      Range range2 = range1.intersection(range0);
      range2.getBegin();
      range0.isSubRangeOf(range1);
      Range range3 = Range.of((-2859L), 1L);
      range0.toString();
      Range range4 = Range.of((-2859L));
      range0.startsBefore(range4);
      Range.Comparators.values();
      range0.toString();
      range4.complement(range3);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Space Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Space Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2855113402701313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.of(0L);
      long long1 = (-563L);
      Range range1 = Range.of((-563L));
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      long long2 = 232L;
      long long3 = 383L;
      // Undeclared exception!
      try { 
        Range.ofLength((-563L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4718979174106694
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of(1L, 2147483647L);
      Range range1 = Range.of((-2859L));
      Range.Comparators.values();
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = 283L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 283L);
      range_Builder0.copy();
      String string0 = "byte array can not be null";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("byte array can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.byte array can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.657820123966718
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(641L, 641L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(255L);
      range0.intersects(range1);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(9223372036854773340L);
      Range range3 = range0.intersection(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.split(255L);
      range2.getEnd(range_CoordinateSystem0);
      range0.equals(range3);
      Range.Comparators.values();
      range1.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.611945312143832
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of(641L, 641L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(641L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(641L);
      Range range3 = Range.ofLength(641L);
      Range range4 = range0.intersection(range3);
      range4.endsBefore(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.split(533L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.getEnd(range_CoordinateSystem1);
      Range range5 = Range.ofLength(402L);
      range3.equals(range5);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.8168991256139693
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of(641L, 641L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(641L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(641L);
      Range range3 = Range.ofLength(641L);
      Range range4 = range0.intersection(range3);
      range4.endsBefore(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range5 = Range.of((-820L));
      List<Range> list0 = range5.complement(range4);
      range0.complementFrom(list0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-366L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1184272811610554
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(3444L, 9223372036854775764L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.split((-591L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.8286413964890924
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-9223372036854775808L), (-1070L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1901L), 2147483647L);
      range1.isSubRangeOf(range0);
      range0.isSubRangeOf(range1);
      Range.of(2523L);
      Range range2 = Range.of(2147483647L);
      range1.intersection(range2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1901L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.8918202981106305
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of(641L, 641L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(641L);
      boolean boolean0 = range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(641L);
      Range range3 = range0.intersection(range2);
      boolean boolean1 = range3.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.split(533L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem1);
      Range range4 = Range.ofLength(402L);
      range3.toString();
      range_CoordinateSystem1.toString();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotSame(range0, range3);
      assertEquals("[ 641 .. 642 ]/SB", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(0L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder3.shift(641L);
      boolean boolean2 = range4.startsBefore(range1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.649258877529331
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of((-4302L));
      Range range1 = Range.ofLength(0L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-1032L));
      Range range3 = range2.intersection(range0);
      Range range4 = Range.of(65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      range3.split(9223372036854773340L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      range1.equals("Space Based");
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of((-1032L), (-4302L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.611945312143832
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(641L, 641L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(641L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(641L);
      Range range3 = Range.ofLength(641L);
      Range range4 = range0.intersection(range3);
      range4.endsBefore(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      long long0 = 533L;
      range0.split(533L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.getEnd(range_CoordinateSystem1);
      Range.ofLength(533L);
      range4.equals(range_CoordinateSystem1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.toString(range_CoordinateSystem2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(2013L);
      int int0 = 769;
      Integer integer0 = new Integer(769);
      range0.equals(integer0);
      Range.Comparators.values();
      range1.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.6465718406838312
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of(641L, 641L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(641L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(641L);
      Range range3 = Range.ofLength(641L);
      Range range4 = range0.intersection(range3);
      range4.endsBefore(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range5 = Range.of(641L, 2147483647L);
      List<Range> list0 = range2.complement(range1);
      assertTrue(range2.equals((Object)range4));
      assertTrue(list0.contains(range4));
      assertEquals(1, list0.size());
      
      Range range6 = range5.intersection(range1);
      assertFalse(range6.isEmpty());
      assertNotSame(range6, range0);
  }
}
