/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:35:23 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.setXPath("k.8DNDvT>");
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.star();
      xPathLexer0.hasMoreChars();
      xPathLexer0.getXPath();
      xPathLexer0.identifierOrOperatorName();
      token1.toString();
      xPathLexer0.literal();
      Token token2 = xPathLexer0.doubleColon();
      xPathLexer0.getXPath();
      xPathLexer0.consume((-1058));
      xPathLexer0.setPreviousToken(token1);
      token2.toString();
      // Undeclared exception!
      try { 
        xPathLexer0.LA(1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-1829));
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.dollar();
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.pipe();
      assertEquals("\"", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("g", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("1", token3.getTokenText());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.colon();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.div();
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (2) (g)", string0);
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token2);
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      xPathLexer0.literal();
      Token token11 = xPathLexer0.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      xPathLexer0.dots();
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      char char0 = xPathLexer0.LA(111);
      assertEquals('\uFFFF', char0);
      
      Token token13 = xPathLexer0.at();
      assertEquals(16, token13.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.currentPosition();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.comma();
      xPathLexer0.endPosition();
      xPathLexer0.consume();
      xPathLexer0.setXPath("");
      xPathLexer0.dollar();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.endPosition();
      xPathLexer0.rightBracket();
      xPathLexer0.hasMoreChars();
      xPathLexer0.number();
      xPathLexer0.setXPath("7=Bf]xWbloWD");
      assertEquals("7=Bf]xWbloWD", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("IB{h");
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("IB{h");
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.isIdentifierStartChar('\'');
      xPathLexer0.whitespace();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.consume((-1));
      assertEquals("IB{h", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.456391519671991
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.LA(159);
      xPathLexer0.mod();
      xPathLexer0.isIdentifierStartChar('\uFFFF');
      xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer0.consume(288);
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("");
      xPathLexer0.dots();
      xPathLexer0.identifier();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('\uFFFF');
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.hasMoreChars();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.consume(1386);
      assertEquals("", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.120083060010746
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      Token token0 = xPathLexer0.slashes();
      assertEquals(" ", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("d", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("x", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("e", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("w0", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("M", token5.getTokenText());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.not();
      assertEquals("9", token6.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("o", token7.getTokenText());
      
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.currentPosition();
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      xPathLexer0.plus();
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer0.getPreviousToken();
      assertEquals("+", token12.getTokenText());
      assertEquals(5, token12.getTokenType());
      
      xPathLexer0.isIdentifierChar('|');
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token14 = xPathLexer0.equals();
      assertEquals(21, token14.getTokenType());
      
      Token token15 = xPathLexer0.doubleColon();
      assertEquals(19, token15.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2864629612967993
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      xPathLexer0.number();
      token0.toString();
      token0.toString();
      xPathLexer0.minus();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.consume(0);
      xPathLexer0.colon();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.getXPath();
      xPathLexer0.star();
      xPathLexer0.consume(0);
      Token token2 = xPathLexer0.identifier();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5851588430248333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.minus();
      assertEquals("2", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("7", token3.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("c", token4.getTokenText());
      
      xPathLexer0.dollar();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("I", token5.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.equals();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.mod();
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      Token token9 = xPathLexer0.getPreviousToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("UlPkvdb5q", token9.getTokenText());
      
      xPathLexer0.isIdentifierStartChar('^');
      xPathLexer0.hasMoreChars();
      xPathLexer0.slashes();
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer0.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer0.equals();
      assertEquals(21, token15.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(34, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0610358740175243
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("L", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("bZQZr", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      xPathLexer0.consume(1);
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("|", token4.getTokenText());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.423057050533242
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token1.toString();
      token1.toString();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.mod();
      token1.toString();
      xPathLexer0.relationalOperator();
      token1.toString();
      xPathLexer0.literal();
      xPathLexer0.notEquals();
      token1.toString();
      xPathLexer0.number();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.isIdentifierChar('\"');
      Token token2 = xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9113112662606542
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jmyz4G([@h[Y");
      xPathLexer0.minus();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.consume((-1));
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.consume((-1));
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2861703896509078
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jmyz4G([@h[Y");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("my", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("z", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("4", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("\"u>=");
      xPathLexer0.minus();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("\"", token4.getTokenText());
      
      Token token5 = xPathLexer1.comma();
      assertEquals("u", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("(", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("0[-2");
      Token token7 = xPathLexer2.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("0", token7.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(12, int0);
      
      xPathLexer1.currentPosition();
      Token token8 = xPathLexer2.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer2.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.isIdentifierChar('8');
      Token token9 = xPathLexer3.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(3, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("jmyz4G([@h[Y");
      Token token11 = xPathLexer4.minus();
      assertEquals(6, token11.getTokenType());
      assertEquals("j", token11.getTokenText());
      
      xPathLexer3.consume();
      xPathLexer0.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.consume(4422);
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
      assertEquals("@", token12.getTokenText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.620546059262459
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath(" dxew0M9+o");
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer(" dxew0M9+o");
      xPathLexer1.nextToken();
      xPathLexer0.number();
      xPathLexer0.isIdentifierStartChar('\'');
      xPathLexer0.whitespace();
      xPathLexer1.mod();
      xPathLexer1.getPreviousToken();
      xPathLexer1.getXPath();
      xPathLexer1.colon();
      xPathLexer0.operatorName();
      xPathLexer1.consume();
      xPathLexer0.consume((-1));
      assertEquals(" dxew0M9+o", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3586832848807449
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("IB{h");
      xPathLexer0.or();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("I", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("IB{h");
      Token token1 = xPathLexer1.doubleColon();
      assertEquals("IB", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer1.colon();
      xPathLexer1.or();
      Token token2 = xPathLexer0.not();
      assertEquals("B", token2.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("h", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token4 = xPathLexer2.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer("IB{h");
      xPathLexer3.consume();
      xPathLexer3.consume();
      xPathLexer0.currentPosition();
      Token token6 = xPathLexer3.slashes();
      assertEquals("{", token6.getTokenText());
      
      xPathLexer3.getPreviousToken();
      Token token7 = xPathLexer2.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("{", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      xPathLexer1.leftParen();
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("h", token9.getTokenText());
      
      xPathLexer2.getPreviousToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('~');
      assertFalse(boolean0);
      
      Token token10 = xPathLexer2.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer3.doubleColon();
      Token token11 = xPathLexer3.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer1.doubleColon();
      assertEquals(19, token12.getTokenType());
  }
}
