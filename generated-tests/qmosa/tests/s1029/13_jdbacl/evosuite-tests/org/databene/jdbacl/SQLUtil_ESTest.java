/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:45:12 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbc.JdbcSQLException;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.SimpleResultSet;
import org.h2.value.Value;
import org.h2.value.ValueArray;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "c013800d-00d7-c025-4809-000a0a411200";
      stringArray0[1] = "F`sf)c~<~*IX#?v";
      stringArray0[2] = "SELECT * FROM ";
      stringArray0[3] = "";
      stringArray0[4] = "Illegal column type format: ";
      stringArray0[5] = "drop table";
      stringArray0[6] = "Q'/;3',TyJsCs";
      stringArray0[7] = "`lWJ7'f";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "drop index";
      stringArray0[1] = "drop index";
      stringArray0[2] = "drop index";
      stringArray0[3] = "drop index";
      SQLUtil.innerJoin("drop index", stringArray0, "drop index", "drop index", stringArray0);
      String string0 = "]xWbloWDE;Erkb";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("drop index", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.substituteMarkers("9 sa{", "9 sa{", "9 sa{");
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("f K'pW+", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "WSBvBD;'n(]fEgD";
      stringArray0[1] = "xCBsg7R`*,^";
      stringArray0[2] = "SQL type for this field is not yet supported.";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '-';
      charArray0[2] = ']';
      charArray0[3] = 'q';
      charArray0[4] = '@';
      stringBuilder0.append(charArray0);
      int int0 = (-2031);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2031), (CharSequence) "WSBvBD;'n(]fEgD = 'WSBvBD;'n(]fEgD' AND xCBsg7R`*,^ = 'xCBsg7R`*,^' AND SQL type for this field is not yet supported. = 'SQL type for this field is not yet supported.'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2031
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.removeComments("u*");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals(".", string0);
      
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.mutatesStructure("Got socket");
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SQLJ", compositeDBObject0);
      tableContainer0.getSchema();
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.isDML("PAGE");
      SQLUtil.isProcedureCall("PAGE");
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery(",vQ&ytX;Ou(+x4");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",vQ&ytX;Ou(+x4";
      stringArray0[1] = ",vQ&ytX;Ou(+x4";
      String string0 = SQLUtil.innerJoin(",vQ&ytX;Ou(+x4", stringArray0, ",vQ&ytX;Ou(+x4", ",vQ&ytX;Ou(+x4", stringArray0);
      assertEquals(",vQ&ytX;Ou(+x4 as ,vQ&ytX;Ou(+x4 on ,vQ&ytX;Ou(+x4.,vQ&ytX;Ou(+x4 = ,vQ&ytX;Ou(+x4.,vQ&ytX;Ou(+x4 and ,vQ&ytX;Ou(+x4.,vQ&ytX;Ou(+x4 = ,vQ&ytX;Ou(+x4.,vQ&ytX;Ou(+x4", string0);
      
      String string1 = SQLUtil.join((String) null, ", NULL, '", stringArray0, ",vQ&ytX;Ou(+x4", ",vQ&ytX;Ou(+x4", stringArray0);
      assertEquals(",vQ&ytX;Ou(+x4 as ,vQ&ytX;Ou(+x4 on , NULL, '.,vQ&ytX;Ou(+x4 = ,vQ&ytX;Ou(+x4.,vQ&ytX;Ou(+x4 and , NULL, '.,vQ&ytX;Ou(+x4 = ,vQ&ytX;Ou(+x4.,vQ&ytX;Ou(+x4", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("8>zYb");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PERMISSION";
      stringArray0[1] = "yJ(P`f+}/e~\"iY\"{ -G";
      String string0 = SQLUtil.leftJoin("PERMISSION", stringArray0, "yJ(P`f+}/e~\"iY\"{ -G", "8>zYb", stringArray0);
      assertEquals("left join yJ(P`f+}/e~\"iY\"{ -G as 8>zYb on PERMISSION.PERMISSION = 8>zYb.PERMISSION and PERMISSION.yJ(P`f+}/e~\"iY\"{ -G = 8>zYb.yJ(P`f+}/e~\"iY\"{ -G", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("org.h2.store.WriterThread", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(2, 5);
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '0';
      charArray0[2] = 'L';
      charArray0[3] = 't';
      charArray0[4] = 'Z';
      charArray0[5] = 'C';
      charArray0[6] = '3';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0, 2, 5);
      StringBuilder stringBuilder4 = SQLUtil.addRequiredCondition("", stringBuilder3);
      SQLUtil.addOptionalCondition("org.h2.store.WriterThread", stringBuilder4);
      assertEquals("or5g.h2.store.WriterThreadLtZC3 and  or org.h2.store.WriterThread", stringBuilder4.toString());
      assertEquals("or5g.h2.store.WriterThreadLtZC3 and  or org.h2.store.WriterThread", stringBuilder0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SQLUtil.renderValue("Got socke");
      assertEquals("'Got socke'", string0);
      
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SQLJ", compositeDBObject0);
      tableContainer0.getSchema();
      String string1 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("SQLJ", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0679759122939765
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      SQLUtil.substituteMarkers("", "", (Object) null);
      String string1 = "";
      SQLUtil.mutatesDataOrStructure("");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        linkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SQLJ", compositeDBObject0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SQLJ";
      String string0 = SQLUtil.renderColumnListWithTableName("SQLJ", stringArray0);
      assertEquals("SQLJ.SQLJ", string0);
      
      String string1 = SQLUtil.normalize("i;6gJxj+e1z2HP;5k~>", true);
      assertEquals("i ; 6gJxj + e1z2HP ; 5k ~ >", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4184836619456567
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = ":3Yz|vGe6<P3+PI>[";
      SQLUtil.isDDL(":3Yz|vGe6<P3+PI>[");
      SQLUtil.isProcedureCall("");
      SQLUtil.mutatesDataOrStructure("create materialized view");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        linkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SQLJ", compositeDBObject0);
      SQLUtil.parseColumnTypeAndSize("java.lang.Object@7a9a5c55");
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("org.apache.derby.impl.sql.compile.ConcatenationOperatorNode", stringArray0, "create unique index", "got ", stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("GrSTS", false, "SQLJ", "SQLJ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      int int0 = (-87498158);
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-87498158));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -87498158
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9697933084195831
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "aw--8x+}>*Q";
      stringArray0[2] = "P}6K<oatnMTT_F_=k";
      String string0 = SQLUtil.renderColumnListWithTableName("aw--8x+}>*Q", stringArray0);
      assertEquals("aw--8x+}>*Q.null, aw--8x+}>*Q.aw--8x+}>*Q, aw--8x+}>*Q.P}6K<oatnMTT_F_=k", string0);
      
      String string1 = SQLUtil.normalize("aw--8x+}>*Q", true);
      assertEquals("aw", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6870920273799715
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SQLJ", compositeDBObject0);
      String[] stringArray0 = new String[20];
      stringArray0[0] = "SQLJ";
      String string0 = SQLUtil.renderColumnListWithTableName("SQLJ", stringArray0);
      assertEquals("SQLJ.SQLJ, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null, SQLJ.null", string0);
      
      String string1 = SQLUtil.normalize("java.lang.Object@40238490", false);
      assertEquals("java.lang.Object @ 40238490", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.48509409130221154
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("org.h2.store.WriterThread", stringBuilder0);
      stringBuilder1.insert(2, 5);
      assertEquals("or5g.h2.store.WriterThread", stringBuilder1.toString());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '0';
      charArray0[2] = 'L';
      charArray0[3] = 't';
      charArray0[4] = 'Z';
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.h2.store.WriterThread";
      stringArray0[1] = "";
      stringArray0[2] = "";
      SQLUtil.renderColumnListWithTableName("alter session", stringArray0);
      String string0 = SQLUtil.normalize("~u-x/6{-X}w]O", true);
      assertEquals("~ u - x / 6 { - X } w ] O", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("CONSTRAINT  ", stringBuilder1.toString());
      
      SQLUtil.isDDL("'DV*\"$.P");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec1);
      boolean boolean0 = SQLUtil.isDML("t/BX-CUS");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1699929969668565
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.isProcedureCall("UuDa\";pMWi");
      StringBuilder stringBuilder0 = new StringBuilder("+T5N0!}9->uk(");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("~_#(#", stringBuilder0);
      stringBuilder1.reverse();
      assertEquals("#(#_~ dna (ku>-9}!0N5T+", stringBuilder1.toString());
      
      SQLUtil.normalize("~_#(#", false);
      boolean boolean0 = SQLUtil.isQuery("1]{rij2TqXG8&%Cik");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "u*");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xaKj\"M");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec");
      boolean boolean0 = SQLUtil.isDML("org.h2.value.ValueStringFixed");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("org.h2.value.ValueStringFixed");
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean2 = SQLUtil.isDDL("org.h2.value.ValueStringFixed");
      assertTrue(boolean2 == boolean1);
      
      Object object0 = new Object();
      Character character0 = new Character('y');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'y'", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      boolean boolean0 = SQLUtil.isDML("create table");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "create table";
      stringArray0[2] = "";
      stringArray0[3] = "alter session";
      stringArray0[4] = "";
      stringArray0[5] = "alter session";
      stringArray0[6] = "create table";
      stringArray0[7] = "alter session";
      stringArray0[8] = "create table";
      String string0 = SQLUtil.renderColumnListWithTableName("alter session", stringArray0);
      assertEquals("alter session., alter session.create table, alter session., alter session.alter session, alter session., alter session.alter session, alter session.create table, alter session.alter session, alter session.create table", string0);
      
      String string1 = SQLUtil.normalize("drop tablecreate materialized view", false);
      assertEquals("drop tablecreate materialized view", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string2);
      assertEquals("table ", string2);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("M`}]P`%h");
      assertTrue(boolean2.equals((Object)boolean1));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "escape", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("escape", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "org.hsqldb.lib.AsciiStringInputStream", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(1751);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT org.hsqldb.lib.AsciiStringInputStream ", stringBuilder0.toString());
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("escape");
      String string0 = "org.databene.jdbacl.SQLUtil";
      SQLUtil.addRequiredCondition("org.databene.jdbacl.SQLUtil", stringBuilder0);
      stringBuilder0.reverse();
      SQLUtil.normalize("[RB%+2z%hAY\"R9qS", false);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
      
      String string1 = SQLUtil.normalize("alter index~q/v]um7", false);
      assertEquals("alter index ~ q / v ] um7", string1);
      
      SQLUtil.typeAndName((DBObject) null);
      Boolean boolean0 = SQLUtil.mutatesStructure("()");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2);
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '0';
      charArray0[2] = 'L';
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("*lp|&9*bbKGa*+qQ", stringBuilder0);
      stringBuilder1.reverse();
      assertEquals("Qq+*aGKbb*9&|pl*", stringBuilder1.toString());
      
      SQLUtil.normalize("", true);
      boolean boolean0 = SQLUtil.isQuery("(");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      String string1 = SQLUtil.normalize("()", false);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9701814400260846
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      SQLUtil.isProcedureCall("N!M;G61JgiwQ");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDML("truncate");
      SQLUtil.removeComments("N!M;G61JgiwQ");
      SQLUtil.isDDL("()");
      Object object0 = new Object();
      String string1 = SQLUtil.renderValue(object0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9713844327502852
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "aw--8x+}>*Q";
      stringArray0[2] = "P}6K<oatnMTT_F_=k";
      SQLUtil.renderColumnListWithTableName("aw--8x+}>*Q", stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("93C(3&WH", stringArray0);
      assertEquals("93C(3&WH.null, 93C(3&WH.aw--8x+}>*Q, 93C(3&WH.P}6K<oatnMTT_F_=k", string0);
      
      String string1 = SQLUtil.normalize("aw--8x+}>*Q.null, aw--8x+}>*Q.aw--8x+}>*Q, aw--8x+}>*Q.P}6K<oatnMTT_F_=k", false);
      assertEquals("aw -- 8x + } > * Q.null, aw -- 8x + } > * Q.aw -- 8x + } > * Q, aw -- 8x + } > * Q.P } 6K < oatnMTT_F_ = k", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog();
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.typeAndName(dBCatalog0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      try { 
        simpleResultSet0.getCharacterStream("catalog null");
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Feature not supported: null [50100-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.069202465820362
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.removeComments("");
      SQLUtil.isDML("XFCxzIoK");
      SQLUtil.isProcedureCall("XFCxzIoK");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "XFCxzIoK";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      SQLUtil.normalize("alter table", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      SQLUtil.mutatesStructure("mkL)7v/*");
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("drop index:3yz|vge6<p3+pi>[");
      boolean boolean0 = SQLUtil.isDML("");
      boolean boolean1 = SQLUtil.isProcedureCall("");
      assertFalse(boolean1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "create table";
      stringArray0[1] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  FOREIGN KEY (create table, ) REFERENCES drop index:3yz|vge6<p3+pi>[(create table, )", string0);
      
      SQLUtil.removeComments("create table");
      boolean boolean2 = SQLUtil.isDDL("#KdcTNlIn6n{9");
      assertTrue(boolean2 == boolean0);
      
      Object object0 = new Object();
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("()");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop index", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(1751);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"drop index\" ", stringBuilder0.toString());
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3046193848206715
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.isProcedureCall("UuDa\";pMWi");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "+T5N0!}9->uk(", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+T5N0!}9->uk(", defaultDBTable0, 1783, "drop materialized view:3yz|vge6<p3+pi>[");
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1682234916146403
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "aw--8x+}>*Q";
      stringArray0[2] = "P}6K<oatnMTT_F_=k";
      SQLUtil.renderColumnListWithTableName("aw--8x+}>*Q", stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("93C(3&WH", stringArray0);
      assertEquals("93C(3&WH.null, 93C(3&WH.aw--8x+}>*Q, 93C(3&WH.P}6K<oatnMTT_F_=k", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-2149), "exec:3yz|vge6(p3+pd>[");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Qr:rKwty^W+rSv7euA", (DBTable) null, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Qr:rKwty^W+rSv7euA EXEC:3YZ|VGE6(P3+PD>[(3) NULL", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      SQLUtil.normalize("org.h2.store.WriterThread", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.h2.store.WriterThread";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "org.h2.store.WriterThread";
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = "org.h2.store.WriterThread";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
      
      String string1 = SQLUtil.normalize("%z'z3S", false);
      assertEquals("% z 'z3S'", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
      
      Value[] valueArray0 = new Value[0];
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      Reader reader0 = valueArray1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("()");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Fk;}ay/KwI", true, (String[]) null);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT Fk;}ay/KwI UNIQUE ()", string0);
      
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT Fk;}ay/KwI ", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      String string1 = SQLUtil.normalize("()", true);
      assertTrue(string1.equals((Object)string0));
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("x%KO96;");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Zs7ChIh$5uRYFl=", defaultDBTable1, (DBDataType) null, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("Zs7ChIh$5uRYFl=, Zs7ChIh$5uRYFl=, Zs7ChIh$5uRYFl=", string2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("|");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "aw--8x+}>*Q";
      SQLUtil.renderColumnListWithTableName("|", stringArray0);
      SQLUtil.renderColumnListWithTableName("93C(3&WH", stringArray0);
      String string0 = ")`G;bT7aD(~Z#nG6/";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(")`G;bT7aD(~Z#nG6/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: )`G;bT7aD(~Z#nG6/
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4913060682614458
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("@_8Gh", compositeDBObject0);
      SQLUtil.normalize("org.h2.store.WriterThread", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(5);
      String[] stringArray0 = new String[5];
      tableContainer0.setName("@_8Gh");
      stringArray0[0] = "@_8Gh";
      stringArray0[1] = "alter materialized view";
      stringArray0[2] = "org.h2.store.WriterThread";
      stringArray0[3] = "=U";
      stringArray0[4] = "@_8Gh";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("=U", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(tableContainer0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      dBForeignKeyConstraint0.columnReferencedBy("=U");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-53);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6162888078799063
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.normalize("u2U+&?vtsAZ-cQ gS|", true);
      SQLUtil.mutatesDataOrStructure("u2U + & ? vtsAZ - cQ gS |");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("u2U + & ? vtsAZ - cQ gS |", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u2U+&?vtsAZ-cQ gS|", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.isQuery("getMaxDynamicResults");
      SQLUtil.removeComments("D@z.F [&LiKq#");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getMaxDynamicResults");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcDataSource jdbcDataSource1 = new JdbcDataSource();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)39;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis((byte)39);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.33422114621338295
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraints(true);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Fk;}a/KwI", true, (String[]) null);
      String string0 = SQLUtil.normalize("Fk;}a/KwI", true);
      assertEquals("Fk ; } a / KwI", string0);
      
      boolean boolean0 = SQLUtil.isQuery("selectexecute");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("*?", true);
      assertEquals("* ?", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*?");
      Value[] valueArray0 = new Value[0];
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      Reader reader0 = valueArray1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      DBDataType dBDataType0 = DBDataType.getInstance(9, "* ?");
      Integer integer0 = new Integer(3);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.ABORT;
      Integer.remainderUnsigned(13, (-1983406621));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("IohU7nM{X", defaultDBTable0, dBDataType0, (Integer) 9, integer1);
      SQLUtil.renderColumn(defaultDBColumn1);
      TableContainer tableContainer0 = new TableContainer("SH@,Yx$;S|kO.7vm2i", defaultDBTable0);
      tableContainer0.getTable("SH@,Yx$;S|kO.7vm2i");
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("IohU7nM{X", (DBTable) null, dBDataType0, integer2, (Integer) 12);
      String string1 = SQLUtil.renderColumn(defaultDBColumn2);
      assertEquals("IohU7nM{X * ?(1,12) NULL", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(1462, "X;6.4I1~[c[]/z");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("j[VqK]oJQ*-Ks:f^", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.setDefaultValue("[Kfkb");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("j[VqK]oJQ*-Ks:f^ X;6.4I1~[C[]/Z(2,2) DEFAULT [Kfkb NOT NULL", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      System.setCurrentTimeMillis(17L);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9080368345090652
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("execute|");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "aw--8x+}>*Q";
      SQLUtil.isQuery("getMaxDynamicResults");
      SQLUtil.isProcedureCall("bipH?@6?HgtSBf2-c");
      SQLUtil.removeComments("execute|");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",K}XVjhuo.n-2T\"of5");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      assertEquals(154, jdbcDataSource0.getTraceId());
      
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      dynamicByteArrayOutputStream0.setPosition((-1208));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      int int0 = (-268);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select into", defaultDBTable0, (-268), "j&0lO&V^0J*&ckIDj");
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setFractionDigits(integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("select into, select into", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      int int0 = (-268);
      String string0 = "j&0lO&V^0J*&ckIDj";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select into", defaultDBTable0, (-268), "j&0lO&V^0J*&ckIDj");
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      SQLUtil.mutatesDataOrStructure("select into");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("select into", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBCatalog0.setName(" an= ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "execute");
      DBSchema dBSchema0 = new DBSchema("|ldH", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("|ldH");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|ldH";
      stringArray0[1] = " an= ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impE.service.monitor.T!pService", false, stringArray0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.ABORT;
      SQLUtil.normalize("?9AxY~aVg/*", false);
      Random.setNextRandom((-3374));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBCatalog0.setName(" an= ");
      DBSchema dBSchema0 = new DBSchema("|ldH", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("|ldH");
      String[] stringArray0 = new String[12];
      stringArray0[0] = "|ldH";
      stringArray0[1] = " an= ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impE.service.monitor.T!pService", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("|ldH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(572);
  }
}
