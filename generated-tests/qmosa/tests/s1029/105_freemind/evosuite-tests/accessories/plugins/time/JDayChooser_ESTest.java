/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:33:34 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.NodeDropListener;
import freemind.controller.NodeMouseMotionListener;
import freemind.main.FreeMindApplet;
import freemind.modes.Mode;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowsePopupMenu;
import freemind.modes.filemode.FileController;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.view.mindmapview.attributeview.AttributePopupMenu;
import java.applet.Applet;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Label;
import java.awt.SystemColor;
import java.awt.datatransfer.FlavorMap;
import java.awt.datatransfer.SystemFlavorMap;
import java.awt.dnd.DropTarget;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;
import javax.help.HelpSet;
import javax.help.JHelpGlossaryNavigator;
import javax.help.JHelpTOCNavigator;
import javax.help.plaf.basic.BasicGlossaryNavigatorUI;
import javax.help.plaf.basic.BasicTOCNavigatorUI;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JDialog;
import javax.swing.JInternalFrame;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.Border;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicSplitPaneUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.Position;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.OutputProperties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.w3c.dom.Document;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDay();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 14, true);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setEnabled(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "QC9a";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.contains((-3387), (-3387));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3387));
      jDayChooser0.resetKeyboardActions();
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(jDayChooser0);
      focusEvent0.setSource("day");
      jDayChooser0.getComponentListeners();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getHierarchyListeners();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.forLanguageTag("day");
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setAlignmentY((-1049.811F));
      locale0.getDisplayScript((Locale) null);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDecorationBordersVisible(false);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jPanel0.isPaintingTile();
      int int0 = (-1682);
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, (-1682), false, jDayChooser0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setDay((-1682));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Properties properties0 = new Properties();
      properties0.put("", focusEvent0);
      OutputProperties outputProperties0 = new OutputProperties(properties0);
      outputProperties0.getOwnerDocument();
      // Undeclared exception!
      try { 
        outputProperties0.error("day");
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find resource for bundle org.apache.xalan.res.XSLTErrorResources, key day
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setInheritsPopupMenu(true);
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      MouseEvent mouseEvent0 = new MouseEvent(jDayChooser0, 0, (-1795L), 0, 0, 0, 0, true);
      mouseEvent0.paramString();
      jDayChooser0.getClientProperty(mouseEvent0);
      InputEvent.getModifiersExText(0);
      JButton jButton0 = new JButton();
      mouseEvent0.setSource(jButton0);
      mouseEvent0.setSource((Object) null);
      jDayChooser0.dispatchEvent(mouseEvent0);
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.addListeners(0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getDay();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.initDecorations();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.init();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = null;
      try {
        pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, pipedOutputStream0, 231, (-1559));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocusCycleRoot(true);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      // Undeclared exception!
      try { 
        jDayChooser_DecoratorButton0.getFontMetrics((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Timestamp timestamp0 = new Timestamp(1L);
      jDayChooser0.defaultMaxSelectableDate = (java.util.Date) timestamp0;
      timestamp0.clone();
      FlowLayout flowLayout0 = new FlowLayout(1954, (-3321), (-3321));
      flowLayout0.removeLayoutComponent(jDayChooser0);
      flowLayout0.setHgap(3);
      flowLayout0.setVgap((-3321));
      timestamp0.clone();
      flowLayout0.addLayoutComponent("day", jDayChooser0);
      flowLayout0.setAlignOnBaseline(true);
      flowLayout0.minimumLayoutSize(jDayChooser0);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setLayout(flowLayout0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setEnabled(true);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getDayPanel();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(73);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser_DecoratorButton0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser_DecoratorButton0.setMultiClickThreshhold(1803L);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getMinSelectableDate();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      jDayChooser0.setBackground(systemColor0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.initDecorations();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HelpSet helpSet0 = new HelpSet(classLoader0);
      JHelpGlossaryNavigator jHelpGlossaryNavigator0 = new JHelpGlossaryNavigator(helpSet0, "day", "28");
      BasicGlossaryNavigatorUI basicGlossaryNavigatorUI0 = new BasicGlossaryNavigatorUI(jHelpGlossaryNavigator0);
      jDayChooser0.removePropertyChangeListener("eBRW5Sd,PsjFl", (PropertyChangeListener) basicGlossaryNavigatorUI0);
      KeyEvent keyEvent0 = new KeyEvent(defaultListCellRenderer_UIResource0, (-302), 0L, (-302), 427, 'w');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isValidateRoot();
      int int0 = 1339;
      jDayChooser0.setMonth(1339);
      jDayChooser0.getMinSelectableDate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getTextSelectionColor();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      int int1 = 0;
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setInheritsPopupMenu(true);
      MouseEvent mouseEvent0 = new MouseEvent(jDayChooser0, 0, (-1795L), 0, 0, 0, 0, true);
      mouseEvent0.paramString();
      jDayChooser0.getClientProperty(mouseEvent0);
      InputEvent.getModifiersExText(0);
      JButton jButton0 = new JButton();
      mouseEvent0.setSource(jButton0);
      mouseEvent0.setSource((Object) null);
      jDayChooser0.dispatchEvent(mouseEvent0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.addListeners(0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(90, color0.getGreen());
      
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.initDecorations();
      boolean boolean1 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean1 == boolean0);
      
      jDayChooser0.init();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser0.setAlwaysFireDayProperty(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 29, 3330L, 55295, 2, 'U');
      keyEvent0.setKeyChar('<');
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      int int0 = (-1880);
      jDayChooser0.setDebugGraphicsOptions((-1880));
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      JMapViewer jMapViewer0 = new JMapViewer();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.cyan;
      jDayChooser0.decorationBackgroundColor = color0;
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      NamedProfileCache.getDefaultCache();
      jDayChooser0.isDecorationBordersVisible();
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 3, "day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8243648409235025
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getTime();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.updateUI();
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(0, color0.getGreen());
      
      jDayChooser0.setMaxDayCharacters(1435);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8072459411997186
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.updateUI();
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      Color.getColor("ieFx6QL0sAP", 1221);
      jDayChooser0.setSundayForeground(systemColor0);
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      basicSplitPaneUI0.getNonContinuousLayoutDivider();
      // Undeclared exception!
      try { 
        jDayChooser0.add((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Color color0 = Color.cyan;
      jDayChooser0.getRegisteredKeyStrokes();
      SystemColor systemColor0 = SystemColor.window;
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setDecorationBackgroundColor(systemColor0);
      NamedProfileCache.getDefaultCache();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser1.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getTime();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.updateUI();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setFocus();
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser1.setWeekdayForeground(color0);
      int int0 = 46;
      long long0 = 3229L;
      int int1 = (-305);
      int int2 = (-1946);
      char char0 = '_';
      MenuElement[] menuElementArray0 = new MenuElement[8];
      MindMapMode mindMapMode0 = new MindMapMode();
      FileController fileController0 = null;
      try {
        fileController0 = new FileController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6618403890648796
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate(0, 649, (-287), 0, 0, 169);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, stack0);
      jDayChooser0.getComponentPopupMenu();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      Color color0 = jTable0.getGridColor();
      jDayChooser0.setBackground(color0);
      MockDate mockDate0 = new MockDate(0, 649, (-287), 0, 0, 169);
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setYear(1306);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.forLanguageTag("day");
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setAlignmentY((-1049.811F));
      locale0.getDisplayScript((Locale) null);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      Color.getColor("pR8AM_--", (Color) systemColor0);
      SystemColor systemColor1 = SystemColor.window;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      NamedProfileCache.getDefaultCache();
      jDayChooser0.setMaxDayCharacters(1534);
      Integer integer0 = StrokingTextPainter.ADJUST_SPACING;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 1534, "");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.673761264516174
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getLocale();
      jDayChooser0.setMaxDayCharacters((-289));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7111908826108433
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.cyan;
      jDayChooser0.getRegisteredKeyStrokes();
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getGraphics();
      jDayChooser1.paintAll((Graphics) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 962, (-1918L), 962, (-1343), '^');
      jDayChooser1.keyPressed(keyEvent0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      jDayChooser0.setMonth(177);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
  }
}
