/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 19:12:55 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "in epilog non whitespace content is not allowed but got ";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("in epilog non whitespace content is not allowed but got ");
      ActionExpression actionExpression0 = new ActionExpression("");
      ActionExpression actionExpression1 = actionExpression0.setOwner(xmlEntityRef0);
      String string1 = "";
      Form form0 = new Form("");
      Form form1 = form0.renderHint(actionExpression0);
      ActionExpression actionExpression2 = actionExpression1.parameter(form1);
      String string2 = "";
      ActionExpression actionExpression3 = actionExpression2.event("");
      // Undeclared exception!
      try { 
        actionExpression3.extractComponent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(form0, "http://xmlpull.org/v1/doc/features.html#validation", "sT|nNJ9v+yO", stringSelectModel0, "sT|nNJ9v+yO");
      String string1 = "6^47b6=N7im~)";
      Table table0 = null;
      try {
        table0 = new Table(select0, "6^47b6=N7im~)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = errorPage0.abbr((Object) null);
      component0._applyFormat(errorPage0);
      TableBlock tableBlock1 = new TableBlock(tableBlock0);
      tableBlock0.a();
      ElExpression elExpression0 = new ElExpression("{(mBWKB{");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "can't parse float value '";
      Table table0 = new Table(errorPage0, "can't parse float value '");
      // Undeclared exception!
      try { 
        table0.id("can't parse float value '");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ">";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(">");
      // Undeclared exception!
      try { 
        xmlEntityRef0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Form form0 = new Form("");
      Form form1 = form0.renderHint("");
      form1.addFormValidationRule("", ";H|]/3<q;B");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = "7ZC 139wwQ5o>";
      form0.getComponentName();
      // Undeclared exception!
      try { 
        form0.fileInput("p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "em";
      TextArea textArea0 = new TextArea((Component) null, "em", "em");
      FormElement formElement0 = textArea0.value("em");
      TextInput textInput0 = new TextInput(formElement0, "em", "em");
      // Undeclared exception!
      try { 
        textArea0.h4((Object) formElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Component component0 = null;
      String string0 = "[J(q73ff!F$38E$iU";
      String string1 = "KR_-g_{";
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getObjects();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        form0.passwordInput("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("u$l^>");
      dynamicSelectModel1.getTopLevelComponent();
      String string0 = "Attributes must be given in name, value pairs.";
      Checkbox checkbox0 = new Checkbox((Component) null, "u$l^>", "Attributes must be given in name, value pairs.");
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        form0.renderHint(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.getEngine();
      Table table0 = new Table(errorPage0, "ye'#l@J%");
      table0.tr();
      // Undeclared exception!
      try { 
        table0.textInput("ye'#l@J%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Hidden hidden0 = new Hidden(errorPage0, "", "~ZrgTMuc}^/$uH&RkSF");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("", hidden0.getFormElementName());
      assertEquals("~ZrgTMuc}^/$uH&RkSF", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertNotNull(hidden0);
      
      // Undeclared exception!
      try { 
        hidden0.em((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Label label0 = (Label)errorPage0.abbr((Object) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      String string0 = label0._applyFormat(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(string0);
      
      ElExpression elExpression0 = new ElExpression("{(mBWKB{");
      assertEquals("{(mBWKB{", elExpression0.getExpression());
      assertEquals("{(mBWKB{", elExpression0.toString());
      assertEquals(8, elExpression0.length());
      assertNotNull(elExpression0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      IntStream intStream0 = elExpression0.codePoints();
      assertEquals("{(mBWKB{", elExpression0.getExpression());
      assertEquals("{(mBWKB{", elExpression0.toString());
      assertEquals(8, elExpression0.length());
      assertNotNull(intStream0);
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("blockquote");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("blockquote", xmlEntityRef0.getComponentId());
      assertNotNull(xmlEntityRef0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.label();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.580747367443247
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.u();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      Hidden hidden0 = new Hidden(errorPage0, "", "~ZrgTM@c}o/$uV&RkSF");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0.isEmpty());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertNotNull(hidden0);
      
      // Undeclared exception!
      try { 
        hidden0.h2();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "UsG>rK,HJ#Sz8CZ; Xx";
      Form form0 = new Form("UsG>rK,HJ#Sz8CZ; Xx");
      assertEquals("UsG>rK,HJ#Sz8CZ; Xx", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      Radio radio0 = new Radio(form0, "UsG>rK,HJ#Sz8CZ; Xx", "UsG>rK,HJ#Sz8CZ; Xx");
      assertEquals("UsG>rK,HJ#Sz8CZ; Xx", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("UsG>rK,HJ#Sz8CZ; Xx", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("UsG>rK,HJ#Sz8CZ; Xx", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNotNull(radio0);
      
      String string1 = "<!DOCTYPE";
      // Undeclared exception!
      try { 
        radio0.p();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.530132376790023
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Any any0 = (Any)errorPage0.br();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      
      Float float0 = new Float((-1901.12236535));
      assertEquals((-1901.1223F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.attribute("pA", "pA");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertNotNull(errorPage1);
      
      Form form0 = new Form("pA");
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("pA", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pA";
      Label label0 = (Label)errorPage0.sup((Object) form0);
      assertSame(errorPage0, errorPage1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("pA", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Table table0 = new Table(errorPage1, (String) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      TableBlock tableBlock0 = table0.tbody();
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      Class<Any> class0 = Any.class;
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance((String) null, class0);
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertNotNull(xmlPullParserFactory0);
      
      MXSerializer mXSerializer0 = (MXSerializer)xmlPullParserFactory0.newSerializer();
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertEquals(0, mXSerializer0.getDepth());
      assertNull(mXSerializer0.getNamespace());
      assertNull(mXSerializer0.getName());
      assertNotNull(mXSerializer0);
      
      // Undeclared exception!
      try { 
        tableBlock0._render(mXSerializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Hidden hidden0 = new Hidden(errorPage0, "", "nbsp");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("nbsp", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertNotNull(hidden0);
      
      TableBlock tableBlock0 = new TableBlock(hidden0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("nbsp", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      Block block0 = (Block)tableBlock0.b();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("nbsp", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      Label label0 = (Label)tableBlock0.big((Object) hidden0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("nbsp", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Any any0 = (Any)errorPage0.br();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      
      Float float0 = new Float((-1901.12236535));
      assertEquals((-1901.1223F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.attribute("", "");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertNotNull(errorPage1);
      
      Form form0 = new Form("");
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertNotNull(form0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Label label0 = (Label)errorPage0.sup((Object) form0);
      assertSame(errorPage0, errorPage1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Block block0 = (Block)errorPage0.dt();
      assertSame(errorPage0, errorPage1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.buttonInput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "l yJZCUU/", "l yJZCUU/", "l yJZCUU/");
      assertEquals("l yJZCUU/", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("l yJZCUU/", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertNotNull(dateInput0);
      
      Checkbox checkbox0 = new Checkbox(dateInput0, "dateInputError", "gRn&yQo^O_!CG$Ok#IS");
      assertEquals("l yJZCUU/", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("l yJZCUU/", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("dateInputError", checkbox0.getFormElementName());
      assertEquals("gRn&yQo^O_!CG$Ok#IS", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      Form form0 = new Form("l yJZCUU/");
      assertFalse(form0._isBuilt());
      assertEquals("l yJZCUU/", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      Form form1 = form0.addFormValidationRule("dateInputError", "gRn&yQo^O_!CG$Ok#IS");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(form0._isBuilt());
      assertEquals("l yJZCUU/", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("l yJZCUU/", form1.getComponentId());
      assertNotNull(form1);
      
      // Undeclared exception!
      try { 
        form1.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6723516979942703
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Any any0 = (Any)errorPage0.br();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      
      Float float0 = new Float((-1901.12236535));
      assertEquals((-1901.1223F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.attribute("pA", "pA");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertNotNull(errorPage1);
      
      Form form0 = new Form("pA");
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("pA", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      TextInput textInput0 = new TextInput(errorPage1, "pA", "link");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertEquals("pA", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("link", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("input", textInput0.defaultTagName());
      assertNotNull(textInput0);
      
      // Undeclared exception!
      try { 
        textInput0.get("pA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'pA'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Any any0 = (Any)errorPage0.br();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      
      Table table0 = new Table(any0, "mN&h^$i]");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("mN&h^$i]", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("mN&h^$i]");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("mN&h^$i]", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("mN&h^$i]", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertNotNull(table1);
      
      Table table2 = table0.id("li");
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("li", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("li", table2.getComponentId());
      assertNotNull(table2);
      
      TableBlock tableBlock0 = table1.tfoot();
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("li", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("li", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      Block block0 = (Block)tableBlock0.h5();
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("li", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("li", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      String string0 = "]]>";
      Radio radio0 = new Radio(errorPage0, "lv!'&G^I`K*I<32", "]]>");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("]]>", radio0.getComponentId());
      assertEquals("lv!'&G^I`K*I<32", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      assertNotNull(radio0);
      
      Label label0 = new Label(errorPage0, radio0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("]]>", radio0.getComponentId());
      assertEquals("lv!'&G^I`K*I<32", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      TextArea textArea0 = new TextArea(label0, "legend", "can't parse float value '");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("]]>", radio0.getComponentId());
      assertEquals("lv!'&G^I`K*I<32", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("can't parse float value '", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("legend", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertNotNull(textArea0);
      
      Label label1 = (Label)table0.strike((Object) textArea0);
      assertFalse(label1.equals((Object)label0));
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("li", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("]]>", radio0.getComponentId());
      assertEquals("lv!'&G^I`K*I<32", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("can't parse float value '", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("legend", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertNotNull(label1);
      
      TextArea textArea1 = (TextArea)textArea0.value("li");
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      assertSame(textArea0, textArea1);
      assertSame(textArea1, textArea0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("]]>", radio0.getComponentId());
      assertEquals("lv!'&G^I`K*I<32", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("can't parse float value '", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("legend", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea1.isValid());
      assertEquals("can't parse float value '", textArea1.getComponentId());
      assertFalse(textArea1._isGeneratedId());
      assertEquals("textarea", textArea1.defaultTagName());
      assertEquals("legend", textArea1.getFormElementName());
      assertTrue(textArea1.isEmpty());
      assertNotNull(textArea1);
      
      // Undeclared exception!
      try { 
        textArea1.placeholder("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.800852123257435
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.u();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      Hidden hidden0 = new Hidden(errorPage0, "", "~ZrgTM@c}o/$uV&RkSF");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertNotNull(hidden0);
      
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      assertNull(actionExpression0.getExpression());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getActionExpression());
      assertNotNull(actionExpression0);
      
      Form form0 = new Form(block0, "kAR~z.=_G$-:u", actionExpression0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNull(actionExpression0.getExpression());
      assertNull(actionExpression0.toString());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getActionExpression());
      assertEquals("kAR~z.=_G$-:u", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      FileInput fileInput0 = (FileInput)form0.fileInput("~ZrgTM@c}o/$uV&RkSF");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNull(actionExpression0.getExpression());
      assertNull(actionExpression0.toString());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getActionExpression());
      assertEquals("kAR~z.=_G$-:u", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertNotNull(fileInput0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "~ZrgTM@c}o/$uV&RkSF";
      stringArray0[1] = "expected <![CDATA[ for comment start";
      stringArray0[2] = "_s~Z";
      stringArray0[3] = "kAR~z.=_G$-:u";
      stringArray0[4] = "~ZrgTM@c}o/$uV&RkSF";
      stringArray0[5] = "";
      stringArray0[6] = "~ZrgTM@c}o/$uV&RkSF";
      stringArray0[7] = "kAR~z.=_G$-:u";
      // Undeclared exception!
      try { 
        form0._buildFromSerializedString(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.components.Form", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.strike();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      String string0 = "c}n't par%e?floaR valuj '";
      Table table0 = new Table(errorPage0, "c}n't par%e?floaR valuj '");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("c}n't par%e?floaR valuj '", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.id("c}n't par%e?floaR valuj '");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("c}n't par%e?floaR valuj '", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("c}n't par%e?floaR valuj '", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertNotNull(table1);
      
      Text text0 = new Text(errorPage0, table1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("c}n't par%e?floaR valuj '", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("c}n't par%e?floaR valuj '", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertFalse(text0.isHtml());
      assertNull(text0.defaultTagName());
      assertTrue(text0._isGeneratedId());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertNotNull(text0);
      
      // Undeclared exception!
      try { 
        text0.h4((Object) table1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9251211907908183
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      Component component0 = dynamicSelectModel0.getComponent();
      assertNull(component0);
      
      String string0 = "-2p>d=S^79J";
      TextInput textInput0 = new TextInput((Component) null, "-2p>d=S^79J", "Uwsv-t|QYYJ/;|6");
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("Uwsv-t|QYYJ/;|6", textInput0.getComponentId());
      assertEquals("-2p>d=S^79J", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      assertNotNull(textInput0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(6, 6, 16, 16, 6, 677);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        textInput0.b((Object) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Form form0 = new Form("");
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      Form form1 = form0.renderHint("");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertNotNull(form1);
      
      Form form2 = form1.addFormValidationRule("", ";H|]/3<q;B");
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form2, form0);
      assertSame(form2, form1);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertEquals("wheel_components_Form", form2.getComponentId());
      assertNotNull(form2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = "7ZC 139wwQ5o>";
      // Undeclared exception!
      try { 
        form2.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      ISelectModel iSelectModel0 = null;
      String string0 = "bdo";
      Block block0 = (Block)errorPage0.cite();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      ElExpression elExpression0 = new ElExpression("bdo");
      assertEquals(3, elExpression0.length());
      assertEquals("bdo", elExpression0.toString());
      assertEquals("bdo", elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      IntStream intStream0 = elExpression0.chars();
      assertEquals(3, elExpression0.length());
      assertEquals("bdo", elExpression0.toString());
      assertEquals("bdo", elExpression0.getExpression());
      assertNotNull(intStream0);
      
      elExpression0.expression = "START_TAG";
      assertEquals("START_TAG", elExpression0.toString());
      assertEquals("START_TAG", elExpression0.getExpression());
      assertEquals(9, elExpression0.length());
      
      ElExpression elExpression1 = elExpression0.errorMessage((String) null);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("START_TAG", elExpression0.toString());
      assertEquals("START_TAG", elExpression0.getExpression());
      assertEquals(9, elExpression0.length());
      assertEquals("START_TAG", elExpression1.getExpression());
      assertEquals("START_TAG", elExpression1.toString());
      assertEquals(9, elExpression1.length());
      assertNotNull(elExpression1);
      
      String string1 = (String)elExpression1.subSequence(1, 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("START_TAG", elExpression0.toString());
      assertEquals("START_TAG", elExpression0.getExpression());
      assertEquals(9, elExpression0.length());
      assertEquals("START_TAG", elExpression1.getExpression());
      assertEquals("START_TAG", elExpression1.toString());
      assertEquals(9, elExpression1.length());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        errorPage0.radioGroup((String) null, (ISelectModel) null, elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.873694141800218
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.u();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      Hidden hidden0 = new Hidden(errorPage0, "", "~ZrgTM@c}o/$uV&RkSF");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("", hidden0.getFormElementName());
      assertNotNull(hidden0);
      
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getActionExpression());
      assertNull(actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertNotNull(actionExpression0);
      
      Form form0 = new Form(block0, "kAR~z.=_G$-:u", actionExpression0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getActionExpression());
      assertNull(actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertEquals("kAR~z.=_G$-:u", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      Table table0 = new Table(form0, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getActionExpression());
      assertNull(actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertEquals("kAR~z.=_G$-:u", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getActionExpression());
      assertNull(actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertEquals("kAR~z.=_G$-:u", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      
      TableRow tableRow0 = table1.tr();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getActionExpression());
      assertNull(actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertEquals("kAR~z.=_G$-:u", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertNotNull(tableRow0);
      
      TextInput textInput0 = (TextInput)table1.textInput("");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getActionExpression());
      assertNull(actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertEquals("kAR~z.=_G$-:u", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertNotNull(textInput0);
      
      TextInput textInput1 = new TextInput(hidden0, "BV0\"!C`leL", "link");
      assertFalse(textInput1.equals((Object)textInput0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(textInput1.isValid());
      assertTrue(textInput1.isEmpty());
      assertEquals("input", textInput1.defaultTagName());
      assertEquals("BV0\"!C`leL", textInput1.getFormElementName());
      assertFalse(textInput1._isGeneratedId());
      assertEquals("link", textInput1.getComponentId());
      assertNotNull(textInput1);
      
      // Undeclared exception!
      try { 
        textInput1.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Any any0 = (Any)errorPage0.br();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      
      Float float0 = new Float((-1901.12236535));
      assertEquals((-1901.1223F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.attribute("pA", "pA");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertNotNull(errorPage1);
      
      Form form0 = new Form("pA");
      assertFalse(form0._isGeneratedId());
      assertEquals("pA", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      String string0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pA";
      Label label0 = (Label)errorPage0.sup((Object) form0);
      assertSame(errorPage0, errorPage1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(form0._isGeneratedId());
      assertEquals("pA", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Table table0 = new Table(errorPage1, (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Label label1 = (Label)table0.h2((Object) label0);
      assertFalse(label1.equals((Object)label0));
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("pA", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertNotNull(label1);
      
      String string1 = "W?+.9GmyPKcl5";
      // Undeclared exception!
      try { 
        errorPage1.buildComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }
}
