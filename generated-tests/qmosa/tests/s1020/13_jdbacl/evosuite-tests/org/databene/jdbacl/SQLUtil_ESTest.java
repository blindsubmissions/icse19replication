/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:23:20 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbc.JdbcConnection;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.removeComments("_J-hC");
      SQLUtil.parseColumnTypeAndSize("_J-hC");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "tivK.8;";
      stringArray0[1] = "_J-hC";
      stringArray0[2] = "_J-hC";
      stringArray0[3] = "_J-hC";
      stringArray0[4] = "tivK.8;";
      SQLUtil.leftJoin("tivK.8;", stringArray0, "tivK.8;", "_J-hC", stringArray0);
      String string0 = ")llR";
      DBTable dBTable0 = null;
      // Undeclared exception!
      try { 
        DBDataType.getInstance("vr!6;?zZo2c$ A<iVu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      SQLUtil.isDML("");
      SQLUtil.renderValue("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "''";
      stringArray0[1] = "";
      stringArray0[2] = "''";
      stringArray0[3] = "''";
      stringArray0[4] = "''";
      String string1 = "W<;Xt^9KS_lj@#g[";
      stringArray0[5] = "W<;Xt^9KS_lj@#g[";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("W8!w^xpz~");
      SQLUtil.typeAndName(dBCatalog0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("W8!w^xpz~", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "W8!w^xpz~");
      SQLUtil.addOptionalCondition("acjIkIfq7{|44B9", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("A*R-)XJ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "BLOB";
      SQLUtil.removeComments("BLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("5J~},6M+4]ErT[2o:", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.execute.ExecutionContext");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutionContext";
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.ExecutionContext";
      stringArray0[2] = "org.apache.derby.iapi.sql.execute.ExecutionContext";
      stringArray0[3] = "org.apache.derby.iapi.sql.execute.ExecutionContext";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.iapi.sql.execute.ExecutionContext", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (org.apache.derby.iapi.sql.execute.ExecutionContext, org.apache.derby.iapi.sql.execute.ExecutionContext, org.apache.derby.iapi.sql.execute.ExecutionContext, org.apache.derby.iapi.sql.execute.ExecutionContext)", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      StringBuilder stringBuilder0 = new StringBuilder("u\"lR>,*-okLM");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("u\"lR>,*-okLM", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      int int0 = 1300;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(1300, "u\"lR>,*-okLM");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1300
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("x=&,Xbg5VGv)A%T)");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "x=&,Xbg5VGv)A%T)";
      String string0 = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("&", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      defaultDBTable0.setDoc((String) null);
      stringArray0[1] = null;
      defaultDBTable0.getColumns();
      String string1 = "&HE}Xn/v_5R";
      DBCatalog dBCatalog0 = new DBCatalog("&HE}Xn/v_5R");
      dBCatalog0.getSchema("x=&,Xbg5VGv)A%T)");
      defaultDBTable0.setSchema((DBSchema) null);
      stringArray0[2] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint1.setOwner(dBCatalog0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint1, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML(stringArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.normalize("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit", true);
      SQLUtil.normalize("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit", true);
      SQLUtil.isQuery("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit";
      stringArray0[1] = "org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("., ., ., ., ., ., ., ., .", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.isDDL("create table");
      String string0 = "";
      SQLUtil.removeComments("");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NestedRawReadOnlyUserTransaction";
      stringArray0[1] = "NestedRawReadOnlyUserTransaction";
      stringArray0[2] = "NestedRawReadOnlyUserTransaction";
      stringArray0[3] = "NestedRawReadOnlyUserTransaction";
      stringArray0[4] = "NestedRawReadOnlyUserTransaction";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.isDML("create table ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create table ";
      stringArray0[1] = "create table ";
      stringArray0[2] = "create table ";
      stringArray0[3] = "create table ";
      stringArray0[4] = "CASCADE";
      stringArray0[5] = "create table ";
      SQLUtil.isQuery("create table ");
      SQLUtil.normalize("E'4P(}xCbUe", false);
      SQLUtil.join("tmE^^RiN", "5J5", stringArray0, "create table ", "create table ", stringArray0);
      SQLUtil.mutatesDataOrStructure("java.lang.Double");
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getProperties();
      JdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new JdbcConnection("5J5", (Properties) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value \"5J5\" for parameter \"url\" [90008-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6434177197931799
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create table ");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "create table ";
      stringArray0[1] = "create table ";
      stringArray0[2] = "V6b-=rX*[ApTEr&H";
      stringArray0[3] = "create table ";
      stringArray0[4] = "create table ";
      stringArray0[5] = "create table ";
      stringArray0[6] = "create table ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (create table , create table , V6b-=rX*[ApTEr&H, create table , create table , create table , create table )", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create table ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create table ";
      stringArray0[1] = "create table ";
      stringArray0[2] = "create table ";
      stringArray0[3] = "create table ";
      stringArray0[4] = "CASCADE";
      stringArray0[5] = "create table ";
      boolean boolean1 = SQLUtil.isQuery("create table ");
      assertTrue(boolean1 == boolean0);
      
      String string0 = SQLUtil.normalize("E'4P(}xCbUe", false);
      assertEquals("E '4P(}xCbUe'", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8809247028741338
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "XhrVxu4;i/.33";
      stringArray0[1] = "/*";
      stringArray0[2] = "B?<P%cF";
      stringArray0[3] = " on ";
      stringArray0[5] = "org.h2.tools.TriggerAdapter";
      stringArray0[6] = "shutdown";
      stringArray0[7] = "c";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("XhrVxu4;i/.33 = 'XhrVxu4;i/.33' AND /* = '/*' AND B?<P%cF = 'B?<P%cF' AND  on  = ' on ' AND null = null AND org.h2.tools.TriggerAdapter = 'org.h2.tools.TriggerAdapter' AND shutdown = 'shutdown' AND c = 'c'", string0);
      
      String string1 = SQLUtil.normalize(" x:YJYC<aFQ$", true);
      assertEquals("x : YJYC < aFQ $", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("shutdown");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("UhcL9");
      assertNull(boolean0);
      
      String string2 = SQLUtil.join((String) null, "x : YJYC < aFQ $", stringArray0, "XhrVxu4;i/.33", "<:|dfC#", stringArray0);
      assertEquals("XhrVxu4;i/.33 as <:|dfC# on x : YJYC < aFQ $.XhrVxu4;i/.33 = <:|dfC#.XhrVxu4;i/.33 and x : YJYC < aFQ $./* = <:|dfC#./* and x : YJYC < aFQ $.B?<P%cF = <:|dfC#.B?<P%cF and x : YJYC < aFQ $. on  = <:|dfC#. on  and x : YJYC < aFQ $.null = <:|dfC#.null and x : YJYC < aFQ $.org.h2.tools.TriggerAdapter = <:|dfC#.org.h2.tools.TriggerAdapter and x : YJYC < aFQ $.shutdown = <:|dfC#.shutdown and x : YJYC < aFQ $.c = <:|dfC#.c", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "W8!w^xpz~";
      DBCatalog dBCatalog0 = new DBCatalog("W8!w^xpz~");
      SQLUtil.typeAndName(dBCatalog0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "catalog W8!w^xpz~";
      stringArray0[1] = "catalog W8!w^xpz~";
      stringArray0[2] = "catalog W8!w^xpz~";
      stringArray0[3] = "W8!w^xpz~";
      stringArray0[4] = "W8!w^xpz~";
      stringArray0[5] = "W8!w^xpz~";
      stringArray0[6] = "W8!w^xpz~";
      stringArray0[7] = "catalog W8!w^xpz~";
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = " REFERENCES ";
      stringArray1[1] = "(catalog W8!w^xpz~, catalog W8!w^xpz~, catalog W8!w^xpz~, W8!w^xpz~, W8!w^xpz~, W8!w^xpz~, W8!w^xpz~, catalog W8!w^xpz~)";
      stringArray1[2] = "";
      SQLUtil.innerJoin("catalog W8!w^xpz~", stringArray1, "q$Pw", "70", stringArray1);
      SQLUtil.mutatesDataOrStructure("alter index");
      SQLUtil.join("jizk|8u\"v5f", (String) null, stringArray1, "catalog W8!w^xpz~", "selectcreate table", stringArray0);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("W8!w^xpz~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'W8!w^xpz~'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8729484758423084
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("alter materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean1 = SQLUtil.isQuery("5aX)]3Ta");
      assertTrue(boolean1 == boolean0);
      
      String string0 = SQLUtil.normalize("oastY\"T+R", false);
      assertEquals("oastY \"T+R\"", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.normalize("setNClob(int, Reader)", false);
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.isDML("alter materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery("5aX)]3Ta");
      SQLUtil.normalize("oastY\"T+R", false);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '@';
      charArray0[2] = '6';
      charArray0[3] = 'o';
      charArray0[4] = 'R';
      mockPrintWriter0.write(charArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create materialized viewblk .g2f m");
      SQLUtil.isQuery("create materialized viewblk .g2f m");
      SQLUtil.parseColumnTypeAndSize("create materialized viewblk .g2f m");
      SQLUtil.mutatesDataOrStructure("create materialized viewblk .g2f m");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("#");
      SQLUtil.renderValue(jMXPrincipal0);
      SQLUtil.mutatesStructure("JMXPrincipal:  #");
      SQLUtil.isDML("JMXPrincipal:  #");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertcreate table");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dPX)iTX%z@cQ&T=*";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "dPX)iTX%z@cQ&T=*", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.799902779427117
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.isDML("create table ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create table ";
      SQLUtil.isQuery("select into");
      SQLUtil.normalize("Ey9z]=thBQR**^<", false);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.getSubList(13);
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create table ", "i@:(PkpFWz", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("Ey9z ] = thBQR * * ^ <");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'Ey9z ] = thBQR * * ^ <'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9836002995230935
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create materialized viewblk .g2f m");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean1 = SQLUtil.isQuery("5aX)]3Ta");
      assertTrue(boolean1 == boolean0);
      
      String string0 = SQLUtil.normalize("*:a-#N;|;mr", false);
      assertEquals("* : a - # N ; | ; mr", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.normalize("setNClob(int, eader)", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setNClob(int, eader)");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "setNClob(int, eader)";
      stringArray0[1] = "setNClob(int, eader)";
      stringArray0[2] = "dPX)iTX%z@cQ&T=*";
      stringArray0[3] = "setNClob(int, eader)";
      stringArray0[4] = "dPX)iTX%z@cQ&T=*";
      stringArray0[5] = "U%b";
      stringArray0[6] = "setNClob (int, eader)";
      stringArray0[7] = "setNClob (int, eader)";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "U%b", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "dPX)iTX%z@cQ&T=*", false, "setNClob (int, eader)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'setNClob (int, eader)' not found in table 'setNClob(int, eader)'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.isDML("insertcreate table");
      SQLUtil.isDML("insertcreate table");
      SQLUtil.isQuery("=5MBLM'&'}");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.031759218569271
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.ownerDotComponent(dBCatalog0);
      String string0 = "vyH$-w=B";
      SQLUtil.normalize("vyH$-w=B", false);
      DBSchema dBSchema0 = new DBSchema("- ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vyH $ - w = B", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vyH $ - w = B";
      stringArray0[1] = "vyH $ - w = B";
      stringArray0[2] = "43X72.U";
      stringArray0[3] = "select";
      stringArray0[4] = "";
      stringArray0[5] = "vyH $ - w = B";
      stringArray0[6] = "vyH$-w=B";
      stringArray0[7] = "43X72.U";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "43X72.U", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("null", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("", "43X72.U");
      dBUniqueConstraint0.setName("vyH $ - w = B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "null");
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      SQLUtil.typeAndName(dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "- ");
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "vyH$-w=B", 1220, 1220);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1220, end 1220, s.length() 8
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.929540036708745
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = new Boolean("TriggerOldTransitionRows");
      SQLUtil.isDDL("TriggerOldTransitionRows");
      SQLUtil.parseColumnTypeAndSize("qlter ma!erialized view");
      SQLUtil.mutatesDataOrStructure("TriggerOldTransitionRows");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery("qlter ma!erialized view");
      SQLUtil.normalize("/gV", true);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e+p\u0003U$X@um:";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.mutatesStructure("e+p\u0003U$X@um:");
      StringBuilder stringBuilder0 = new StringBuilder(40);
      SQLUtil.addOptionalCondition("e+p\u0003U$X@um:", stringBuilder0);
      assertEquals("e+p\u0003U$X@um:", stringBuilder0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9328065726143313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = SQLUtil.normalize("vyH$-w=B", false);
      assertEquals("vyH $ - w = B", string1);
      
      DBSchema dBSchema0 = new DBSchema("- ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vyH $ - w = B", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vyH $ - w = B";
      stringArray0[1] = "vyH $ - w = B";
      stringArray0[2] = "43X72.U";
      stringArray0[3] = "select";
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.getSubList(13);
      TableContainer tableContainer0 = new TableContainer("call");
      tableContainer0.getSchema();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "r45_Ruks|DMzE=";
      stringArray0[2] = "r45_Ruks|DMzE=";
      stringArray0[3] = "r45_Ruks|DMzE=";
      stringArray0[4] = "r45_Ruks|DMzE=";
      stringArray0[5] = "r45_Ruks|DMzE=";
      stringArray0[6] = "r45_Ruks|DMzE=";
      stringArray0[7] = "r45_Ruks|DMzE=";
      SQLUtil.renderColumnNames(stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("updateBigDecimal", "alter indexselect", versionNumber0);
      defaultDatabase0.getTable("?#", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 90069, "?#");
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3940660888989436
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.ownerDotComponent(dBCatalog0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.normalize("vyH$-w=B", false);
      assertEquals("vyH $ - w = B", string0);
      
      DBSchema dBSchema0 = new DBSchema("- ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vyH $ - w = B", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vyH $ - w = B";
      stringArray0[1] = "vyH $ - w = B";
      stringArray0[2] = "43X72.U";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/43X72.U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "43X72.U");
      stringArray0[3] = "select";
      stringArray0[4] = "select";
      stringArray0[5] = "vyH $ - w = B";
      stringArray0[6] = "vyH$-w=B";
      stringArray0[7] = "43X72.U";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "43X72.U", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("null", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("", "43X72.U");
      dBUniqueConstraint0.setName("vyH $ - w = B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "null");
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "select");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("CONSTRAINT \"vyH $ - w = B\" UNIQUE (vyH $ - w = B, vyH $ - w = B, 43X72.U, select, select, vyH $ - w = B, vyH$-w=B, 43X72.U)", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.ownerDotComponent(dBCatalog0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.normalize("vyH$-w=B", false);
      assertEquals("vyH $ - w = B", string0);
      
      DBSchema dBSchema0 = new DBSchema("- ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vyH $ - w = B", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[5] = "vyH $ - w = B";
      stringArray0[1] = "vyH $ - w = B";
      stringArray0[2] = "43X72.U";
      stringArray0[3] = "select";
      stringArray0[4] = "";
      stringArray0[5] = "null";
      stringArray0[6] = "vyH$-w=B";
      stringArray0[7] = "43X72.U";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "43X72.U", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("null", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      MockFile mockFile0 = new MockFile("", "43X72.U");
      dBUniqueConstraint0.setName("vyH $ - w = B");
      String string1 = SQLUtil.ownerDotComponent(dBTable0);
      assertEquals("- .vyH $ - w = B", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[6] = "/*";
      stringArray0[3] = " od ";
      StringBuilder stringBuilder0 = new StringBuilder("/*");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(" od ", stringBuilder0);
      stringBuilder1.append((Object) " od ");
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition(" od ", stringBuilder0);
      SQLUtil.addOptionalCondition(" od ", stringBuilder0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      stringBuilder2.append(0.0);
      SQLUtil.removeComments(" od ");
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("TriggerOldTransitionRows");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TriggerOldTransitionRows";
      stringArray0[1] = "TriggerOldTransitionRows";
      stringArray0[2] = "TriggerOldTransitionRows";
      SQLUtil.renderColumnNames(stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("TriggerOldTransitionRows", "(TriggerOldTransitionRows, TriggerOldTransitionRows, TriggerOldTransitionRows)", versionNumber0);
      defaultDatabase0.getTable("alter indexselect", false);
      int int0 = 90069;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(TriggerOldTransitionRows, TriggerOldTransitionRows, TriggerOldTransitionRows)", (DBTable) null, 90069, "(TriggerOldTransitionRows, TriggerOldTransitionRows, TriggerOldTransitionRows)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"TriggerOldTransitionRows\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2148896539491203
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) " on ";
      objectArray0[1] = (Object) " on ";
      objectArray0[2] = (Object) "c";
      objectArray0[3] = (Object) "c";
      objectArray0[4] = (Object) "c";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1805), "create table");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-1805));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Random.setNextRandom((-587));
      System.setCurrentTimeMillis((-587));
      String string0 = ":J6-</>u{m)?)L2E";
      TableContainer tableContainer0 = new TableContainer(":J6-</>u{m)?)L2E");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("into", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.typeAndName((DBObject) null);
      SQLUtil.mutatesStructure("TlQ+sUvbs]$");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SchemaDescriptor schemaDescriptor0 = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.addUniqueConstraint((DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create table ";
      stringArray0[1] = " on ";
      stringArray0[2] = "create table ";
      stringArray0[3] = " on ";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("create table  = 'create table ' AND  on  = ' on ' AND create table  = 'create table ' AND  on  = ' on '", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1805), "create table ");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-225663895));
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selecttriggeroldtransitionrows", defaultDBTable0, dBDataType0, integer0, integer2);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("selecttriggeroldtransitionrows CREATE TABLE (0,1) NULL", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string2);
      assertNotNull(string2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4799555205445176
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h2.optimizeOr";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("h2.optimizeOr = 'h2.optimizeOr'", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("h2.optimizeOr");
      DBDataType dBDataType0 = DBDataType.getInstance((-1805), " on ");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-1805));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C-%VI|rr wE~{#/[myf", defaultDBTable0, dBDataType0, integer0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("C-%VI|rr wE~{#/[myf  ON (0,0) NULL", string1);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("h2.optimizeOr");
      assertNull(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("C-%VI|rr wE~{#/[myf, C-%VI|rr wE~{#/[myf, null", string2);
      
      String string3 = SQLUtil.typeAndName(dBColumnArray0[0]);
      assertNotNull(string3);
      assertEquals("column C-%VI|rr wE~{#/[myf", string3);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "/*";
      DBSchema dBSchema0 = new DBSchema((String) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nhL3t;7hfy'", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("` u]AVu$q]{V", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("", "-9duO!JmVhcu<K");
      dBUniqueConstraint0.setName((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "/*");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("alter index");
      SQLUtil.addOptionalCondition("Z}4", stringBuilder0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("more than one node as root (TODO: make exception hierarchy)", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) " on ");
      SQLUtil.addOptionalCondition("2]:su2LPwCZZNB/ 8*3", stringBuilder2);
      SQLUtil.addOptionalCondition("Z}4", stringBuilder2);
      ErrorMessages errorMessages0 = new ErrorMessages();
      StringBuilder stringBuilder3 = stringBuilder1.append(1.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TableContainer tableContainer0 = new TableContainer("");
      TableContainer tableContainer1 = new TableContainer("more than one node as root (TODO: make exception hierarchy)", tableContainer0);
      tableContainer1.getSchema();
      StringReader stringReader0 = new StringReader("h!%Bxq>12hTD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "/*";
      DBSchema dBSchema0 = new DBSchema((String) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nhL3t;7hfy'", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      Integer integer0 = new Integer(10);
      Integer integer1 = RawTransaction.ABORT;
      Integer.max(10, 10);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer.compare(4, 4);
      Integer.divideUnsigned(4, (-1843297671));
      Integer integer3 = new Integer(2358);
      defaultDBTable0.getIndexes();
      DBDataType dBDataType0 = DBDataType.getInstance((-1843297671), "/*");
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, dBDataType0, integer4, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("call", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.renderColumn(defaultDBColumn1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.removeComments("` u]AVu$q]{V");
      assertEquals("` u]AVu$q]{V", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6313454208085967
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " on ");
      VersionNumber versionNumber0 = VersionNumber.valueOf("B1fO_m\"%F2en&$}yi");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("^W3a\tD@ctL7,9pkla", "c", versionNumber0);
      defaultDatabase0.getCatalog("c");
      DBSchema dBSchema0 = new DBSchema(" on ", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nhL3t;7hfy'", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("nhL3t;7hfy'", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      MockFile mockFile0 = new MockFile("as", "B1fO_m\"%F2en&$}yi");
      dBUniqueConstraint0.setName(".CjJ<J_T%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-9duO!JmVhcu<K");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "nhL3t;7hfy'");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("nhL3t;7hfy'CONSTRAINT .CjJ<J_T% ", stringBuilder0.toString());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view");
      DBDataType dBDataType0 = DBDataType.getInstance(1019, "create materialized view");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create materialized view", defaultDBTable0, dBDataType0, integer0);
      linkedList0.offer(defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.toString();
      TableContainer tableContainer0 = new TableContainer("create materialized view");
      tableContainer0.getSchema();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      dBCatalog0.getTable("create materialized view", false);
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("create materialized view", (DBTable) null, 34, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0330001999799117
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[8];
      SQLUtil.mutatesDataOrStructure("delete");
      SQLUtil.renderColumnNames(stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Zt}=$UYM", "triggeroldtransitionro", versionNumber0);
      linkedList0.clone();
      defaultDatabase0.getTable("delete", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Zt}=$UYM", (DBTable) null, 90069, "updatecreate table");
      assertEquals("column", defaultDBColumn0.getObjectType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " on ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.setName("");
      File file0 = MockFile.createTempFile("create materialized view", "insert", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("exec");
      mockPrintWriter1.append((CharSequence) "CONSTRAINT \" on \" ");
      NameSpec nameSpec2 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec2, mockPrintWriter0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      Random.setNextRandom(10);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "TriggerOldTransitionRows";
      stringArray0[2] = "";
      stringArray0[3] = "TriggerOldTransitionRows";
      stringArray0[4] = "TriggerOldTransitionRows";
      stringArray0[5] = "TriggerOldTransitionRows";
      stringArray0[6] = "";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 90069, "");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertNull(dBPrimaryKeyConstraint0.getDoc());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Character character0 = Character.valueOf('E');
      SQLUtil.renderValue(character0);
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("@I 2Y.`PHjh5BDfOm7/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '@I 2Y.`PHjh5BDfOm7/'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "updatetriggeroldtransitionrows";
      DBSchema dBSchema0 = new DBSchema((String) null);
      SQLUtil.renderColumnNames(stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "alter indexselect");
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.hsqldb.Row", "updatetriggeroldtransitionrows", versionNumber0);
      linkedList0.clone();
      defaultDatabase0.getTable("updatetriggeroldtransitionrows", false);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("J]to$D^Z", (DBTable) null, 90069, "drop materialized view(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: drop materialized view(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4042341114242607
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.normalize("ZHWo UH?VSn\"-o", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Random.setNextRandom((-2708));
      SQLUtil.normalize("ZHWo UH?VSn\"-o", true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ZHWo UH ? VSn \"-o\"", (DBTable) null, 294, "ZHWo UH ? VSn \"-o\"");
      defaultDBColumn0.isEquivalent((DBObject) null);
      defaultDBColumn0.getNotNullConstraint();
      SQLUtil.typeAndName((DBObject) null);
      defaultDBColumn0.setDefaultValue("ZHWo UH ? VSn \"-o\"");
      System.setCurrentTimeMillis(294);
      SQLUtil.parseColumnTypeAndSize("ZHWo UH?VSn\"-o");
      SQLUtil.renderColumn(defaultDBColumn0);
      Random.setNextRandom((-1675));
      SQLUtil.mutatesDataOrStructure("ZHWo UH ? VSn \"-o\"");
      System.setCurrentTimeMillis(0L);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1914787223556607
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[11];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.normalize("#TH", false);
      assertEquals("# TH", string1);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("XpFAC.\":Y");
      assertNull(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "# TH", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("# TH", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("#TH", true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , , , , ) REFERENCES select into(, , , , , , , , , , )", string2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.mutatesStructure("alter session");
      Boolean boolean0 = SQLUtil.mutatesStructure("FZ8j");
      assertFalse(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Cua9aKY%S", false, "alter session", "Cua9aKY%S");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK Cua9aKY%S", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.679204331602707
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create table ");
      boolean boolean1 = SQLUtil.isQuery("select into");
      Boolean boolean2 = SQLUtil.mutatesStructure("UPDATE");
      assertTrue(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = SQLUtil.mutatesStructure("executeorg.firebirdsql.jdbc.fbtpbmapper");
      assertTrue(boolean3.equals((Object)boolean0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7745615235372973
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "/*";
      DBSchema dBSchema0 = new DBSchema("/*");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "/*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nhL3t;7hfy'", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/*", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("` u]AVu$q]{V", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      dBUniqueConstraint0.isIdentical(dBSchema0);
      MockFile mockFile0 = new MockFile("", "-9duO!JmVhcu<K");
      SQLUtil.normalize("/*", false);
      SQLUtil.mutatesDataOrStructure("alter materialized view}wc2.cs#\"rq");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("nhL3t;7hfy'");
      assertNull(boolean0);
  }
}
