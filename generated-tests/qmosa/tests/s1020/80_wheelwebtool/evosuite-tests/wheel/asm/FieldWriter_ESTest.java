/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:06:08 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3114313374732374
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5, "v{6Zj]", "ConstantValue", "ConstantValue", "ConstantValue");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 1403, "ConstantValue", "v{6Zj]", "D$$q ", "v{6Zj]");
      fieldWriter0.getSize();
      fieldWriter1.visitAnnotation("v{6Zj]", false);
      fieldWriter1.getSize();
      Attribute attribute0 = new Attribute("v{6Zj]");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter1.put(byteVector0);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 148, "", "The list of prefixes must not be null", "", "RuntimeInvisibleAnnotations");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter0.next = fieldWriter1;
      FieldWriter fieldWriter2 = classWriter0.lastField;
      fieldWriter2.visitEnd();
      fieldWriter0.next.visitEnd();
      int int0 = fieldWriter1.getSize();
      assertEquals(24, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2201578556720203
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newFloat(1.0F);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "?(~=K", "?(~=K", "", "");
      classWriter0.lastField = fieldWriter0;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 0, "?(~=K", "rwe~0/", "rwe~0/", "?(~=K");
      fieldWriter1.getSize();
      fieldWriter0.visitAnnotation("?(~=K", false);
      fieldWriter1.getSize();
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.lastField.put(byteVector0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = (-2499);
      ClassWriter classWriter0 = new ClassWriter((-2499));
      String string0 = "The wildcard array must not be null";
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "The wildcard array must not be null", "The wildcard array must not be null", (String) null, "The wildcard array must not be null");
      fieldWriter0.getSize();
      ByteVector byteVector0 = null;
      try {
        byteVector0 = new ByteVector((-2499));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3896811919839047
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newFloat(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "'=[0)", "?(~=K", "'=[0)", "rwe~0/");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-5004), "", "", "", "");
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("'=[0)", false);
      fieldWriter1.getSize();
      Attribute attribute0 = new Attribute("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)124;
      attribute0.value = byteArray0;
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter1.next = fieldWriter0;
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter1.put(byteVector0);
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("", false);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newFloat(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "'=[0)", "?(~=K", "'=[0)", "rwe~0/");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-5004), "", "", "", "");
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("'=[0)", true);
      int int0 = fieldWriter1.getSize();
      assertEquals(30, int0);
      
      Attribute attribute0 = new Attribute("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)124;
      attribute0.value = byteArray0;
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter1.next = fieldWriter0;
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter1.next.put(byteVector0);
      byteVector0.putLong(24);
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter1.put(byteVector0);
      fieldWriter0.visitAnnotation("", true);
      int int1 = fieldWriter0.getSize();
      assertEquals(50, int1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0114042647073518
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2934), "", "D9uY9n.M)0c``K-Ng", "D9uY9n.M)0c``K-Ng", "Synthetic");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      FieldWriter fieldWriter2 = classWriter0.lastField;
      FieldWriter fieldWriter3 = classWriter0.firstField;
      fieldWriter3.visitEnd();
      fieldWriter2.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5, "v{6Zj]", "ConstantValue", "ConstantValue", "ConstantValue");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (byte) (-20), "ConstantValue", "v{6Zj]", "D$$q ", "v{6Zj]");
      fieldWriter0.getSize();
      fieldWriter1.visitAnnotation("v{6Zj]", false);
      fieldWriter1.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter1.put(byteVector0);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3667110520552042
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5116, "JBf55~.PLqg}-2e,", "", (String) null, (Object) null);
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.visitEnd();
      fieldWriter0.visitEnd();
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(8);
      ByteVector byteVector1 = byteVector0.putInt((byte) (-20));
      ByteVector byteVector2 = byteVector1.put12(5116, 1);
      byteVector2.putShort(5);
      byteVector2.put11(7, 0);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.put(byteVector2);
      fieldWriter1.getSize();
      int int0 = fieldWriter0.getSize();
      assertEquals(26, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9328735118608089
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newFloat(1.0F);
      String string0 = ">%7e$%U\\udy";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2435), "e.", string0, "K", (Object) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "!|CS`molZ|c;ml#[[2Iv", "!|CS`molZ|c;ml#[[2Iv", "", string0);
      fieldWriter1.getSize();
      int int0 = fieldWriter1.getSize();
      assertEquals(24, int0);
      
      int int1 = fieldWriter0.getSize();
      assertEquals(28, int1);
      
      ByteVector byteVector0 = new ByteVector(28);
      ByteVector byteVector1 = new ByteVector();
      Item[] itemArray0 = new Item[4];
      itemArray0[0] = item0;
      Item item1 = new Item();
      itemArray0[1] = item1;
      itemArray0[2] = item0;
      itemArray0[3] = item0;
      classWriter0.typeTable = itemArray0;
      byteVector0.put11(3, (-1710));
      byteVector0.putUTF8("[>T!vm\"?{p[8D 4A!");
      ByteVector byteVector2 = classWriter0.pool;
      fieldWriter0.put(byteVector1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = "!|CS`molZ|c;ml#[[2Iv";
      stringArray0[2] = "";
      classWriter0.visit((-2435), 2323, string0, "!|CS`molZ|c;ml#[[2Iv", "PS2pG+P#~8u*8Xi*", stringArray0);
      int int2 = fieldWriter0.getSize();
      assertEquals(22, int2);
      
      int int3 = fieldWriter1.getSize();
      assertEquals(24, int3);
  }
}
