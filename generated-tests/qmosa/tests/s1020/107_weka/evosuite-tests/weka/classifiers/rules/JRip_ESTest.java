/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:51:41 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.SGDText;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, (-2411));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      BallTree ballTree0 = new BallTree((Instances) null);
      attribute0.addRelation((Instances) null);
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2971.8066825623246);
      assertEquals(2971.8066825623246, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-783.4);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.getConsequent();
      jRip0.optimizationsTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(95);
      int int0 = 107;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      SGDText sGDText0 = new SGDText();
      sGDText0.setLambda(0.0);
      jRip0.getTechnicalInformation();
      AbstractClassifier.makeCopy(sGDText0);
      jRip0.setMinNo((-1577.0760840157777));
      // Undeclared exception!
      try { 
        jRip0.getMeasure("Xbk6a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Xbk6a not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Old rule: ";
      stringArray0[1] = "ggB|x]:VpQhy6d";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "";
      JRip.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-1960.690162093348);
      jRip0.getRevision();
      jRip0.globalInfo();
      double double0 = 1562.534;
      DenseInstance denseInstance0 = new DenseInstance(15);
      String string0 = null;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(Double.NaN, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("Class complexity | order 0         ", list0, 4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(3, jRip1.getFolds());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(jRip1.getDebug());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = 0.0;
      Utils.SMALL = 0.0;
      jRip0.getOptions();
      jRip0.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("", list1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.add("@attribute");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      DecisionTable decisionTable0 = new DecisionTable();
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 66;
      intArray0[6] = 3;
      intArray0[7] = 4;
      decisionTable0.m_decisionFeatures = intArray0;
      decisionTable0.getOptions();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      Attribute attribute0 = new Attribute("weka.classifiers.functions.neural.NeuralConnection");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      KDTree kDTree0 = new KDTree();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip0.setDebug(true);
      int int0 = (-48);
      attribute0.value((-48));
      try { 
        principalComponents0.transformedData((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertTrue(jRip0.getUsePruning());
      assertEquals("Whether pruning is performed.", string0);
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Whether pruning is performed.";
      stringArray0[1] = "!VINSL8an2K";
      stringArray0[2] = "Whether pruning is performed.";
      stringArray0[3] = "Whether pruning is performed.";
      stringArray0[4] = "Whether pruning is performed.";
      stringArray0[5] = "Whether pruning is performed.";
      stringArray0[6] = "Whether pruning is performed.";
      jRip0.setOptions(stringArray0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 79;
      intArray0[2] = 2500;
      intArray0[3] = 3283;
      intArray0[4] = 671;
      jRip0.setCheckErrorRate(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6393.906597217905, intArray0, 671);
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(jRip0, 69);
      jRip0.getTechnicalInformation();
      jRip0.getDebug();
      jRip0.listOptions();
      assertEquals(2, jRip0.getOptimizations());
      
      jRip0.setOptimizations(0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip0.getCapabilities();
      assertEquals(0, jRip0.getOptimizations());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "K;";
      stringArray0[1] = "The seed used for randomizing the data.";
      stringArray0[2] = "The seed used for randomizing the data.";
      stringArray0[3] = "=4R%J;ep,Q-EEm Q5`r";
      stringArray0[4] = "The seed used for randomizing the data.";
      stringArray0[5] = "The seed used for randomizing the data.";
      stringArray0[6] = "The seed used for randomizing the data.";
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("vQ<k");
      jRip_RipperRule0.toString(attribute0);
      jRip0.setOptions(stringArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 5.3;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 3;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 1;
      SparseInstance sparseInstance0 = new SparseInstance(5.3, doubleArray0, intArray0, (-17));
      jRip_RipperRule0.covers(sparseInstance0);
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.accu = (-2769.7815);
      jRip_NominalAntd0.value = (double) 3;
      jRip_NominalAntd0.getAccu();
      attribute0.addStringValue("The seed used for randomizing the data.");
      jRip0.getFolds();
      jRip_RipperRule0.size();
      jRip0.foldsTipText();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = new Locale("", "P-K:", "P-K:");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      protectedProperties0.getOrDefault(object0, attribute0);
      jRip0.setMinNo(507.4631983969);
      Attribute attribute1 = new Attribute("", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.getRevision();
      jRip0.toString();
      assertEquals(507.4631983969, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      jRip0.checkErrorRateTipText();
      Attribute attribute0 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.", (String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = 0.0;
      Instances instances0 = null;
      double double1 = (-3804.8);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 1, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.debugTipText();
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip0.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getCapabilities();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("weka/core/Capabilities.props");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weka/core/Capabilities.props not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-324L));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("8118", (ProtectedProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-3618));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getMinNo();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null, (-3872), (-3872));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.setConsequent(0.7);
      String string0 = jRip0.globalInfo();
      jRip_RipperRule0.setConsequent(0.25);
      jRip0.getOptimizations();
      jRip0.getCapabilities();
      int int0 = 3;
      jRip0.setOptimizations(3);
      // Undeclared exception!
      try { 
        jRip0.getMeasure(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This class implements a propositional rule learner, Repeated Incremental Pruning to Produce Error Reduction (RIPPER), which was proposed by William W. Cohen as an optimized version of IREP. 
         // 
         // The algorithm is briefly described as follows: 
         // 
         // Initialize RS = {}, and for each class from the less prevalent one to the more frequent one, DO: 
         // 
         // 1. Building stage:
         // Repeat 1.1 and 1.2 until the descrition length (DL) of the ruleset and examples is 64 bits greater than the smallest DL met so far, or there are no positive examples, or the error rate >= 50%. 
         // 
         // 1.1. Grow phase:
         // Grow one rule by greedily adding antecedents (or conditions) to the rule until the rule is perfect (i.e. 100% accurate).  The procedure tries every possible value of each attribute and selects the condition with highest information gain: p(log(p/t)-log(P/T)).
         // 
         // 1.2. Prune phase:
         // Incrementally prune each rule and allow the pruning of any final sequences of the antecedents;The pruning metric is (p-n)/(p+n) -- but it's actually 2p/(p+n) -1, so in this implementation we simply use p/(p+n) (actually (p+1)/(p+n+2), thus if p+n is 0, it's 0.5).
         // 
         // 2. Optimization stage:
         //  after generating the initial ruleset {Ri}, generate and prune two variants of each rule Ri from randomized data using procedure 1.1 and 1.2. But one variant is generated from an empty rule while the other is generated by greedily adding antecedents to the original rule. Moreover, the pruning metric used here is (TP+TN)/(P+N).Then the smallest possible DL for each variant and the original rule is computed.  The variant with the minimal DL is selected as the final representative of Ri in the ruleset.After all the rules in {Ri} have been examined and if there are still residual positives, more rules are generated based on the residual positives using Building Stage again. 
         // 3. Delete the rules from the ruleset that would increase the DL of the whole ruleset if it were in it. and add resultant ruleset to RS. 
         // ENDDO
         // 
         // Note that there seem to be 2 bugs in the original ripper program that would affect the ruleset size and accuracy slightly.  This implementation avoids these bugs and thus is a little bit different from Cohen's original implementation. Even after fixing the bugs, since the order of classes with the same frequency is not defined in ripper, there still seems to be some trivial difference between this implementation and the original ripper, especially for audiology data in UCI repository, where there are lots of classes of few instances.
         // 
         // Details please see:
         // 
         // William W. Cohen: Fast Effective Rule Induction. In: Twelfth International Conference on Machine Learning, 115-123, 1995.
         // 
         // PS.  We have compared this implementation with the original ripper implementation in aspects of accuracy, ruleset size and running time on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these aspects it seems to be quite comparable to the original ripper implementation.  However, we didn't consider memory consumption optimization in this implementation.
         // 
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.0;
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("d;R(H");
      jRip_RipperRule0.toString(attribute0);
      jRip0.setOptions(stringArray0);
      assertEquals(11, stringArray0.length);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = new SparseInstance((-17), doubleArray0, intArray0, 2);
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance0);
      jRip_NominalAntd0.copy();
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.accu;
      attribute0.addStringValue("");
      jRip0.getFolds();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip_RipperRule1.size();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      
      boolean boolean1 = jRip_NominalAntd1.covers(sparseInstance0);
      assertTrue(boolean1 == boolean0);
      
      jRip0.getTechnicalInformation();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      
      JRip.NominalAntd jRip_NominalAntd2 = jRip1.new NominalAntd(attribute0);
      double double1 = jRip_NominalAntd2.getAttrValue();
      assertEquals(Double.NaN, jRip_NominalAntd2.getCover(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd2.getAccuRate(), 0.01);
      
      String string1 = jRip1.getRevision();
      assertEquals("8118", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[1];
      AbstractClassifier.makeCopy(jRip0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      binarySparseInstance0.dataset();
      try { 
        jRip0.rulesetForOneClass((-475.4224599832192), (Instances) null, 6, 0.25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Whether pruning is performed.";
      String[] stringArray1 = jRip0.getOptions();
      assertEquals(11, stringArray1.length);
      
      jRip0.setUsePruning(true);
      String string1 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string1);
      
      long long0 = jRip0.getSeed();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JRip jRip0 = new JRip();
      Utils.SMALL = (-2545.56831);
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.checkErrorRateTipText();
      Attribute attribute0 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.", (String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Instances instances0 = null;
      double double0 = (-3804.8);
      double double1 = Double.NaN;
      jRip_NumericAntd0.getAccuRate();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 1, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.0;
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      
      Attribute attribute0 = new Attribute("d;R(H");
      String string1 = jRip_RipperRule0.toString(attribute0);
      assertFalse(jRip0.getDebug());
      assertEquals(" => d;R(H=", string1);
      
      jRip0.setOptions(stringArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = new SparseInstance((-17), doubleArray0, intArray0, 2);
      jRip_RipperRule0.covers(sparseInstance0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      JRip.NominalAntd jRip_NominalAntd2 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd1.accu;
      attribute0.addStringValue("The minimum total weight of the instances in a rule.");
      jRip0.getFolds();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      double double1 = jRip_NominalAntd1.maxInfoGain;
      assertEquals(0.0, double1, 0.01);
      
      jRip0.foldsTipText();
      jRip_NominalAntd1.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      jRip1.getTechnicalInformation();
      JRip.NominalAntd jRip_NominalAntd3 = jRip1.new NominalAntd(attribute0);
      double double2 = jRip_NominalAntd3.getAttrValue();
      assertEquals(Double.NaN, jRip_NominalAntd3.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd3.getAccuRate(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertEquals(double2, double0, 0.01);
      
      jRip0.getRevision();
      String[] stringArray1 = jRip0.getOptions();
      assertEquals(11, stringArray1.length);
      
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.309015795371127
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.0;
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      AbstractClassifier.makeCopy(jRip0);
      jRip0.setOptions((String[]) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("wc8`y>HCT%z|r7C6m", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 3;
      intArray0[6] = 4;
      intArray0[7] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1150);
      binarySparseInstance0.dataset();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-1781), 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      jRip0.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      DecisionTable decisionTable0 = new DecisionTable();
      AbstractClassifier.makeCopy(jRip0);
      decisionTable0.getOptions();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip1 = new JRip();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      int[] intArray0 = new int[3];
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, 83);
      jRip0.globalInfo();
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("PS.  We have compared this implementation with the original ripper ", list1, 5);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(83);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4433056711089143
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Locale locale0 = new Locale("", "P-K:", "P-K:");
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.foldsTipText();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      jRip0.getTechnicalInformation();
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      boolean boolean1 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean1 == boolean0);
      
      String string1 = jRip_NominalAntd0.toString();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(" = ", string1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(7);
      AbstractClassifier.makeCopy(jRip0);
      jRip0.setOptions((String[]) null);
      Attribute attribute0 = new Attribute((String) null, 706);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      try { 
        jRip0.rulesetForOneClass((-1515.94449), (Instances) null, 1896.1, 1896.1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      binarySparseInstance0.dataset();
      try { 
        jRip0.rulesetForOneClass(0.0, (Instances) null, (-1.0), 1896.1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      int[] intArray0 = new int[2];
      intArray0[0] = (-733);
      intArray0[1] = (-4019);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0L, intArray0, (-542));
      binarySparseInstance0.dataset();
      JRip jRip0 = new JRip();
      jRip0.setFolds(305);
      assertEquals(305, jRip0.getFolds());
      
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("N", (-1420));
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(" can't be loaded because ", protectedProperties0);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd1.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      jRip0.toString();
      protectedProperties1.clone();
      jRip_NominalAntd1.value = (double) 1;
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip1.foldsTipText();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      jRip_NominalAntd1.covers(binarySparseInstance0);
      jRip1.getTechnicalInformation();
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(" can't be loaded because  <= NaN", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("wc8`y>HCT%z|r7C6m", arrayList0, 640);
      Attribute attribute0 = new Attribute("JZn>.x", instances0, 3092);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Predicate<Attribute> predicate0 = Predicate.isEqual((Object) arrayList0);
      arrayList0.removeIf(predicate0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getCover();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.cover = (double) 2;
      jRip_NominalAntd0.splitData(instances0, 1904.3222107145102, 1.1683107581538152);
      assertEquals(2.0, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9652370493802305
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.0;
      jRip0.getOptions();
      jRip0.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("", list1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.add("@attribute");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      AbstractClassifier.makeCopy(jRip0);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList1, 3);
      Instances instances1 = new Instances(instances0, 1);
      jRip_NumericAntd0.splitData(instances1, 64.0, 0.0);
      ClassOrder classOrder0 = new ClassOrder();
      JRip jRip2 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip2.new RipperRule();
      jRip_RipperRule0.prune(instances1, true);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      KDTree kDTree0 = new KDTree(instances1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2413.35558), doubleArray0);
      try { 
        kDTree0.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      jRip0.getOptions();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.value = 2.0;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2572);
      Attribute attribute0 = new Attribute("\nPruning the rule ...", instances0, 151);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(1069);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.243618513741878
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nOptions specific to search method ", arrayList0, 1070);
      Instances instances1 = new Instances(instances0, (-2781));
      Attribute attribute0 = new Attribute("", (List<String>) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 1539.64587172936, 2);
      ClassOrder classOrder0 = new ClassOrder();
      jRip_NumericAntd0.getCover();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances1, 0, 3);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(70);
      jRip0.getDebug();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      jRip_NumericAntd0.covers(binarySparseInstance1);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "string";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "relational";
      stringArray0[3] = "numeric";
      stringArray0[4] = "numeric";
      stringArray0[5] = "";
      stringArray0[6] = "@end";
      jRip0.setOptions(stringArray0);
      assertEquals(1L, jRip0.getSeed());
  }
}
