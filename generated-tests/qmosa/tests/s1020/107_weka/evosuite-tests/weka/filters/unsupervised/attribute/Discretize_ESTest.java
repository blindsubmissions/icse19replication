/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:51:43 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getUseBinNumbers();
      discretize0.setDesiredWeightOfInstancesPerInterval((-4577.3789113));
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getUseEqualFrequency();
      int[] intArray0 = new int[5];
      intArray0[0] = (-2778);
      intArray0[1] = 10;
      intArray0[2] = 0;
      intArray0[3] = (-2110);
      intArray0[4] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals((-4577.3789113), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ";(";
      Discretize discretize0 = new Discretize(";(");
      discretize0.setUseEqualFrequency(false);
      String string1 = "jIzK|8U\"v5F";
      discretize0.setAttributeIndices("jIzK|8U\"v5F");
      int int0 = (-3589);
      discretize0.setBins((-3589));
      discretize0.getRevision();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1196.20936604;
      discretize0.setAttributeIndices("8964");
      discretize0.makeBinaryTipText();
      discretize0.listOptions();
      StringReader stringReader0 = new StringReader("vc76");
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '.';
      charArray0[2] = 'L';
      charArray0[3] = '=';
      charArray0[4] = 'F';
      charArray0[5] = 'z';
      charArray0[6] = 'e';
      charArray0[7] = ';';
      charArray0[8] = '0';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-3589), (-3589));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 492;
      intArray0[2] = 637;
      intArray0[3] = 699;
      intArray0[4] = 82;
      intArray0[5] = 79;
      intArray0[6] = 472;
      intArray0[7] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0, intArray0, 93);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("eym1");
      discretize0.getRevision();
      discretize0.getAttributeIndices();
      discretize0.setBins(82);
      discretize0.setDesiredWeightOfInstancesPerInterval((-725.1));
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2275247137250096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      int int0 = 743;
      discretize0.getOptions();
      discretize0.setBins(743);
      int int1 = (-148);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-148));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1144.72938352));
      int int0 = 2710;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1144.72938352);
      doubleArray0[3] = (-1144.72938352);
      doubleArray0[4] = (-1144.72938352);
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2710);
      instances1.retainAll(arrayList0);
      discretize0.setInputFormat(instances1);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2710);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("I406@Yd{on");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      discretize0.setMakeBinary(true);
      discretize0.makeBinaryTipText();
      discretize0.findNumBinsTipText();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(1588);
      boolean boolean0 = false;
      discretize0.getRevision();
      discretize0.setUseEqualFrequency(false);
      int int0 = 0;
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.runFilter(discretize0, (String[]) null);
      discretize0.m_IgnoreClass = false;
      discretize0.getUseBinNumbers();
      discretize0.attributeIndicesTipText();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      discretize0.setInvertSelection(false);
      discretize0.listOptions();
      discretize0.setOutputFormat();
      String string0 = discretize0.getAttributeIndices();
      assertEquals("first-last", string0);
      
      discretize0.setInvertSelection(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "first-last";
      stringArray0[1] = "first-last";
      stringArray0[2] = "es&HE}Xn/v_5R_P@E_<";
      stringArray0[3] = "first-last";
      stringArray0[4] = "No upper limit has been specified for range";
      stringArray0[5] = "first-last";
      stringArray0[6] = "first-last";
      stringArray0[7] = "first-last";
      stringArray0[8] = "}";
      Filter.runFilter(discretize1, stringArray0);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      
      discretize0.getDesiredWeightOfInstancesPerInterval();
      String string1 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      discretize0.setInvertSelection(false);
      discretize0.listOptions();
      discretize0.setOutputFormat();
      discretize0.getAttributeIndices();
      discretize0.setInvertSelection(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "first-last";
      stringArray0[1] = "first-last";
      stringArray0[2] = "es&HE}Xn/v_5R_P@E_<";
      stringArray0[3] = "first-last";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      stringArray0[4] = "No upper limit has been specified for range";
      stringArray0[5] = "first-last";
      stringArray0[6] = "first-last";
      stringArray0[7] = "first-last";
      discretize1.globalInfo();
      AllFilter allFilter0 = new AllFilter();
      String string0 = "&.Iz";
      Discretize discretize2 = new Discretize();
      // Undeclared exception!
      try { 
        discretize2.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("`u");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`u";
      Discretize.main(stringArray0);
      discretize0.getCapabilities();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("SU$M<P1o");
      discretize0.binsTipText();
      discretize0.getCapabilities();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = null;
      try {
        instances0 = new Instances("", arrayList0, (-2141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2141
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      Discretize discretize0 = new Discretize("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      int int0 = 0;
      Discretize discretize1 = new Discretize();
      discretize1.getOptions();
      discretize1.getBinRangesString(0);
      discretize0.getCutPoints(0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4036404106149494
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "user.dir");
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("7D");
      String[] stringArray0 = discretize0.getOptions();
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1458417525947544
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(5121.811174574201);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("#PO;jA|`d|w4", arrayList0, 1);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.4, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance2.toString();
      instances0.add((Instance) binarySparseInstance2);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, binarySparseInstance0.s_numericAfterDecimalPoint);
      instances0.retainAll(instances1);
      discretize0.setInputFormat(instances1);
      int int0 = (-1202);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.");
      discretize0.m_IgnoreClass = true;
      discretize0.setOutputFormat();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5796246736085746
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1144.72938352));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("=Wg&/{8D5", arrayList0, 1);
      String string0 = "fS QPfX.8X'Tl?jEB";
      Attribute attribute0 = new Attribute("fS QPfX.8X'Tl?jEB");
      double[] doubleArray0 = new double[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      String string1 = binarySparseInstance1.toString();
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      int int0 = 1033;
      Instances instances1 = new Instances(instances0, int0);
      instances0.retainAll(arrayList0);
      discretize0.setInputFormat(instances0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = instances0.ARFF_RELATION;
      stringArray0[1] = attribute0.ARFF_ATTRIBUTE_REAL;
      stringArray0[2] = attribute0.ARFF_ATTRIBUTE_STRING;
      stringArray0[3] = string1;
      stringArray0[4] = attribute0.ARFF_ATTRIBUTE_REAL;
      stringArray0[5] = string0;
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: @relation real string {},{4} real fS QPfX.8X'Tl?jEB 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.259065077425979
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1144.72938352));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1144.72938352);
      doubleArray0[1] = (-1144.72938352);
      doubleArray0[4] = (-1144.72938352);
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2710);
      instances1.retainAll(arrayList0);
      discretize0.setInputFormat(instances1);
      Discretize discretize1 = new Discretize(".bsi");
      discretize1.m_DesiredWeightOfInstancesPerInterval = 6.7;
      discretize0.useEqualFrequencyTipText();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("Value of \"position\": ");
      discretize0.setAttributeIndices("Value of \"position\": ");
      discretize0.setInvertSelection(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.m_ClassIndex = 887;
      discretize0.m_MakeBinary = true;
      discretize0.getCapabilities();
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.setAttributeIndices("weka/core/Capabilities.props");
      int int0 = (-2436);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2436));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1144.72938352));
      discretize0.listOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1144.72938352);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      doubleArray0[1] = (-1144.72938352);
      doubleArray0[4] = (-1144.72938352);
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2710);
      instances1.retainAll(arrayList0);
      discretize0.setInputFormat(instances1);
      Discretize discretize1 = new Discretize(".bsi");
      Filter.makeCopy(discretize1);
      instances1.stream();
      discretize1.m_DesiredWeightOfInstancesPerInterval = 6.7;
      discretize0.useEqualFrequencyTipText();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2387);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.678508000514082
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1144.72938352));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1144.72938352);
      doubleArray0[1] = (-1144.72938352);
      doubleArray0[4] = (-1144.72938352);
      doubleArray0[5] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2710);
      instances1.retainAll(arrayList0);
      discretize0.setInputFormat(instances1);
      Discretize discretize1 = new Discretize(".bsi");
      discretize1.m_DesiredWeightOfInstancesPerInterval = 6.7;
      discretize0.calculateCutPoints();
      Discretize discretize2 = new Discretize();
      discretize2.getBinRangesString((-2134061872));
      discretize0.setOutputFormat();
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7467059471170976
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1144.72938352));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      discretize0.setBins((-2105));
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1144.72938352);
      doubleArray0[1] = (-1144.72938352);
      doubleArray0[4] = (-1144.72938352);
      doubleArray0[5] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2710);
      instances1.retainAll(arrayList0);
      discretize0.setInputFormat(instances1);
      Discretize discretize1 = new Discretize(".bsi");
      discretize1.m_DesiredWeightOfInstancesPerInterval = 6.7;
      discretize0.calculateCutPoints();
      Discretize discretize2 = new Discretize();
      discretize2.getBinRangesString((-2134061872));
      discretize0.setOutputFormat();
      discretize1.getBinRangesString(0);
      discretize2.getOptions();
      try { 
        discretize1.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at .bsi
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1960516973750748
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1144.72938352));
      discretize0.listOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("relational", (String) null, (-136));
      arrayList0.add(attribute1);
      Instances instances1 = new Instances(instances0, (-2020));
      instances0.retainAll(instances1);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize("1#2z6Ba~");
      discretize0.calculateCutPoints();
      Discretize discretize2 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.791080639311774
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1144.72938352));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1144.72938352);
      doubleArray0[1] = (-1144.72938352);
      discretize0.setUseEqualFrequency(false);
      doubleArray0[4] = (-1144.72938352);
      doubleArray0[5] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2710);
      instances1.retainAll(arrayList0);
      discretize0.setInputFormat(instances1);
      Discretize discretize1 = new Discretize(".bsi");
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize1.findNumBins((-2134061872));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.739997406578141
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, doubleArray0);
      Attribute.typeToString(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("relational", (String) null, (-136));
      arrayList0.add(attribute1);
      instances0.retainAll(instances0);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize("1#2z6Ba~");
      discretize0.calculateCutPoints();
      Discretize discretize2 = new Discretize();
      discretize1.setOutputFormat();
      discretize0.setOutputFormat();
      discretize0.convertInstance(binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 2710);
      discretize0.m_FindNumBins = true;
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2710);
      instances1.retainAll(arrayList0);
      discretize0.setInputFormat(instances1);
      instances1.removeAll(instances0);
      Discretize discretize1 = new Discretize(".bsi");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.stream();
      discretize1.m_DesiredWeightOfInstancesPerInterval = 6.7;
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.011242441972426
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("    // create new instance\n", arrayList0, 1);
      Attribute attribute0 = new Attribute((String) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.toString();
      instances0.add((Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      instances0.retainAll(linkedList0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      Discretize discretize1 = new Discretize("@end");
      discretize0.calculateCutPoints();
      Discretize discretize2 = new Discretize("-M <num>");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0280290733074104
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1144.72938352);
      doubleArray0[1] = (-1144.72938352);
      discretize0.setUseEqualFrequency(false);
      doubleArray0[4] = (-1144.72938352);
      doubleArray0[5] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(".bsi", arrayList0, 1);
      instances1.retainAll(arrayList0);
      discretize0.setInputFormat(instances1);
      discretize0.batchFinished();
      discretize0.convertInstance(binarySparseInstance0);
      discretize0.input(binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 68
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6093973892808866
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1144.72938352);
      doubleArray0[2] = (-1144.72938352);
      discretize0.setUseEqualFrequency(false);
      doubleArray0[4] = (-1144.72938352);
      doubleArray0[5] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2710);
      discretize0.isNewBatch();
      discretize0.setInputFormat(instances1);
      discretize0.batchFinished();
      arrayList0.stream();
      discretize0.calculateCutPoints();
      discretize0.input(binarySparseInstance1);
      discretize0.input(binarySparseInstance0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.143952200643869
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("    // create new instance\n", arrayList0, 1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1367.7770867021138);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Parameters first and/or toCopy out of range", linkedList0, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, (-1717986916));
      instances1.retainAll(linkedList0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      Instances instances2 = new Instances(instances1, 1, (-2134061872));
      instances2.removeAll(instances1);
      Discretize discretize1 = new Discretize("Str");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.stream();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5283233635280706
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 2710);
      discretize0.m_FindNumBins = true;
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2710);
      instances1.retainAll(arrayList0);
      Instances instances2 = new Instances(instances0, 1564);
      instances2.retainAll(instances0);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize("&^zEdD;n-`j)t");
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize1.findNumBins(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
