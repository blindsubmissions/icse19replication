/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:03:42 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.MenuBar;
import freemind.main.FreeMindApplet;
import freemind.modes.MindMapNode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMapModel;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.modes.schememode.SchemeNodeModel;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.TransferHandler;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.DefaultCaret;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.setOpaque(true);
      Locale locale0 = jMonthChooser0.getLocale();
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.day = (-1110);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.resetKeyboardActions();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 357;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 357, 673L, 0, 0, 'A');
      keyEvent0.setKeyChar(',');
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 357;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 673L;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) ',';
      // Undeclared exception!
      try { 
        color0.getComponents((ColorSpace) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setFocus();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.isValidateRoot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(4322.366, (-1325.56450951789), (-1325.56450951789), 0.0);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      rectangle0.contains((Rectangle2D) rectangle2D_Double0);
      jYearChooser0.repaint(rectangle0);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.maxDayCharacters = 333;
      jDayChooser0.initDecorations();
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1512, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 796, 673L, 14, 0, '5');
      keyEvent0.setKeyChar(',');
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1667.27F);
      floatArray0[2] = 4676.799F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 673L;
      jDayChooser0.setDecorationBackgroundColor(color0);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 14, false);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.getLocale();
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setYear(3);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(7);
      jDayChooser0.getMaxSelectableDate();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.882005086088324
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 783, 673L, 14, (-21), '5');
      keyEvent0.setKeyChar(',');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getSundayForeground();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters((-21));
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 48, false);
      focusEvent0.paramString();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.getLocale();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setYear(48);
      MockDate mockDate0 = new MockDate(48, 39, 48, 16, 10);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removeAll();
      jDayChooser0.setDay(0);
      jDayChooser0.getComponentPopupMenu();
      jDayChooser0.getContainerListeners();
      jDayChooser0.firePropertyChange("XnBDyFI_Mz", false, false);
      Locale locale0 = jDayChooser0.getLocale();
      Color color0 = Color.PINK;
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.initDecorations();
      jDayChooser0.initDecorations();
      jDayChooser0.getDaysInMonth();
      Locale locale1 = locale0.stripExtensions();
      jDayChooser0.addListeners(6);
      jDayChooser0.addNotify();
      jDayChooser0.init();
      jDayChooser0.setLocale(locale1);
      jDayChooser0.setForeground(color0);
      jDayChooser0.updateUI();
      jDayChooser0.isDayBordersVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1254, (-572), 3, 1254, 'D');
      jDayChooser0.keyPressed(keyEvent0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      OutputStream outputStream0 = fileUtil0.openOutputStreamElement(" } \nendstream\n");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, outputStream0, 63732, 63732);
      jDayChooser0.printComponents(pDFDocumentGraphics2D0);
      jDayChooser0.getHeight();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      long long0 = (-4172L);
      int int0 = 6;
      char char0 = 'n';
      MenuElement[] menuElementArray0 = new MenuElement[8];
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("@Dc");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.createVolatileImage(41, (-455));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, (-1560L), 49, 4, 'S', 4);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      Color color0 = Color.pink;
      Color.getColor("Metal");
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setMonth(41);
      System.setCurrentTimeMillis((-2403L));
      jDayChooser0.setEnabled(false);
      jDayChooser0.getDayPanel();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.65970797168196
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = 41;
      int int1 = 34;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 34;
      floatArray0[1] = (float) 34;
      floatArray0[2] = (float) 34;
      floatArray0[3] = (float) 41;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(41, 34, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 4 and should be 1394
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 796, 673L, 14, 0, '5');
      keyEvent0.setKeyChar(',');
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1667.27F);
      floatArray0[2] = 4676.799F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 673L;
      jDayChooser0.setDecorationBackgroundColor(color0);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.setForeground(color0);
      jDayChooser0.updateUI();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.setSundayForeground(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, byteArrayOutputStream0, 0, 786);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.606610584382382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7419974239690625
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.updateUI();
      jDayChooser0.setEnabled(true);
      jDayChooser0.repaint((-1122), 39, (-483), 39);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 796, 673L, 14, 0, '5');
      keyEvent0.setKeyChar('5');
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-1667.27F);
      color0.getRGBComponents((float[]) null);
      floatArray0[2] = 4676.799F;
      floatArray0[3] = (float) 0;
      floatArray0[3] = (float) 673L;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getInsets();
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.setForeground(color0);
      jDayChooser0.updateUI();
      jDayChooser0.isDayBordersVisible();
      keyEvent0.setKeyCode(11);
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
