/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:22:51 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.reset();
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      Services services0 = new Services();
      Services.testSMTP("", 0);
      Services.testHTTPS("**R\u00E9ponse incorrect**", 0);
      Services.testPOP3("", 776);
      Services.testSMTP("(h", 3000);
      services_SIMPLE_Result0.reset();
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
      
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("$o*i6\"w> o#jwAPs", 0);
      String string1 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: $o*i6\"w> o#jwAPs) **.\n****", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Services.testHTTP((String) null, 0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**Erreur : java.lang.NullPointerException**");
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("jg", 0);
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS((String) null, (-579));
      services_HTTP_Result0.reset();
      services_SIMPLE_Result0.reset();
      services_HTTP_Result0.toString();
      Services.testSMTP("", 0);
      services_HTTP_Result0.reset();
      Services.testPOP3("dRA=OeY", 0);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("", 0);
      assertEquals((-1), services_HTTP_Result1.code);
      
      services_HTTP_Result1.time = 1431L;
      services_HTTP_Result1.reset();
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTP("**Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@593a3944) **", 0);
      assertEquals(0, services_HTTP_Result2.code);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", (-1));
      services_SIMPLE_Result0.reset();
      Services.testHTTP("NNe1>8", (-3562));
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("", (-3562));
      Services.SIMPLE_Result services_SIMPLE_Result2 = new Services.SIMPLE_Result();
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://mX7u/Q,~:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**Erreur : ");
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("9H<#r>", (-4009));
      Services.HTTP_Result services_HTTP_Result2 = new Services.HTTP_Result();
      services_HTTP_Result1.reset();
      services_HTTP_Result1.reset();
      String string0 = services_HTTP_Result2.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      String string1 = services_SIMPLE_Result1.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-3562**.\n****", string1);
      
      Services.testSMTP("", (-4009));
      Services.SIMPLE_Result services_SIMPLE_Result3 = new Services.SIMPLE_Result();
      assertEquals(0L, services_SIMPLE_Result3.time);
      assertFalse(services_SIMPLE_Result3.works);
      
      Services.HTTP_Result services_HTTP_Result3 = Services.testHTTPS("", (-3701));
      assertEquals(0, services_HTTP_Result3.code);
      assertEquals(0L, services_HTTP_Result3.time);
      assertEquals(0, services_HTTP_Result3.page_weight);
      assertFalse(services_HTTP_Result3.works);
      
      Services.HTTP_Result services_HTTP_Result4 = Services.testHTTP("mX7u/Q,~", 0);
      assertTrue(services_HTTP_Result4.works);
      assertEquals(12, services_HTTP_Result4.page_weight);
      
      Services.SIMPLE_Result services_SIMPLE_Result4 = Services.testPOP3((String) null, (-732));
      assertFalse(services_SIMPLE_Result4.works);
  }
}
