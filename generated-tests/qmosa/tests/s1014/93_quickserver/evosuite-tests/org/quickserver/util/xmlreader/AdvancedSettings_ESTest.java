/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:34:23 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setBacklog(2539);
      advancedSettings0.setClientSocketReceiveBufferSize(955);
      advancedSettings0.setClientSocketTrafficClass("6z{6O@N");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.toXML("</charset>\n");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-3617));
      advancedSettings0.setSocketLinger((-3617));
      advancedSettings0.setClientIdentifier("rvWtE*dZ2Dw:eRQ");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-1744));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      String string0 = "G/pmP$%T%$/Y";
      advancedSettings0.setClientSocketSendBufferSize((-1744));
      advancedSettings0.setQSObjectPoolMaker("G/pmP$%T%$/Y");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("G/pmP$%T%$/Y");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // G/pmP$%T%$/Y
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setBacklog((-1469));
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.toXML("e]3$\"AOqV9)s3$v0r");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-4213));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setQSObjectPoolMaker("no|FS\"yhHg?s]UG");
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setBacklog(664);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesBandwidth(664);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.toXML("");
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getBacklog();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      int int0 = 1;
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      int int1 = (-2690);
      advancedSettings0.setPerformancePreferencesLatency(1632);
      advancedSettings0.setClientSocketSendBufferSize((-2690));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesConnectionTime(182);
      int int2 = 0;
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setMaxThreadsForNioWrite((-1333));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setCharset("");
      String string0 = "n3AN(0dli]";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("n3AN(0dli]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // n3AN(0dli]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0846519456895094
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize(3487);
      advancedSettings0.setPerformancePreferencesLatency(1642);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("'aYYh@-ZyO<pw<y:b^;");
      advancedSettings0.setClientSocketTrafficClass(";!D\"m35d/4[9Ti\"");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML(";!D\"m35d/4[9Ti\"");
      advancedSettings0.setByteBufferSize((-88));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("'aYYh@-ZyO<pw<y:b^;");
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1962);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesConnectionTime((-2845));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getBacklog();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      assertEquals(65536, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-2654));
      String string0 = "t";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("t");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // t
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(4264);
      advancedSettings0.toXML((String) null);
      assertEquals(4264, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-242));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("\u0000*no/l");
      advancedSettings0.setClientIdentifier("~R!");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setQSObjectPoolMaker("</charset>\n");
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketSendBufferSize(618);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize((-116));
      advancedSettings0.setClientIdentifier("Mq5");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getCharset();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals("Mq5", advancedSettings0.getClientIdentifier());
      assertEquals(65536, int0);
  }
}
