/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:18:45 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.controller.StructuredMenuItemHolder;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.font.FontRenderContext;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.awt.image.RasterFormatException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.OutputStream;
import java.sql.Time;
import java.text.AttributedCharacterIterator;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.chrono.ChronoPeriod;
import java.time.chrono.Chronology;
import java.time.temporal.TemporalAmount;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Properties;
import java.util.TimeZone;
import javax.help.BackAction;
import javax.help.DefaultHelpModel;
import javax.help.ForwardAction;
import javax.help.HelpSet;
import javax.help.JHelpFavoritesNavigator;
import javax.help.NavigatorView;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JProgressBar;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StyledEditorKit;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.tilesources.BingAerialTileSource;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "wF,o";
      stringArray0[0] = "wF,o";
      stringArray0[1] = "GENERATED";
      stringArray0[2] = "0";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser1.setDecorationBordersVisible(false);
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      int int0 = 164;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 164, true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setFocus();
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      focusEvent0.setSource(jDayChooser0);
      styledEditorKit0.getContentType();
      styledEditorKit0.getCharacterAttributeRun();
      LabelView labelView0 = null;
      try {
        labelView0 = new LabelView((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.GlyphView", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(584);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 584);
      focusEvent0.paramString();
      focusEvent0.setSource("unknown type,permanent,opposite=null");
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.drawDays();
      jDayChooser0.setDay(584);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.updateUI();
      jDayChooser0.getLocale();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.init();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(584);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 584
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = (-1388);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 132, (-1388), (-1388), (-1388), (-1388));
      mockGregorianCalendar0.setTimeInMillis(333L);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      HsqlProperties hsqlProperties0 = new HsqlProperties((Properties) null);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.623226541126173
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.getInputContext();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.setFirstDayOfWeek(52);
      mockGregorianCalendar0.getMaximum(0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext((-894), (String[]) null, (String[]) null, (String[]) null, (String[]) null, iBindingFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getDay();
      SystemColor systemColor0 = SystemColor.controlText;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 14;
      floatArray0[1] = (float) 14;
      floatArray0[2] = (float) 14;
      floatArray0[3] = (float) 14;
      floatArray0[4] = (float) 14;
      floatArray0[5] = (float) 14;
      floatArray0[6] = (float) 14;
      floatArray0[7] = (float) 14;
      floatArray0[8] = (float) 14;
      systemColor0.getColorComponents(floatArray0);
      systemColor0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setMaxDayCharacters(228);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.removeFocusListener(jYearChooser0);
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.getContainerListeners();
      jDayChooser0.setMinimumSize((Dimension) null);
      jDayChooser0.firePropertyChange("*KXp-u4Rvh9-U", 0.212F, 0.212F);
      jDayChooser0.getMinSelectableDate();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 0, 1L, 0, 9001, ',', 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponents();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDay(0);
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.621265739359743
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.paintImmediately(0, 0, 173, 160);
      Time time0 = new Time(0L);
      jDayChooser0.setSelectableDateRange(date0, time0);
      jDayChooser0.updateUI();
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashtable0);
      // Undeclared exception!
      try { 
        font0.getMaxCharBounds((FontRenderContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.637304661672375
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-465), (-465), (-465), 5138, 247);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date1.toString());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 396;
      intArray0[3] = 0;
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(0, 396, intArray0, 0, 0);
      jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      jDayChooser0.focusLost(focusEvent0);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getRed());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 25;
      jDayChooser0.setYear(25);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFGraphics2D pDFGraphics2D0 = null;
      try {
        pDFGraphics2D0 = new PDFGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      BingAerialTileSource bingAerialTileSource0 = new BingAerialTileSource();
      Image image0 = bingAerialTileSource0.getAttributionImage();
      int int0 = 11;
      int int1 = 625;
      int int2 = 38;
      int int3 = 23;
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.drawImage(image0, 1957, 11, 625, 1957, 38, 23, 4531, 1409, (ImageObserver) jDayChooser_DecoratorButton0);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection((HsqlProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcConnection", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getSelectedDay();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2461, false);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("Dialog Plain 11", vetoableChangeListener0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "14");
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2461, 247, 5138, (-284), (-465));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setSundayForeground(systemColor0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2461, false);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-104), 695, 695, 15, '&');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.isDayBordersVisible();
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "S`US!?rR(W");
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2461, false);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-104), 695, 695, 15, '&');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.focusLost(focusEvent0);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getMaxSelectableDate();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.65970797168196
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1, true);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(true);
      int int0 = 695;
      char char0 = '&';
      JProgressBar jProgressBar0 = null;
      try {
        jProgressBar0 = new JProgressBar(17, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid range properties
         //
         verifyException("javax.swing.DefaultBoundedRangeModel", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "keystroke_nextMap");
      Locale locale0 = Locale.KOREA;
      jDayChooser0.setLocale(locale0);
      Locale locale1 = jDayChooser0.getLocale();
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionBackground();
      jDayChooser0.decorationBackgroundColor = color0;
      locale0.getDisplayScript(locale1);
      jDayChooser0.setLocale(locale0);
      System.setCurrentTimeMillis(608L);
      jDayChooser0.drawDays();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth(24);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jTable0, 11, 24, 24, 11, 'N', 440);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setWeekOfYearVisible(false);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.setDay(3);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JButton jButton0 = new JButton("");
      BackAction backAction0 = new BackAction(jButton0);
      jDayChooser0.setSelectableDateRange(date1, date1);
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 1, 6, 4, 1212, 'm');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setWeekOfYearVisible(true);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6648712778390684
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "14");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDay(23);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JButton jButton0 = new JButton("\"We=Xrk+'0s{?L3p");
      BackAction backAction0 = new BackAction(jButton0);
      backAction0.getValue("day");
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      jDayChooser0.setSelectableDateRange(date0, date1);
  }
}
