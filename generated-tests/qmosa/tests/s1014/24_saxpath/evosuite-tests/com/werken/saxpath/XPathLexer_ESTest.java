/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:48:31 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("BtGA.@V~y-IK");
      xPathLexer0.setXPath("");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("i");
      xPathLexer0.pipe();
      xPathLexer0.div();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      Token token0 = xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.getPreviousToken();
      xPathLexer0.notEquals();
      xPathLexer0.hasMoreChars();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.isIdentifierStartChar(' ');
      xPathLexer0.dollar();
      xPathLexer0.consume((-1));
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("5juIspV");
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierStartChar('|');
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.consume(0);
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (s)", string0);
      
      Token token1 = xPathLexer0.slashes();
      token1.toString();
      token0.toString();
      String string1 = token1.toString();
      assertEquals("[ (11) (.)", string1);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.identifier();
      assertEquals("Ij", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals("<", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("2", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("!", token5.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('z');
      assertTrue(boolean0);
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer0.consume();
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('*');
      assertFalse(boolean0);
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer0.getXPath();
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.13542463178894
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.endPosition();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.whitespace();
      xPathLexer0.colon();
      xPathLexer0.hasMoreChars();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.isIdentifierChar('#');
      xPathLexer0.mod();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0402429255970764
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.setXPath("}{~~d");
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals("~", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("~", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.consume();
      xPathLexer0.LA(1559);
      xPathLexer0.setXPath("}{~~d");
      xPathLexer0.and();
      Token token7 = xPathLexer0.not();
      assertEquals("}", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      char char0 = xPathLexer0.LA(604);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9089252587287424
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("E7", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      token2.toString();
      xPathLexer0.setPreviousToken(token2);
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (3) (P)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.mod();
      xPathLexer0.at();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("`", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("G", token6.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8910941120475802
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.getXPath();
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.consume((-3695));
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.304242891236584
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.consume(1735);
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      xPathLexer0.dollar();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.isIdentifierStartChar('V');
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.consume(0);
      assertEquals("6+Q59zh(X)Z>[", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8897606826306554
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("~R!");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("~", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("R", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("!", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5310541550621277
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.equals();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("P", token2.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (21) ([)", string0);
      
      Token token3 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token3);
      String string1 = token0.toString();
      assertEquals("[ (15) (E7)", string1);
      
      String string2 = token3.toString();
      assertEquals("[ (19) (H*)", string2);
      
      Token token4 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token4);
      assertEquals(18, token4.getTokenType());
      assertEquals("d", token4.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.at();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("G", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals("'", token6.getTokenText());
      
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4453280711769287
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.equals();
      Token token2 = xPathLexer0.leftBracket();
      token2.toString();
      xPathLexer0.setPreviousToken(token1);
      token0.toString();
      Token token3 = xPathLexer0.notEquals();
      token3.toString();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setPreviousToken(token1);
      xPathLexer1.mod();
      xPathLexer1.at();
      xPathLexer0.rightBracket();
      xPathLexer1.at();
      xPathLexer1.getXPath();
      xPathLexer0.number();
      xPathLexer1.minus();
      xPathLexer1.at();
      xPathLexer1.and();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.hasMoreChars();
      Token token4 = xPathLexer1.operatorName();
      assertNull(token4);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4235718331292757
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("com.werken.saxpath.Token", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.endPosition();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7521915465690427
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(32, int0);
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("co", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals("m", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.literal();
      assertEquals(27, token5.getTokenType());
      assertNotNull(token5);
      assertEquals("werken", token5.getTokenText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5791119628377768
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.consume((-1202));
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      xPathLexer0.dollar();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.isIdentifierStartChar('V');
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.consume(0);
      assertEquals("6+Q59zh(X)Z>[", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.713990619571277
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("E7", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("P", token2.getTokenText());
      
      xPathLexer0.comma();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.dots();
      assertEquals("d", token3.getTokenText());
      
      xPathLexer0.endPosition();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("E7[PH*d`G'");
      xPathLexer2.mod();
      Token token5 = xPathLexer2.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer1.hasMoreChars();
      Token token7 = xPathLexer2.nextToken();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer2.or();
      xPathLexer0.isIdentifierChar('#');
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer("E7[PH*d`G'");
      Token token8 = xPathLexer3.literal();
      assertNull(token8);
      
      xPathLexer1.number();
      Token token9 = xPathLexer3.dots();
      assertEquals(13, token9.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2092238380425249
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_u#cJv!WW@");
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.comma();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.whitespace();
      xPathLexer0.colon();
      xPathLexer0.hasMoreChars();
      xPathLexer1.nextToken();
      xPathLexer0.or();
      xPathLexer0.isIdentifierChar('V');
      xPathLexer1.mod();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6771969058980976
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.dots();
      xPathLexer1.dots();
      xPathLexer0.endPosition();
      xPathLexer1.comma();
      xPathLexer0.or();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("mX");
      xPathLexer2.whitespace();
      xPathLexer0.colon();
      xPathLexer1.hasMoreChars();
      xPathLexer1.nextToken();
      xPathLexer2.or();
      xPathLexer1.isIdentifierChar('#');
      xPathLexer1.mod();
      Token token0 = xPathLexer2.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0158684450002335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("com.werken.saxpath.Token", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("c", token2.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(".", token4.getTokenText());
      assertEquals(31, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("e", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3850969337199552
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.consume(1163);
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer1.plus();
      assertEquals("c", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.rightParen();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.equals();
      assertEquals("m", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token4 = xPathLexer2.minus();
      assertEquals("c", token4.getTokenText());
      
      xPathLexer1.literal();
      xPathLexer1.slashes();
      xPathLexer0.minus();
      xPathLexer0.dots();
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer3.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer3.identifier();
      xPathLexer1.dots();
      boolean boolean0 = xPathLexer3.isIdentifierStartChar('V');
      xPathLexer3.consume();
      Token token8 = xPathLexer3.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer2.setXPath("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer4.rightParen();
      assertEquals("c", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("erken.saxpath.XPathLexer", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer3.or();
      boolean boolean1 = xPathLexer3.isIdentifierChar('V');
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.628482565669989
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('Y');
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.isIdentifierChar('Y');
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }
}
