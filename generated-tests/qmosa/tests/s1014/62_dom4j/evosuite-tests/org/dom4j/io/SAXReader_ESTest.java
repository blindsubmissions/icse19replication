/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:58:30 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.Map;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.createXMLReader();
      sAXReader0.isIncludeExternalDTDDeclarations();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.getChannel();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 2405);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("A\"X@", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class A\"X@ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.isValidating();
      sAXReader0.setMergeAdjacentText(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader("Element");
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'n';
      charArray0[2] = 'a';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'G';
      charArray0[6] = ')';
      stringReader0.read(charArray0);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("xmlns:");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class xmlns: not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      HandlerBase handlerBase0 = new HandlerBase();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, (String) null, (String) null, 0, 0);
      MockException mockException0 = new MockException((String) null, sAXParseException0);
      sAXParseException0.getLocalizedMessage();
      mockException0.fillInStackTrace();
      locatorImpl1.setSystemId("");
      mockException0.getMessage();
      MockException mockException1 = new MockException(mockException0);
      SAXParseException sAXParseException1 = new SAXParseException((String) null, (String) null, "", 0, 0, mockException1);
      SAXParseException sAXParseException2 = new SAXParseException((String) null, locatorImpl1, sAXParseException1);
      try { 
        handlerBase0.fatalError(sAXParseException2);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.isMergeAdjacentText();
      String string0 = "v{-]*r";
      String string1 = null;
      DOMElement dOMElement0 = new DOMElement((String) null);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("v{-]*r", "#!=P", "o`J.t");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      QName qName0 = QName.get(" data: ", "", "");
      // Undeclared exception!
      try { 
        dOMDocument0.addElement(qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The node \"org.dom4j.dom.DOMElement@0000000019\" could not be added to the branch \"null\" because: Cannot add another element to this Document as it already has a root element of: 
         //
         verifyException("org.dom4j.tree.AbstractDocument", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("o+F9o<");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("o+F9o<", "o+F9o<");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: o+F9o<o+F9o< Nested exception: no protocol: o+F9o<o+F9o<
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0280290733074104
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.uriPrefix = "LO;!D\"m35d/4[9Ti";
      sAXReader_SAXEntityResolver0.resolveEntity("#text", "");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "#text");
      sAXReader_SAXEntityResolver0.resolveEntity("", "Error on line ");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createText("");
      inputSource0.getPublicId();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getEncoding();
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(3317);
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      boolean boolean0 = true;
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, true);
      sAXReader1.getEncoding();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader1.setEntityResolver(xMLFilterImpl0);
      sAXReader1.setStripWhitespaceText(true);
      // Undeclared exception!
      try { 
        sAXReader1.setProperty((String) null, xMLFilterImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.resetHandlers();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      String string0 = "This should never happen. Caught: ";
      Locator2Impl locator2Impl0 = new Locator2Impl();
      String string1 = null;
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setDocumentFactory(documentFactory0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.addHandler("r>:BT\u0002$J+OGT$", (ElementHandler) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.endDocument();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.processingInstruction("", "");
      dispatchHandler0.removeHandler("lf3");
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      parserAdapter0.getDTDHandler();
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      sAXReader0.addHandler("\"xl@iD*@7-", dispatchHandler0);
      sAXReader0.setValidation(false);
      sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.getEntityResolver();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.getXMLFilter();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.resetHandlers();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setEntityResolver((EntityResolver) null);
      sAXReader0.getErrorHandler();
      sAXReader0.getDocumentFactory();
      try { 
        MockURL.URL((URL) null, "");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.022808529414704
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "_wL0@XkC6h<7hBd");
      sAXReader0.setEncoding("");
      Object object0 = new Object();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      try { 
        sAXReader0.setProperty("", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "http://xml.org/sax/properties/lexical-handler";
      QName qName0 = QName.get("http://xml.org/sax/properties/lexical-handler", "http://xml.org/sax/properties/lexical-handler");
      qName0.getDocumentFactory();
      qName0.setDocumentFactory((DocumentFactory) null);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      String string1 = "";
      sAXReader0.removeHandler("");
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getXMLFilter();
      MockURL.getHttpExample();
      boolean boolean0 = true;
      try { 
        sAXReader0.setFeature("org.dom4j.tree.FlyweightComment", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'org.dom4j.tree.FlyweightComment' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      xMLFilterImpl0.getErrorHandler();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.getDocumentFactory();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl1);
      sAXReader0.getDocumentFactory();
      sAXReader0.setValidation(false);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("", "");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader("Element");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("file://");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("mzsiOMsB/");
      sAXReader_SAXEntityResolver1.resolveEntity("o+F9o<", "oG@S@1\"w3:0nm");
      URI uRI0 = MockURI.URI("org.dom4j.tree.DefaultCDATA");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("o+F9o<");
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.getHandler("o+F9o<");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      sAXReader0.removeHandler("");
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      DispatchHandler dispatchHandler1 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler1);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      sAXReader1.getXMLFilter();
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      
      defaultDocumentFactory0.createText("");
      SAXReader sAXReader2 = new SAXReader((XMLReader) null, true);
      sAXReader2.setIncludeExternalDTDDeclarations(false);
      XMLReader xMLReader0 = sAXReader2.getXMLReader();
      assertFalse(sAXReader2.isMergeAdjacentText());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader2.isIgnoreComments());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader2.isValidating());
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader2.isStripWhitespaceText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0280290733074104
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setIgnoreComments(true);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.76162571219778
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      xMLFilterImpl0.getErrorHandler();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.getDocumentFactory();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl1);
      sAXReader0.getDocumentFactory();
      sAXReader0.setValidation(true);
      HandlerBase handlerBase0 = new HandlerBase();
      xMLFilterImpl1.resolveEntity("", "");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6a8debe6 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6a8debe6 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.87821830667085
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      try { 
        sAXReader0.read("file://");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  (No such file or directory) Nested exception:  (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.848899705841817
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader(" : ");
      char[] charArray0 = new char[8];
      try { 
        sAXReader0.read((InputStream) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9034007581809185
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r'2]p{i{");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = new InputSource();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createText("r'2]p{i{");
      inputSource0.getPublicId();
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.getEncoding();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("g; \"t*OGz_^5", "");
      sAXReader_SAXEntityResolver0.resolveEntity("", "pL[0c(e_jK,rK");
      sAXReader_SAXEntityResolver0.resolveEntity("r'2]p{i{", (String) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "-D]NA8Q1");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)18, (byte)0);
      byteArrayInputStream0.read();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3082);
      byteArrayInputStream0.mark((byte)5);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      try { 
        sAXReader0.read((InputStream) dataInputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
