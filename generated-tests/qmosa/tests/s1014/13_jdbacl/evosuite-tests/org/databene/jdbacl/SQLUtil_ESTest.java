/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:33:34 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.compile.DeleteNode;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "., .";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("., .", stringArray0, "p@9|", "update", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ",";
      SQLUtil.isDML(",");
      String string1 = "LSQtr7:cfXm>%V\"";
      SQLUtil.isQuery("LSQtr7:cfXm>%V\"");
      String string2 = "ZXd*hd*Jv`!fA\"T";
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("ZXd*hd*Jv`!fA\"T", ",", versionNumber0);
      String string3 = "jwnExN`A-cN5T!";
      defaultDatabase0.getCatalog("jwnExN`A-cN5T!");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZffQ; :@~";
      stringArray0[1] = "updateRef(int,Ref)";
      stringArray0[2] = "";
      stringArray0[3] = "-A`^{Y!6G6y";
      stringArray0[4] = " 1UM?";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "alter table";
      stringArray0[8] = "w$p27:PQv";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("ZffQ; :@~ = 'ZffQ; :@~' AND updateRef(int,Ref) = 'updateRef(int,Ref)' AND  = '' AND -A`^{Y!6G6y = '-A`^{Y!6G6y' AND  1UM? = ' 1UM?' AND  = '' AND  = '' AND alter table = 'alter table' AND w$p27:PQv = 'w$p27:PQv'", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      String string1 = "\\mP3w&SQBjR";
      SQLUtil.substituteMarkers("", "mP3w&SQBjR", "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("w@NK| ^oc[!y");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("mP3w&SQBjR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "WD0[a 2'2-5UIH7<zny";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WD0[a 2'2-5UIH7<zny";
      stringArray0[1] = "WD0[a 2'2-5UIH7<zny";
      stringArray0[2] = "WD0[a 2'2-5UIH7<zny";
      stringArray0[3] = "WD0[a 2'2-5UIH7<zny";
      SQLUtil.innerJoin("WD0[a 2'2-5UIH7<zny", stringArray0, "og!,;|fv", (String) null, stringArray0);
      SQLUtil.isDDL("WD0[a 2'2-5UIH7<zny");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.NEVER;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = (-2790);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)43;
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = SQLUtil.normalize("enF;9*:", false);
      assertEquals("enF ; 9 * :", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "=pu*$n#,'4PfX#i_|";
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "=pu*$n#,'4PfX#i_|", true, "=pu*$n#,'4PfX#i_|");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      String string1 = "ny3RR~6\"rwF)!n>)";
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("ny3RR~6\"rwF)!n>)", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("ny3RR~6\"rwF)!n>)", stringBuilder1);
      String string2 = " (";
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1250), " (");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1250
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      String string0 = "";
      String string1 = ", ";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("", false, "java.lang.Object@5a4b6bfc", ", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "CREATE ROLE";
      String string1 = "Not all parameters set.";
      StringBuilder stringBuilder0 = new StringBuilder("Not all parameters set.");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      SQLUtil.addRequiredCondition("CREATE ROLE", stringBuilder1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(75);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 75, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("SYSCS_SET_STATISTICS_TIMING", ")@6QoVa&", versionNumber0);
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("SYSCS_SET_STATISTICS_TIMING", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.mutatesStructure("\")");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\")", dBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("\")");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("r4p',:", false);
      assertEquals("r4p ',:'", string0);
      
      DBSchema dBSchema0 = new DBSchema("r4p',:");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("r4p ',:'", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(335544332, ";Snj @b-8NXd3}~");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(";SNJ @B-8NXD3}~(0)", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9w.");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "QMpvnpl|z{WG*^}9K";
      stringArray0[1] = "QMpvnpl|z{WG*^}9K";
      stringArray0[2] = "QMpvnpl|z{WG*^}9K";
      stringArray0[3] = "QMpvnpl|z{WG*^}9K";
      stringArray0[4] = "QMpvnpl|z{WG*^}9K";
      stringArray0[5] = "9w.";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(355L);
      stringBuilder0.append((Object) stringBuilder1);
      SQLUtil.addOptionalCondition("QMpvnpl|z{WG*^}9K", stringBuilder0);
      assertEquals("355355 or QMpvnpl|z{WG*^}9K", stringBuilder0.toString());
      
      DBDataType.getInstance((-1025), " WHERE ");
      defaultDBTable0.getColumns();
      DBDataType dBDataType0 = DBDataType.getInstance((-1807), "Y;P>mS~");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("QMpvnpl|z{WG*^}9K", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("Y;P>MS~(0,0)", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "()", "()", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<4");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(" and ", compositeDBObject0);
      tableContainer0.getTable("create materialized view");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<4";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = SQLUtil.normalize("5Z1`h2y,yRb", true);
      assertEquals("5Z1 ` h2y, yRb", string0);
      
      String string1 = SQLUtil.normalize(" NOT NULL", true);
      assertEquals("NOT NULL", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5Z1`h2y,yRb";
      stringArray0[1] = "5Z1 ` h2y, yRb";
      stringArray0[2] = "5Z1 ` h2y, yRb";
      stringArray0[3] = "5Z1 ` h2y, yRb";
      stringArray0[4] = "5Z1 ` h2y, yRb";
      stringArray0[5] = " NOT NULL";
      stringArray0[6] = " NOT NULL";
      stringArray0[7] = "";
      stringArray0[8] = "5Z1`h2y,yRb";
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string2);
      assertNotNull(string2);
      
      boolean boolean0 = SQLUtil.isQuery("Issi");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("j7?hTr@t8h\"jM\"", true, (String) null, "ZK");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCheckConstraint0.setOwner(compositeDBObject0);
      dBCheckConstraint0.equals((Object) null);
      dBCheckConstraint0.equals("j7?hTr@t8h\"jM\"");
      SQLUtil.typeAndName(dBCheckConstraint0);
      SQLUtil.constraintName(dBCheckConstraint0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject1 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("drop table\")", compositeDBObject1);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session", (DBSchema) null);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      Character character0 = Character.valueOf('{');
      SQLUtil.substituteMarkers("b-QkmdhH71zHKc0VJoX", "selecti", character0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0734420609947175
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("\")");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("r4p',:", false);
      assertEquals("r4p ',:'", string0);
      
      DBSchema dBSchema0 = new DBSchema("r4p',:");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("r4p ',:'", dBSchema0);
      String string1 = SQLUtil.normalize("\")", false);
      assertEquals("\")\"", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYSCS_SET_STATISTICS_TIMING");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(",", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Rx^sKwB0sIx*`x", defaultDBTable0, (DBDataType) null, integer0);
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("SYSCS_SET_STATISTICS_TIMING.", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter index";
      stringArray0[1] = "alter index";
      stringArray0[2] = "<";
      stringArray0[3] = "";
      stringArray0[4] = "alter index";
      stringArray0[5] = "";
      stringArray0[6] = "alter index";
      stringArray0[7] = "alter index";
      stringArray0[8] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter index", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("", "create materialized view", "F)9^p7aJa");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<4");
      boolean boolean0 = SQLUtil.isQuery("GAz9hT6PS");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("<4");
      String string0 = SQLUtil.normalize("drop table", false);
      assertEquals("drop table", string0);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("execute");
      assertTrue(boolean2.equals((Object)boolean1));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" Tj?F_t]M6J#zx`A", (DBCatalog) null);
      dBSchema0.getTable(" Tj?F_t]M6J#zx`A");
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLUtil.typeAndName((DBObject) null);
      boolean boolean0 = SQLUtil.isQuery(" Tj?F_t]M6J#zx`A");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<4");
      SQLUtil.normalize("drop indexfailed to initilize jaybird native library. this is most likley due to a failure to load the firebird client library.", true);
      System.setCurrentTimeMillis(0L);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("0", true, "'`tlO&C@m^X\u0003q;}R=", "<4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<4");
      DBDataType dBDataType0 = DBDataType.getInstance(293, "<4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<4");
      defaultDBTable0.getColumns();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("<4", defaultDBTable0, dBDataType0, integer0, integer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("<4create table <4 (\n\t<4 <4(2,2) NULL\n)", stringWriter1.toString());
      assertEquals("<4create table <4 (\n\t<4 <4(2,2) NULL\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-120), "&WiBY,nMhg_wsP");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&WiBY,nMhg_wsP", (DBTable) null, dBDataType0, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("&WIBY,NMHG_WSP", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized viewselectivity(");
      SQLUtil.isDML("alter materialized viewselectivity(");
      System.setCurrentTimeMillis((-2620L));
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.2337916587064593
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.parseColumnTypeAndSize("PsDYO[VDC=x");
      SQLUtil.parseColumnTypeAndSize("PsDYO[VDC=x");
      SQLUtil.normalize("PsDYO[VDC=x", true);
      SQLUtil.normalize("bpP,R$pHq-3tkJC3o", true);
      String string0 = "callselectivity(";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 11;
      DBDataType dBDataType0 = DBDataType.getInstance(11, "callselectivity(");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("callselectivity(", defaultDBTable0, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder("PsDYO [ VDC = x");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-64416996), 2928.970236731835);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -64416996
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.");
      DBDataType dBDataType0 = DBDataType.getInstance(1, "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.");
      defaultDBTable0.getColumns();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.", defaultDBTable0, dBDataType0, integer1, integer2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.create table Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library. (\n\tFailed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library. FAILED TO INITILIZE JAYBIRD NATIVE LIBRARY. THIS IS MOST LIKLEY DUE TO A FAILURE TO LOAD THE FIREBIRD CLIENT LIBRARY.(0,0) NULL\n)", stringWriter1.toString());
      assertEquals("Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.create table Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library. (\n\tFailed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library. FAILED TO INITILIZE JAYBIRD NATIVE LIBRARY. THIS IS MOST LIKLEY DUE TO A FAILURE TO LOAD THE FIREBIRD CLIENT LIBRARY.(0,0) NULL\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("drop tableselectivity(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: drop tableselectivity(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("OpgJiF\"Rsw6W", stringBuilder0);
      assertEquals("OpgJiF\"Rsw6W", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.normalize("SELECTIVITY(", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("HwGwCi>U9K.EdwsF5l", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis(120259084290L);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DeleteNode deleteNode0 = new DeleteNode();
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter indexj7?htr@t8h\"jm\"", defaultDBTable0, (DBDataType) null, (Integer) 2);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter indexj7?htr@t8h\"jm\"", defaultDBTable0, (DBDataType) null, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("0S^{^", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DBSchema dBSchema0 = new DBSchema((String) null);
      // Undeclared exception!
      try { 
        dBSchema0.getDatabase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBSchema", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.removeComments(" ANR ");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("] b-tree leaf table:", true, "p3sk,[6~}X?^Be<", " ANR ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"] b-tree leaf table:\" ", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4287755276479923
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("j7?hTr@t8h\"jM\"", true, (String) null, "ZK");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCheckConstraint0.setOwner(compositeDBObject0);
      dBCheckConstraint0.equals("j7?hTr@t8h\"jM\"");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ZK", defaultDBTable0, (DBDataType) null);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.mutatesDataOrStructure("CONSTRAINT j7?hTr@t8h\"jM\" CHECK ZK");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter indexalter tableselectivity(";
      stringArray0[1] = "ZK";
      stringArray0[2] = "ZK";
      stringArray0[3] = "ZK";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized view", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec1);
      assertEquals("CONSTRAINT j7?hTr@t8h\"jM\" CONSTRAINT \"drop materialized view\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1699929969668565
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.isDML("create table");
      SQLUtil.parseColumnTypeAndSize("create table");
      SQLUtil.removeComments("create table");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("t/9<=7oCz(>R7+!'3+", false);
      DBCatalog dBCatalog0 = new DBCatalog("h%Nz>>3");
      DBSchema dBSchema0 = new DBSchema("create table", dBCatalog0);
      TableContainer tableContainer0 = new TableContainer("g!f5-BtUb'!_Z");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("t / 9 < = 7oCz (> R7 + ! '3+'", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("t / 9 < = 7oCz (> R7 + ! '3+'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 't / 9 < = 7oCz (> R7 + ! '3+'' not found in table 't / 9 < = 7oCz (> R7 + ! '3+''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3571294822252158
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.normalize("enF;9*:", true);
      SQLUtil.mutatesDataOrStructure("alter sessiondrp table9electivity(");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("enF;9*:");
      assertNull(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8043716191528454
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intocreate table");
      assertFalse(boolean0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean1 = SQLUtil.isDML("select intocreate table");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8065071652616695
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil.mutatesDataOrStructure("truncate");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6731183626432509
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ZK", false, "alter tableselectivit(", "ZK");
      String string0 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint ZK", string0);
      
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT ZK ", string1);
      
      TableContainer tableContainer0 = new TableContainer("&)-<\")oE<!e");
      tableContainer0.getSchema();
      tableContainer0.getSchema();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ZK CHECK ZK", string2);
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec1);
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec2);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.parseColumnTypeAndSize("BLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update}~$&.2e$ut]@fjtor{");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "BLOB";
      stringArray0[2] = "update}~$&.2e$ut]@fjtor{";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "update}~$&.2e$ut]@fjtor{";
      stringArray0[6] = "BLOB";
      stringArray0[7] = null;
      stringArray0[8] = "update}~$&.2e$ut]@fjtor{";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(stringArray0[7], stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(1048.1553F);
      StringBuilder stringBuilder3 = stringBuilder2.append((int) (byte) (-52));
      // Undeclared exception!
      try { 
        stringBuilder3.insert(1483, '(');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-676), "alter mater");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumns();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1", defaultDBTable0, dBDataType0, integer1, integer2);
      defaultDBTable0.getReferrers();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "^ZO?*.";
      stringArray0[1] = "^ZO?*.";
      stringArray0[2] = "alter mater";
      stringArray0[3] = "1";
      stringArray0[4] = "1";
      stringArray0[5] = "1";
      stringArray0[6] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8594288151492289
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "table null";
      stringArray0[1] = "table null";
      stringArray0[2] = "table null";
      stringArray0[3] = "table null";
      stringArray0[4] = "table null";
      stringArray0[5] = "glpgx^oGb jb";
      stringArray0[1] = "table null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "table null", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      TableContainer tableContainer0 = new TableContainer("kIc");
      tableContainer0.getSchema();
      tableContainer0.getSchema();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      NameSpec nameSpec2 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec2);
      assertEquals("CONSTRAINT \"table null\" CONSTRAINT \"table null\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      VersionNumber versionNumber0 = VersionNumber.valueOf(";7S_q+");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("42Y93", ";7S_q+", versionNumber0);
      defaultDatabase0.getTable("drop indexselect intocreate table", false);
      DBDataType dBDataType0 = DBDataType.getInstance(707, ";7S_q+");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", (DBTable) null, dBDataType0, integer1, integer2);
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("update", (DBTable) null, dBDataType0, integer0, (Integer) null);
      vector0.add((DBColumn) defaultDBColumn1);
      vector0.listIterator();
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("update, update", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "ZK", "ZK");
      String string0 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string0);
      
      SQLUtil.parseColumnTypeAndSize("+v:");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001\u01D8");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table", defaultDBTable0, 39, "");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter table  NULL", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize("=eY:+g18z41)IFVh8", true);
      assertEquals("= eY : + g18z41) IFVh8", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7782333057997077
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("truncate<4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate<4");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "truncate<4";
      stringArray0[1] = "CONSTRAINT_NAME";
      stringArray0[2] = "truncate<4";
      stringArray0[3] = "truncate<4";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CONSTRAINT_NAME", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT CONSTRAINT_NAME FOREIGN KEY (truncate<4, CONSTRAINT_NAME, truncate<4, truncate<4) REFERENCES truncate<4(truncate<4, CONSTRAINT_NAME, truncate<4, truncate<4)", string0);
      
      System.setCurrentTimeMillis((-1L));
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("FOREIGN KEY (truncate<4, CONSTRAINT_NAME, truncate<4, truncate<4) REFERENCES truncate<4(truncate<4, CONSTRAINT_NAME, truncate<4, truncate<4)", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.8125445053464692
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.normalize("hJkf-gNqL2wQ.", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "rename";
      stringArray0[1] = "rename";
      stringArray0[2] = "Gn>";
      stringArray0[3] = "Gn>";
      stringArray0[4] = "Gn>";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Gn>", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Gn>", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream1, false);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getDoc());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9512595041439562
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.");
      assertFalse(boolean0);
      
      SQLUtil.removeComments("Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      stringArray0[1] = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      stringArray0[2] = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      stringArray0[3] = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library., Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library., Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library., Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.)", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1087566099), "sele");
      dBDataType0.isAlpha();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedString((-284));
      DBDataType dBDataType1 = DBDataType.getInstance((-284), "L6'");
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("L6'", (DBTable) null, dBDataType1, integer1);
      defaultDBColumn0.equals(dBDataType0);
      defaultDBColumn0.setDefaultValue("sele");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("L6' L6'(1) DEFAULT sele NULL", string0);
  }
}
