/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:44:37 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.ofLength(929L);
      range0.getEnd();
      long long0 = 807L;
      long long1 = 2371L;
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1144L;
      Range.of(range_CoordinateSystem0, 0L, 1144L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 1144L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString();
      Range.of(range_CoordinateSystem0, (-1L), 0L);
      // Undeclared exception!
      try { 
        Range.ofLength((-350L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = (-1241L);
      Range range0 = Range.of((-1241L), (-1241L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of((-1241L));
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.120291565301284
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 1696L;
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      String string0 = "?+Z%#rHEbmNcVv3\"";
      // Undeclared exception!
      try { 
        Range.parseRange("?+Z%#rHEbmNcVv3\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ?+Z%#rHEbmNcVv3\" into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1243L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.build();
      range_Builder0.expandBegin(0L);
      long long0 = 2608L;
      range_Builder0.expandBegin(2608L);
      long long1 = 0L;
      Range range0 = Range.ofLength(0L);
      String string0 = "";
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_Builder0.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.expandBegin(2909L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(839L);
      range_Builder1.expandEnd(2909L);
      range_Builder1.contractBegin(839L);
      range_Builder1.expandBegin(0L);
      range_Builder1.expandBegin(839L);
      range_Builder0.expandEnd(2909L);
      range_Builder1.expandEnd(0L);
      range_Builder1.expandBegin(0L);
      String string0 = ",";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(",");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.,
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5077140033198235
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-912L), 0L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range3 = range_Builder0.build();
      boolean boolean0 = range3.startsBefore(range2);
      assertTrue(range3.isEmpty());
      
      String string0 = range2.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      range_Builder0.expandEnd((-979L));
      boolean boolean1 = range1.startsBefore(range2);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(range2, range0);
      
      Range range4 = Range.of((-979L));
      assertNotSame(range4, range1);
      
      Range range5 = range0.intersection(range4);
      assertFalse(range4.isEmpty());
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-469L), 1871L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range range0 = Range.of((-469L), 0L);
      range_Builder1.copy();
      Range.Builder range_Builder2 = range_Builder1.shift(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range_Builder1);
      range_Builder2.shift((-469L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.458131223344662
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 575L);
      Range range0 = Range.ofLength(575L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("`qZe=VUufl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse `qZe=VUufl into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.543506999280304
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2407L), 1L);
      range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1485L));
      range_Builder0.expandBegin(275L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-559L), 1L);
      Range range1 = Range.ofLength(1172L);
      range0.intersects(range1);
      range_Builder1.shift((-630L));
      range0.endsBefore(range1);
      range1.intersects(range0);
      range0.intersects(range1);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(1L);
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2451263407580138
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      range_Builder0.copy();
      Range range0 = Range.of((-1173L), (-257L));
      range0.split(1015L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-257L), (-1173L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.513062858205024
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      long long0 = (-2147483648L);
      Range.of((-2147483648L), (-1L));
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-1L));
      range_Builder0.contractEnd((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.of(1002L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.563363581287344
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(460L, 460L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-767L));
      range_Builder1.expandEnd((-1485L));
      range_Builder2.expandBegin(1172L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1171L, 2147483648L);
      Range range1 = Range.ofLength(460L);
      Range range2 = Range.of((-1478L));
      range2.intersects(range1);
      range_Builder2.shift((-994L));
      range0.endsBefore(range2);
      range2.intersects(range1);
      range2.intersects(range1);
      Range.Builder range_Builder3 = new Range.Builder(1172L);
      assertFalse(range_Builder3.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.531359492261567
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-912L), 0L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range3 = range_Builder0.build();
      range0.startsBefore(range3);
      range2.toString();
      range_Builder0.expandEnd((-3517L));
      range2.startsBefore(range3);
      Range range4 = Range.of(9223372036854774637L);
      assertFalse(range4.equals((Object)range0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.134162458586648
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-1L));
      long long0 = 503L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2240L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2240 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5130628582050236
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      range0.getBegin();
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.isSubRangeOf(range1);
      String string0 = "";
      Range range2 = Range.of((-721L), 971L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range_Builder0.expandBegin((-721L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.421677442968351
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.of((-2749L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-2749L), (-2749L));
      long long0 = 4294967295L;
      Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-32768L));
      // Undeclared exception!
      try { 
        Range.parseRange("D`$o<`(#0m+3B8\"-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse D`$o<`(#0m+3B8\"- into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6746700958393443
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      range0.getBegin();
      Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1459L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(1459L);
      range_Builder0.build();
      range0.startsBefore(range2);
      range1.toString();
      range_Builder0.expandEnd((-326L));
      range1.startsBefore(range0);
      Range range3 = Range.of((-3517L));
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.780189530787972
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-2147483648L), (-1L));
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-622L), (-1L));
      Range range3 = Range.ofLength(2147483647L);
      Range range4 = Range.of((-257L));
      range3.intersects(range1);
      Range.Builder range_Builder2 = range_Builder1.shift((-1478L));
      range0.endsBefore(range2);
      range1.intersects(range3);
      range4.intersects(range1);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775807L);
      assertFalse(range_Builder3.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.508192821018
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.of((-2147483648L), (-1L));
      range0.toString();
      Range range1 = Range.ofLength(2356L);
      range0.isSubRangeOf(range1);
      String string0 = "";
      long long0 = 971L;
      Range.of(1880L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.expandBegin((-1L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5237886944526577
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      range0.getBegin();
      range0.isEmpty();
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range1.getLength();
      Range range2 = Range.of((-6606L));
      Object object0 = new Object();
      range2.equals(object0);
      range1.intersects(range2);
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), 3557L);
      range_Builder0.contractEnd(2147482477L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(3557L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5371688144078366
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2407L), 1L);
      range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1485L));
      range_Builder0.expandBegin(275L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-559L), (-1L));
      Range range1 = Range.ofLength(1172L);
      range0.intersects(range1);
      range_Builder1.shift((-630L));
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      boolean boolean1 = range1.intersects(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(1171L, long0);
      
      boolean boolean2 = range1.isEmpty();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.214496050675049
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of((-469L), (-469L));
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-197L));
      range_Builder1.contractEnd((-197L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = new Long((-197L));
      long long1 = 0L;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0979446749710853
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.ofLength(609L);
      Long long0 = new Long((-770L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      range0.getBegin();
      range0.isEmpty();
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range1.getLength();
      Range range2 = Range.of(609L);
      long long1 = range2.getBegin();
      long long2 = range1.getEnd(range_CoordinateSystem0);
      assertTrue(long2 == long1);
      
      boolean boolean1 = range1.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.587681369920688
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      range0.getBegin();
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.equals(long0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-721L), 971L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range range3 = Range.of(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range3);
      range_Builder1.shift(0L);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.Builder range_Builder3 = range_Builder2.contractBegin(971L);
      range_Builder3.shift(971L);
      range3.startsBefore(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.992196960885483
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0624332675559938
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2147483648L);
      Range.of(range_CoordinateSystem0, (-2147483648L), 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-2147483648L), 1144L);
      // Undeclared exception!
      try { 
        Range.parseRange("naH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse naH into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.6601518631909458
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of((-469L), 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.equals(consumer0);
      range0.getBegin();
      range0.isEmpty();
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      List<Range> list0 = range0.split(559L);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(2, list1.size());
      assertFalse(list1.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range.of((-179L), 0L);
      long long0 = new Long((-469L));
      Range range2 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range2.getEnd(range_CoordinateSystem1);
      assertEquals(127L, long1);
      
      boolean boolean1 = range2.isEmpty();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.664115493509714
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-85L);
      Range range1 = Range.of(range_CoordinateSystem0, (-85L), (-85L));
      Object object0 = new Object();
      range1.equals(object0);
      range0.isSubRangeOf(range1);
      Range.of((-2795L), (-767L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = Range.of(452L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 444L, 2758L);
      Range.Builder range_Builder1 = new Range.Builder(range3);
      Range.Builder range_Builder2 = range_Builder0.shift(2758L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range_Builder1.contractBegin((-85L));
      range_Builder2.shift(1L);
      range2.startsBefore(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.285827539338746
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(1870L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1870L, 1870L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getLength();
      range1.toString(range_CoordinateSystem1);
      range1.equals(range0);
      range0.intersects(range1);
      Range.Comparators.values();
      Range.Comparators.values();
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 1869 .. 1870 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 1869 .. 1870 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1107705678514885
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1144L;
      long long1 = (-2147483648L);
      long long2 = 9223372032559808513L;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 9223372032559808513L);
      // Undeclared exception!
      try { 
        range0.split(9223372032559808513L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -10737418239 would make range [9223372030412324865 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.173768833930095
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1144L;
      long long1 = (-2147483648L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range0.split(1144L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6226915592287736
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      range0.getBegin();
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.equals(long0);
      range1.intersects(range0);
      Range range2 = Range.of((-721L), 971L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range range3 = Range.of(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range3);
      range_Builder1.shift(0L);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      range_Builder2.contractBegin(971L);
      range3.startsBefore(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.6074558422010816
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 575L);
      Range range0 = Range.ofLength(575L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(3462L);
      Object object0 = new Object();
      range0.equals(object0);
      range1.isSubRangeOf(range0);
      Range range2 = Range.of(3462L, 3462L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range1.complement(range0);
      Range range3 = Range.of(255L);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-21L), (-1L));
      range_Builder3.shift(3462L);
      Range.Builder range_Builder4 = new Range.Builder(range3);
      range_Builder1.contractBegin(3462L);
      range1.startsBefore(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = null;
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.6458710265306538
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.ofLength(575L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 575L, 575L);
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range1.getBegin();
      List<Range> list1 = range0.complement(range1);
      assertFalse(list1.contains(range0));
      assertEquals(1, list1.size());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.7612001156935655
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-85L), (-85L));
      Object object0 = new Object();
      range1.equals(object0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-2795L), (-767L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range3 = Range.of(472L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2165359268712543
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.complement(range1);
      assertSame(range1, range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.422414204014728
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.ofLength(575L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1222L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1222L), 575L);
      Object object0 = new Object();
      range1.equals((Object) null);
      range1.isSubRangeOf(range0);
      long long1 = (-2795L);
      // Undeclared exception!
      try { 
        Range.of((-767L), (-2795L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.594400877286419
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.ofLength(2038L);
      Long long0 = new Long(2038L);
      boolean boolean0 = range0.equals(long0);
      range0.getBegin();
      Range range1 = Range.ofLength(4294967295L);
      range1.equals(long0);
      Range range2 = Range.of((-2954L), (-2954L));
      boolean boolean1 = range1.isSubRangeOf(range2);
      assertTrue(boolean1 == boolean0);
      
      Range range3 = Range.of(127L, 1039L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.of(127L);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      range_Builder0.shift((-3876L));
      Range.Builder range_Builder2 = new Range.Builder(range3);
      range_Builder0.contractBegin(4294967295L);
      boolean boolean2 = range0.startsBefore(range1);
      assertFalse(range0.isEmpty());
      assertTrue(boolean2 == boolean1);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list0 = range2.complementFrom(linkedList1);
      range3.complementFrom(list0);
      boolean boolean3 = range3.isEmpty();
      assertTrue(boolean3 == boolean2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.5887881776309247
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L);
      range0.split(9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 1144L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(1144L);
      Range range1 = Range.of(1144L, 1144L);
      Range range2 = Range.of((-2147483648L));
      Range range3 = Range.of(32766L);
      assertFalse(range3.isEmpty());
      
      range2.equals(range1);
      assertNotSame(range1, range3);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.401583543273495
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 78L);
      Range range0 = Range.of((-1173L), 78L);
      range0.split(979L);
      range0.getEnd();
      Range range1 = Range.of(78L);
      range1.equals("length must be >= 0");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("2N]6=w0'.^e?X", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 2N]6=w0'.^e?X into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.6596372667777266
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.ofLength(575L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 575L, 575L);
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      long long0 = range1.getBegin();
      assertEquals(574L, long0);
      
      List<Range> list1 = range0.complement(range1);
      assertFalse(list1.contains(range0));
      assertEquals(1, list1.size());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1047056010298895
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L);
      range0.split(9223372032559808513L);
      Range range1 = Range.of(9223372032559808513L, 9223372032559808513L);
      range1.split(979L);
      long long0 = range0.getEnd();
      assertEquals(9223372032559808513L, long0);
      
      Range.of(9223372034707292161L);
      boolean boolean0 = range0.equals("length must be >= 0");
      assertFalse(boolean0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.243175005656478
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      long long0 = range1.getLength();
      Long long1 = Long.getLong("]RC", 571L);
      boolean boolean0 = range1.equals(long1);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      long long2 = range1.getBegin();
      assertSame(range1, range0);
      assertFalse(long2 == long0);
      assertEquals(4294967295L, long2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.485350416720123
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of((-2795L), 65535L);
      Range.of((-977L));
      Range.of(9223372036854773939L);
      Range range1 = Range.of(9223372036854773939L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.104074021530186
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(1144L);
      Range range0 = Range.of(1144L, 1144L);
      Range range1 = Range.of(1144L);
      Range range2 = Range.of(32766L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertSame(range0, range1);
      assertFalse(range0.equals((Object)range2));
      assertEquals("[ 1144 .. 1145 ]/SB", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.183922421665312
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.of((-469L), (-469L));
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-469L));
      range_Builder1.contractEnd((-469L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long((-469L));
      long long1 = 0L;
      range_Builder1.contractEnd(255L);
      range_CoordinateSystem0.toString();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
