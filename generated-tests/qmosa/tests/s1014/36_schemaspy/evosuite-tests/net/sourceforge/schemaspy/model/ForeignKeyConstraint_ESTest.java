/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:37:03 GMT 2018
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.Database;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.SchemaMeta;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, " via ", 0, 0);
      Config.getInstance();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      stringArray0[0] = " via ";
      foreignKeyConstraint0.getParentColumns();
      TableColumn tableColumn0 = null;
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, " via ", 0, 0);
      Config config0 = Config.getInstance();
      foreignKeyConstraint0.getParentColumns();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      config0.setDriverPath("UL");
      foreignKeyConstraint0.addChildColumn(tableColumn0);
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.clone();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getParentColumns();
      tableColumn0.removeAParentFKConstraint();
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo((ForeignKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, " via ", 0, 0);
      Config config0 = Config.getInstance();
      foreignKeyConstraint0.getParentColumns();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      config0.setDriverPath("UL");
      foreignKeyConstraint0.addChildColumn(tableColumn0);
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.clone();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean0 = foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getDeleteRuleName();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string1);
      
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getChildTable();
      boolean boolean1 = foreignKeyConstraint0.isImplied();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Config config0 = Config.getInstance();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      config0.getDb();
      config0.getSchemas();
      config0.setDriverPath((String) null);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn0, tableColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, " via ", 0, 0);
      Config config0 = Config.getInstance();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[15];
      stringArray0[0] = " via ";
      config0.getDbSpecificOptions();
      stringArray0[1] = ";";
      stringArray0[2] = " via ";
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      foreignKeyConstraint0.addParentColumn(tableColumn0);
      stringArray0[3] = " via ";
      foreignKeyConstraint0.isNullOnDelete();
      stringArray0[4] = "net.sourceforge.schemaspy.model.ForeignKeyConstraint";
      String string0 = "N,rgtzjO";
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", 0, 0);
      Config config0 = new Config();
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleName();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      foreignKeyConstraint0.addParentColumn(tableColumn0);
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean0 = foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getDeleteRuleName();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string0);
      
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getParentColumns();
      List<TableColumn> list1 = foreignKeyConstraint0.getChildColumns();
      assertFalse(list1.equals((Object)list0));
      
      foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean1 = foreignKeyConstraint0.isCascadeOnDelete();
      boolean boolean2 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string1);
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, " via ", 0, 0);
      Config.getInstance();
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      foreignKeyConstraint0.addChildColumn(tableColumn0);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.clone();
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string1);
      
      foreignKeyConstraint0.getParentColumns();
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      assertEquals(0, int0);
      
      foreignKeyConstraint0.addParentColumn(tableColumn0);
      foreignKeyConstraint0.addParentColumn(tableColumn0);
      foreignKeyConstraint0.addParentColumn(tableColumn0);
      boolean boolean0 = foreignKeyConstraint0.isReal();
      assertTrue(boolean0);
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, (-1688), 46);
      Config config0 = new Config();
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      linkedList0.removeAll(list0);
      linkedList0.clone();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentColumns();
      List<TableColumn> list1 = foreignKeyConstraint0.getChildColumns();
      ForeignKeyConstraint.toString(list1);
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(46, int0);
      
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean0 = foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getChildColumns();
      boolean boolean1 = foreignKeyConstraint0.isCascadeOnDelete();
      assertEquals((-1688), foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", 0, 0);
      Config config0 = new Config();
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.clone();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      int int0 = foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean0 = foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getDeleteRuleName();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string0);
      
      foreignKeyConstraint0.getDeleteRuleAlias();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean1 = foreignKeyConstraint0.isCascadeOnDelete();
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = foreignKeyConstraint0.isRestrictDelete();
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string1);
      
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.isNullOnDelete();
      boolean boolean3 = foreignKeyConstraint0.isNullOnDelete();
      assertTrue(boolean3 == boolean2);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string2);
      
      int int1 = foreignKeyConstraint0.getUpdateRule();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4583113296830845
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", 12, 12);
      Config config0 = new Config();
      foreignKeyConstraint0.getDeleteRule();
      boolean boolean0 = foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      LinkedList linkedList1 = new LinkedList<Object>();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(12, int0);
      
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean1 = foreignKeyConstraint0.isCascadeOnDelete();
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = foreignKeyConstraint0.isRestrictDelete();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.isNullOnDelete();
      boolean boolean3 = foreignKeyConstraint0.isNullOnDelete();
      assertTrue(boolean3 == boolean2);
      
      foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals(12, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, " via ", 0, 0);
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "O;STa<", (-3092), 3);
      Config.getInstance();
      foreignKeyConstraint1.isNullOnDelete();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.clone();
      foreignKeyConstraint1.getDeleteRuleAlias();
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint1.getParentColumns();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint1.isCascadeOnDelete();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint1.isCascadeOnDelete();
      foreignKeyConstraint1.isRestrictDelete();
      LinkedList<TableColumn> linkedList1 = new LinkedList<TableColumn>();
      ForeignKeyConstraint.toString(list0);
      Table table0 = null;
      try {
        table0 = new Table((Database) null, "", "C", "UTF-8", "R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.Table", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4260151319598084
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Config.getInstance();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "O;STa<", 0, 3);
      foreignKeyConstraint0.getParentTable();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.clone();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      linkedList0.pollFirst();
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean0 = foreignKeyConstraint0.isReal();
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string0);
      
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getChildColumns();
      boolean boolean1 = foreignKeyConstraint0.isCascadeOnDelete();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.isCascadeOnDelete();
      boolean boolean2 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean2 == boolean0);
      
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.isNullOnDelete();
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string2);
      
      boolean boolean3 = foreignKeyConstraint0.isNullOnDelete();
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, " via ", 0, 0);
      Config.getInstance();
      foreignKeyConstraint0.getParentColumns();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      foreignKeyConstraint0.addParentColumn(tableColumn0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.pollFirst();
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleAlias();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getChildColumns();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.isRestrictDelete();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      ForeignKeyConstraint foreignKeyConstraint1 = null;
      try {
        foreignKeyConstraint1 = new ForeignKeyConstraint((TableColumn) null, tableColumn0, 511, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.736339051105066
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", 0, 0);
      Config config0 = new Config();
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentTable();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.clone();
      linkedList0.pollFirst();
      foreignKeyConstraint0.getDeleteRule();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getDeleteRuleAlias();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.isCascadeOnDelete();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint0.isCascadeOnDelete();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "java.util.LinkedList@0000000003", 0, 1);
      foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      foreignKeyConstraint1.isNullOnDelete();
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.isRestrictDelete();
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint1.isNullOnDelete();
      foreignKeyConstraint1.isCascadeOnDelete();
      foreignKeyConstraint1.isNullOnDelete();
      foreignKeyConstraint1.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleName();
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }
}
