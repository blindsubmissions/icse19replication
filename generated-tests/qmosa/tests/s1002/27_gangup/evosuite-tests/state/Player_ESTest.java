/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:02:32 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.gangBoss();
      party0.id = (int) (short)4919;
      boolean boolean0 = false;
      player0.setDead(1083L, false);
      player0.next = party0;
      player0.setY(1.0F);
      player0.getMoney();
      player0.head = party0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)0;
      player0.unpack(byteArray0);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-830), "", "", (-830), 0);
      player0.getSubparty();
      player0.setZ(0.0F);
      player0.setDead((-1759L));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 0A000049
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((-4201), "AQ|]2zO[VKi{", (-312));
      player0.setZ((-4201));
      player0.gangStrength();
      player0.getIP();
      byte[] byteArray0 = new byte[6];
      player0.gangStrength();
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)42;
      player0.unpack(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte) (-102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-2301), ",&t(X$B*x3W|TD", "state.Party", 2045, (-78));
      assertTrue(player0.isConnected());
      
      player0.setConnected(false);
      player0.gangStrength();
      player0.gangStrength();
      float float0 = player0.getY();
      assertFalse(player0.isConnected());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setMoney(1.0F);
      Player player1 = new Player();
      player1.head = (Party) player0;
      player0.head = (Party) player1;
      player0.type();
      player0.setY(5);
      assertEquals(1.0F, player0.getMoney(), 0.01F);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-94);
      player1.unpack(byteArray0);
      player1.setDead(0L, false);
      assertEquals("Player-1", player1.getName());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-92);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      player0.setDead();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player((-2546), "gui.ModuleBrowserDialog$ModuleFilter", 0);
      player0.setMoney(0);
      player0.setX((-2546));
      player0.setConnected(true);
      player0.setZ(0);
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(236, "", "HiT;%=whgomjX}", (-97), 5);
      player0.getSubparty();
      Player player1 = new Player(236, "module.ModuleBrowserDialog$ModuleFilter", 0);
      player0.setJoinOK(player1, true);
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      player0.getName();
      assertEquals((-97), player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(5, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(95, "r/G]OBDN<S)", ".*[.]class$", (-1887));
      player0.setX((-1887));
      player0.setDead((long) 95);
      player0.reset(false);
      player0.type();
      Player player1 = new Player((-2019), "r/G]OBDN<S)", (-2019));
      player0.isJoinOK(player1, false);
      player1.add(player0);
      player1.getPictureId();
      player0.pack();
      player1.getTimeOfDeath();
      player1.setJoinOK(player0, true);
      player0.setZ((-713.0F));
      assertEquals((-713.0F), player0.getZ(), 0.01F);
      
      boolean boolean0 = player1.isConnected();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      player0.toString();
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("state.Party");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      player0.pack(dataOutputStream0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((-135), "", 10);
      Player player1 = new Player();
      player0.head = (Party) player1;
      player0.reset(true);
      player0.getStrength();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((-1778), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1778));
      Player player1 = new Player((short)4919);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-94);
      player1.unpack(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte) (-91);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      player1.next = (Party) player0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      player0.unpack(byteArray1);
      player0.setJoinOK(player1, true);
      player0.setDead();
      player0.getTimeOfDeath();
      player0.toString();
      boolean boolean0 = player0.isDead();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6393405872324323
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(0, "oRNX<0SAR]8AvuhtV'K", "oRNX<0SAR]8AvuhtV'K", 0, 688);
      player0.getPictureId();
      player0.setConnected(true);
      Player player1 = new Player(5, "state.Player$JoinInfo", (-3895));
      player0.setJoinOK(player1, false);
      player0.setConnected(true);
      Player player2 = new Player(5, "state.Player$JoinInfo", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 4, 0);
      player0.setJoinOK(player2, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      player2.unpack(byteArray0);
      player0.id = 5;
      player0.setZ(168.00449F);
      player0.getTimeOfDeath();
      player0.getStrength();
      player2.getTimeOfDeath();
      player0.isJoinOK(player2, true);
      assertEquals(168.00449F, player0.getZ(), 0.01F);
      
      boolean boolean0 = player2.isDead();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, "", "", (short)4919);
      player0.remove(player1);
      assertEquals(4919, player1.getPictureId());
      
      Player player2 = new Player();
      boolean boolean0 = player0.isJoinOK(player2, false);
      assertFalse(boolean0);
      
      float float0 = player0.getX();
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
      assertFalse(player0.isDead());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5070264355574183
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((-1778), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1778));
      Player player1 = new Player((short)4919);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)0;
      player0.setConnected(true);
      Player player2 = new Player(7168, "", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (short)4919, (-2639));
      Player player3 = new Player((byte)0, ".*[.]class$", "K 5`)", (short)4919);
      player3.setJoinOK(player1, true);
      player2.unpack(byteArray0);
      player2.setZ(0.1F);
      Player player4 = new Player((-1778), "", "", (byte)51, (-2639));
      Party party0 = player4.prev;
      player2.add((Party) null);
      player3.getTimeOfDeath();
      player2.getStrength();
      player1.getTimeOfDeath();
      player3.isJoinOK(player2, true);
      assertEquals(0.1F, player2.getZ(), 0.01F);
      
      player3.isDead();
      player3.isJoinOK(player1, false);
      player1.isJoinOK(player0, false);
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Player player0 = new Player();
      player0.setDead((long) 6);
      float float0 = Player.MOVE_DISTANCE;
      player0.reset(true);
      float float1 = Player.MOVE_DISTANCE;
      Party party0 = player0.prev;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "state.Party");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      player0.unpack(byteArray0);
      Player player1 = new Player((-1), "Jx`yZ91", 3655);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Player player0 = new Player();
      player0.reset(true);
      player0.reset(false);
      Player player1 = new Player((short)4919, "(]|!D?r", "(]|!D?r", (short)4919, (short)4919);
      player1.setJoinOK(player0, true);
      player1.setDead(1920L);
      player0.isJoinOK(player1, true);
      System.setCurrentTimeMillis((short)4919);
      player1.isJoinOK(player0, true);
      System.setCurrentTimeMillis(787L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((short)4919);
      System.setCurrentTimeMillis((short)4919);
      player1.id = (int) (short)4919;
      System.setCurrentTimeMillis((-1874L));
      System.setCurrentTimeMillis(15001L);
      player1.isJoinOK(player0, true);
      System.setCurrentTimeMillis(1920L);
  }
}
