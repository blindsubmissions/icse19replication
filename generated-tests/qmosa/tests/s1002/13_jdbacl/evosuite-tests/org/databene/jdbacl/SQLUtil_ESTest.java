/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:07:09 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.isQuery("A@8G}8su2&(.oY");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A@8G}8su2&(.oY";
      stringArray0[1] = "A@8G}8su2&(.oY";
      String string0 = "//";
      SQLUtil.innerJoin("A@8G}8su2&(.oY", stringArray0, "//", "A@8G}8su2&(.oY", stringArray0);
      String string1 = "";
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("//", "A@8G}8su2&(.oY", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("//");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '//'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      SQLUtil.mutatesDataOrStructure("");
      DBConstraint dBConstraint0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.parseColumnTypeAndSize(" ORDER BY ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{!Q?4'0\fm]aO@YJ%v";
      stringArray0[1] = " ORDER BY ";
      stringArray0[2] = "Md=el2Po";
      stringArray0[3] = "";
      stringArray0[4] = " ORDER BY ";
      stringArray0[5] = "?{F_R'(x7jy^K-o";
      stringArray0[6] = "w9(!ui[pDBiX'miL.Su";
      stringArray0[7] = " ORDER BY ";
      stringArray0[8] = " ORDER BY ";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("({!Q?4'0\fm]aO@YJ%v,  ORDER BY , Md=el2Po, ,  ORDER BY , ?{F_R'(x7jy^K-o, w9(!ui[pDBiX'miL.Su,  ORDER BY ,  ORDER BY )", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "#U)-E~yR";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("Unknown constraint type:  = 'Unknown constraint type: ' AND CsRF^~` = 'CsRF^~`' AND K]zt9gsSgKCdjv = 'K]zt9gsSgKCdjv' AND  = '' AND  = '' AND  = '' AND  = '' AND #U)-E~yR = '#U)-E~yR'", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("K]zt9gsSgKCdjv", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("", dBPackage0);
      dBPackage0.toString();
      dBProcedure0.toString();
      dBProcedure0.setOverload("80000012-00d0-fd77-3ed8-000a0a0b1900");
      dBProcedure0.setObjectId("");
      dBProcedure0.setOverload("CsRF^~`");
      String string1 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("K]zt9gsSgKCdjv.", string1);
      
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("80000012-00d0-fd77-3ed8-000a0a0b1900");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#U)-E~yR", defaultDBTable0, 7, "CsRF^~`");
      vector0.add((DBColumn) defaultDBColumn0);
      String string2 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("#U)-E~yR", string2);
      
      String string3 = SQLUtil.renderColumnListWithTableName("org.apache.derby.impl.sql.execute.OnceResultSet", stringArray0);
      assertEquals("org.apache.derby.impl.sql.execute.OnceResultSet.Unknown constraint type: , org.apache.derby.impl.sql.execute.OnceResultSet.CsRF^~`, org.apache.derby.impl.sql.execute.OnceResultSet.K]zt9gsSgKCdjv, org.apache.derby.impl.sql.execute.OnceResultSet., org.apache.derby.impl.sql.execute.OnceResultSet., org.apache.derby.impl.sql.execute.OnceResultSet., org.apache.derby.impl.sql.execute.OnceResultSet., org.apache.derby.impl.sql.execute.OnceResultSet.#U)-E~yR", string3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8848713335781606
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesStructure("");
      SQLUtil.isDML("call");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.h2.command.Parser";
      stringArray0[1] = "org.h2.command.Parser";
      stringArray0[2] = "org.h2.command.Parser";
      stringArray0[3] = "org.h2.command.Parser";
      stringArray0[4] = "org.h2.command.Parser";
      stringArray0[5] = "org.h2.command.Parser";
      stringArray0[6] = "org.h2.command.Parser";
      stringArray0[7] = "org.h2.command.Parser";
      stringArray0[8] = "org.h2.command.Parser";
      SQLUtil.renderColumnListWithTableName("org.h2.command.Parser", stringArray0);
      SQLUtil.mutatesDataOrStructure("drop table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.command.Parser");
      defaultDBTable0.setName("org.h2.command.Parser");
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'org.h2.command.Parser' has no foreign key with the columns (org.h2.command.Parser, org.h2.command.Parser, org.h2.command.Parser, org.h2.command.Parser, org.h2.command.Parser, org.h2.command.Parser, org.h2.command.Parser, org.h2.command.Parser, org.h2.command.Parser)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      String string0 = "z9itmw&SAqYzo";
      TableContainer tableContainer0 = new TableContainer("z9itmw&SAqYzo");
      tableContainer0.getTable("z9itmw&SAqYzo");
      tableContainer0.toString();
      DBDataType dBDataType0 = DBDataType.getInstance((-1431), "z9itmw&SAqYzo");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("z9itmw&SAqYzo", (DBTable) null, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("z9itmw&SAqYzo", (DBTable) null, dBDataType0);
      defaultDBColumn1.setTable((DBTable) null);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.isProcedureCall("z9itmw&SAqYzo");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z9itmw&SAqYzo, z9itmw&SAqYzo");
      String string1 = ">Ln?o]&U";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint(">Ln?o]&U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      defaultDBTable0.getIndex("null");
      TableContainer tableContainer0 = new TableContainer(" AND ", defaultDBTable0);
      SQLUtil.ownerDotComponent(tableContainer0);
      SQLUtil.typeAndName((DBObject) null);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      String string0 = ";{iMu5";
      // Undeclared exception!
      try { 
        DBDataType.getInstance(";{iMu5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[5] = "";
      String string0 = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("K]zt9gsSgKCdjv", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("", dBPackage0);
      dBPackage0.toString();
      dBProcedure0.toString();
      dBProcedure0.setOverload("80000012-00d0-fd77-3ed8-000a0a0b1900");
      dBProcedure0.setObjectId("");
      dBCatalog0.getSequences();
      dBProcedure0.setOverload("CsRF^~`");
      SQLUtil.ownerDotComponent(dBProcedure0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("80000012-00d0-fd77-3ed8-000a0a0b1900");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("gU:kN2J];k71}");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(468.2704718);
      SQLUtil.addOptionalCondition("gU:kN2J];k71}", stringBuilder1);
      assertEquals("468.2704718 or gU:kN2J];k71}", stringBuilder1.toString());
      
      String[] stringArray0 = new String[5];
      stringArray0[2] = "gU:kN2J];k71}";
      stringArray0[1] = "gU:kN2J];k71}";
      stringArray0[2] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isProcedureCall("Hn9Px,|t8WHa/(");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "null = null AND gU:kN2J];k71} = 'gU:kN2J];k71}' AND  = '' AND null = null AND null = null";
      String string0 = SQLUtil.leftJoin("", stringArray1, "org.hsqldb.TriggerDef", "execute", stringArray1);
      assertEquals("left join org.hsqldb.TriggerDef as execute on .null = null AND gU:kN2J];k71} = 'gU:kN2J];k71}' AND  = '' AND null = null AND null = null = execute.null = null AND gU:kN2J];k71} = 'gU:kN2J];k71}' AND  = '' AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("DR<+Nl1j");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, "*Gt#L9");
      stringBuilder1.insert(0, true);
      StringBuilder stringBuilder2 = stringBuilder1.delete(0, 260);
      stringBuilder2.replace(0, 260, "DR<+Nl1j");
      stringBuilder2.append('t');
      stringBuilder2.delete(0, 0);
      SQLUtil.addOptionalCondition("</H(\"kwn>!1H", stringBuilder2);
      assertEquals("DR<+Nl1jt or </H(\"kwn>!1H", stringBuilder2.toString());
      
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<`h_hOi{s2Wb");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<`h_hOi{s2Wb";
      stringArray0[1] = " \r\t\n";
      stringArray0[2] = "K`2]";
      stringArray0[3] = "DR<+Nl1j";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "K`2]", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT K`2] PRIMARY KEY (<`h_hOi{s2Wb,  \r\t\n, K`2], DR<+Nl1j)", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("isValid(int)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("isValid(int)", stringBuilder0);
      assertEquals("isValid(int)", stringBuilder0.toString());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")Z!SreC";
      stringArray0[1] = "";
      stringArray0[2] = "isValid(int)";
      stringArray0[3] = "";
      stringArray0[4] = ")Z!SreC";
      String string0 = SQLUtil.join(")Z!SreC", ")Z!SreC", stringArray0, "", ")Z!SreC", stringArray0);
      assertEquals(")Z!SreC join  as )Z!SreC on )Z!SreC.)Z!SreC = )Z!SreC.)Z!SreC and )Z!SreC. = )Z!SreC. and )Z!SreC.isValid(int) = )Z!SreC.isValid(int) and )Z!SreC. = )Z!SreC. and )Z!SreC.)Z!SreC = )Z!SreC.)Z!SreC", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("gU:kN2J];k71}");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(468.2704718);
      SQLUtil.addOptionalCondition("gU:kN2J];k71}", stringBuilder1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gU:kN2J];k71}";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "gU:kN2J];k71}";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "gU:kN2J];k71}";
      stringArray1[1] = "gU:kN2J];k71}";
      stringArray1[2] = "gU:kN2J];k71}";
      // Undeclared exception!
      try { 
        SQLUtil.join("", "gU:kN2J];k71}", stringArray0, "", "gU:kN2J];k71}", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3688188099830025
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("isValid(int)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      defaultDBTable0.getUniqueConstraints(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]@Zc]t9}G-@y+";
      stringArray0[1] = "isValid(int)";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("]@Zc]t9}G-@y+", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("]@Zc]t9}G-@y+ = ']@Zc]t9}G-@y+' AND isValid(int) = 'isValid(int)' AND null = null AND null = null AND null = null", dBSchema0);
      dBPackage0.toString();
      DBProcedure dBProcedure0 = new DBProcedure("isValid(int)", dBPackage0);
      SQLUtil.normalize("isValid(int)", false);
      dBProcedure0.setOverload("IGNORECASE");
      String string0 = "80000022-00d0-fd77-3ed8-000a0a0b1900";
      DBProcedure dBProcedure1 = new DBProcedure("80000022-00d0-fd77-3ed8-000a0a0b1900", dBPackage0);
      dBProcedure1.setOverload("]@Zc]t9}G-@y+ = ']@Zc]t9}G-@y+' AND isValid(int) = 'isValid(int)' AND null = null AND null = null AND null = null");
      SQLUtil.ownerDotComponent(dBProcedure1);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      String string1 = "s7";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("s7");
      int int0 = 500;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("80000022-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable1, 500, "isValid(int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h";
      stringArray0[1] = "] key: ";
      stringArray0[2] = "";
      String string0 = SQLUtil.join("", "deleteisvalid(int)", stringArray0, "] key: ", "] key: ", stringArray0);
      assertEquals("] key:  as ] key:  on deleteisvalid(int).h = ] key: .h and deleteisvalid(int).] key:  = ] key: .] key:  and deleteisvalid(int). = ] key: .", string0);
      
      SQLUtil.removeComments("h");
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("isValid(int)", stringBuilder0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")Z!SreC";
      stringArray0[1] = "";
      stringArray0[2] = "isValid(int)";
      stringArray0[3] = "";
      stringArray0[4] = ")Z!SreC";
      String string0 = SQLUtil.join(")Z!SreC", ")Z!SreC", stringArray0, "", ")Z!SreC", stringArray0);
      assertEquals(")Z!SreC join  as )Z!SreC on )Z!SreC.)Z!SreC = )Z!SreC.)Z!SreC and )Z!SreC. = )Z!SreC. and )Z!SreC.isValid(int) = )Z!SreC.isValid(int) and )Z!SreC. = )Z!SreC. and )Z!SreC.)Z!SreC = )Z!SreC.)Z!SreC", string0);
      
      String string1 = SQLUtil.normalize(")Z!SreC", false);
      assertEquals(") Z  ! SreC", string1);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" on ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY ()Z!SreC, , isValid(int), , )Z!SreC) REFERENCES null()Z!SreC, , isValid(int), , )Z!SreC)", string2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.5783252866601272
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "</H(\"kwn>!1H";
      String string1 = "DR<+Nl1j";
      StringBuilder stringBuilder0 = new StringBuilder("DR<+Nl1j");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, "*Gt#L9");
      int int0 = 260;
      boolean boolean0 = true;
      stringBuilder1.insert(0, true);
      StringBuilder stringBuilder2 = stringBuilder1.delete(0, 260);
      stringBuilder2.replace(0, 260, "DR<+Nl1j");
      StringBuilder stringBuilder3 = stringBuilder2.append('t');
      stringBuilder2.delete(0, 0);
      SQLUtil.addOptionalCondition("</H(\"kwn>!1H", stringBuilder2);
      String string2 = "";
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.normalize("</H(\"kwn>!1H", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<`h_hOi{s2Wb");
      String string3 = "K`2]";
      String[] stringArray0 = new String[4];
      stringBuilder1.append((float) 260);
      stringArray0[0] = "<`h_hOi{s2Wb";
      StringBuilder stringBuilder4 = new StringBuilder(0);
      SQLUtil.addOptionalCondition("K`2]", stringBuilder4);
      // Undeclared exception!
      try { 
        stringBuilder3.insert((-492), (CharSequence) stringBuilder1, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -492
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("DR<+Nl1j");
      stringBuilder0.chars();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, "*Gt#L9");
      stringBuilder1.insert(0, true);
      StringBuilder stringBuilder2 = stringBuilder1.delete(0, 260);
      stringBuilder2.replace(0, 260, "DR<+Nl1j");
      stringBuilder2.append('t');
      stringBuilder2.delete(0, 0);
      SQLUtil.addOptionalCondition("</H(\"kwn>!1H", stringBuilder2);
      assertEquals("DR<+Nl1jt or </H(\"kwn>!1H", stringBuilder2.toString());
      
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.removeComments("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<`h_hOi{s2Wb");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<`h_hOi{s2Wb";
      stringArray0[1] = "";
      stringArray0[2] = "BLOB SUB_TYPE ";
      stringArray0[3] = "DR<+Nl1j";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "BLOB SUB_TYPE ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"BLOB SUB_TYPE \" PRIMARY KEY (<`h_hOi{s2Wb, , BLOB SUB_TYPE , DR<+Nl1j)", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.056147717183396
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("isValid(int)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraints(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]@Zc]t9}G-@y+";
      stringArray0[1] = "isValid(int)";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("isValid(int)");
      DBPackage dBPackage0 = new DBPackage("]@Zc]t9}G-@y+ = ']@Zc]t9}G-@y+' AND isValid(int) = 'isValid(int)' AND null = null AND null = null AND null = null", (DBSchema) null);
      dBPackage0.toString();
      DBProcedure dBProcedure0 = new DBProcedure("isValid(int)", dBPackage0);
      SQLUtil.normalize("isValid(int)", false);
      dBProcedure0.setOverload("IGNORECASE");
      DBProcedure dBProcedure1 = new DBProcedure("80000022-00d0-fd77-3ed8-000a0a0b1900", dBPackage0);
      dBProcedure1.setOverload("]@Zc]t9}G-@y+ = ']@Zc]t9}G-@y+' AND isValid(int) = 'isValid(int)' AND null = null AND null = null AND null = null");
      SQLUtil.normalize("]@Zc]t9}G-@y+", false);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("s7");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("80000022-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable1, 500, "isValid(int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2055983590263932
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("DR<+Nl1j");
      stringBuilder0.append(0.0F);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, "*Gt#L9");
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, true);
      StringBuilder stringBuilder3 = stringBuilder1.delete(0, 260);
      stringBuilder3.replace(0, 260, "DR<+Nl1j");
      stringBuilder3.append('t');
      stringBuilder3.delete(0, 0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*Gt#L9";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "DR<+Nl1j";
      SQLUtil.removeComments("DR<+Nl1j");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray2 = new String[6];
      stringArray2[0] = "table null";
      stringArray2[1] = "setLoginTimeout";
      stringArray2[2] = "table null";
      stringArray2[3] = "table null";
      stringArray2[4] = "table null";
      stringArray2[5] = "table null";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.iapi.services.info.ProductVersionHolder", true, stringArray2);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, 0, "CLOB");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7478680974667575
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2444, "drop table");
      Integer integer0 = new Integer(4075);
      dBDataType0.isNumber();
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, dBDataType0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop table DROP TABLE(1) NULL", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "|2!$4fr", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("DR<+Nl1j");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      StringBuilder stringBuilder2 = stringBuilder0.insert(0, "*Gt#L9");
      stringBuilder2.appendCodePoint(260);
      StringBuilder stringBuilder3 = stringBuilder2.delete(0, 260);
      stringBuilder1.append('t');
      StringBuilder stringBuilder4 = stringBuilder3.append('t');
      SQLUtil.addRequiredCondition("*Gt#L9", stringBuilder4);
      assertEquals("tt and *Gt#L9", stringBuilder4.toString());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*Gt#L9";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "DR<+Nl1j";
      SQLUtil.removeComments("DR<+Nl1j");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray2 = new String[6];
      stringArray2[0] = "table null";
      stringArray2[2] = "table null";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray2[3] = "table null";
      stringArray2[4] = "table null";
      stringArray2[5] = "table null";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.iapi.services.info.ProductVersionHolder", true, stringArray2);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.apache.derby.iapi.services.info.ProductVersionHolder UNIQUE (table null, , table null, table null, table null, table null)", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder0 = new StringBuilder("DR<+Nl1j");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      StringBuilder stringBuilder2 = stringBuilder0.insert(0, "*Gt#L9");
      stringBuilder2.appendCodePoint(260);
      StringBuilder stringBuilder3 = stringBuilder2.delete(0, 260);
      stringBuilder1.append('t');
      StringBuilder stringBuilder4 = stringBuilder3.append('t');
      SQLUtil.addRequiredCondition("*Gt#L9", stringBuilder4);
      assertEquals("tt and *Gt#L9", stringBuilder4.toString());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*Gt#L9";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "DR<+Nl1j";
      SQLUtil.removeComments("DR<+Nl1j");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray2 = new String[6];
      stringArray2[0] = "table null";
      SQLUtil.join("table null", " NOT", stringArray0, "isDistinctSelect=[", "D53SYC>G", stringArray2);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(";!`*4VKaF\"z", true, "SYSCONSTRAINTS", "REPLACEBYTES");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ;!`*4VKaF\"z CHECK REPLACEBYTES", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("isValid(int)", stringBuilder0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")Z!SreC";
      stringArray0[1] = "";
      stringArray0[2] = "isValid(int)";
      stringArray0[3] = "";
      stringArray0[4] = ")Z!SreC";
      SQLUtil.join("ESq!axmxP_GI%", (String) null, stringArray0, "isva", "isva", stringArray0);
      SQLUtil.normalize(")Z!SreC", false);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("'CHECK'", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition(" ADD ", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("isValid(int) and  ADD CONSTRAINT 'CHECK' ", stringBuilder0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.34883209584303193
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("tScCA");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "isvalid", "(C&1-A", (UUID) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "1d(qbhpT!^`s", schemaDescriptor0, 103, false, false);
      GenericDescriptorList genericDescriptorList0 = tableDescriptor0.getTriggerDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DBSchema dBSchema1 = new DBSchema("org.apache.derby.impl.store.raw.data.ContainerOperation", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("isvalid", dBSchema1);
      DBProcedure dBProcedure0 = new DBProcedure("SYSIBM", dBPackage0);
      dBProcedure0.setOverload("4,]v?ow");
      DBProcedure dBProcedure1 = new DBProcedure("Multiple connections associated with this managed connection in non-sharing mode.", dBPackage0);
      dBProcedure1.setOverload("4,]v?ow");
      SQLUtil.normalize("S,xYM'r", true);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("isvali", defaultDBTable0, 4, "S,xYM'r");
      assertNull(defaultDBColumn0.getSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("isValid(int)", stringBuilder0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")Z!SreC";
      stringArray0[1] = "";
      stringArray0[2] = "isValid(int)";
      stringArray0[3] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/*", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("pjjbVIx");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("delete");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      mockPrintWriter0.println(0L);
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter0);
      assertEquals("pjjbVIx", defaultDBTable1.getName());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0114042647073518
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("SELECT * FROM ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SELECT * FROM ");
      DBDataType.getInstance(2298, "Xh%Q");
      boolean boolean0 = SQLUtil.isProcedureCall("SELECT * FROM ");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog SELECT * FROM ", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("tScCA");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "isvalid", "(C&1-A", (UUID) null, false);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "1d(qbhpT!^`s", schemaDescriptor0, 103, false, false);
      tableDescriptor0.getTriggerDescriptorList();
      dBSchema0.getTable("2+MHw4Re0S_");
      DBDataType dBDataType0 = DBDataType.getInstance(440, "org.h2.index.PageDataLeaf");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("tScCA", (DBTable) null, dBDataType0, integer0, integer0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      System.setCurrentTimeMillis(3);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("tScCA", string0);
      
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("tScCA ORG.H2.INDEX.PAGEDATALEAF(2,2) NULL", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0870753771611175
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2496), "2kw39ojmj%wfm[n");
      dBDataType0.isAlpha();
      SQLUtil.normalize("1.3`bPKBUGsd1H+kJ", true);
      Integer integer0 = RawTransaction.COMMIT;
      Integer.compare((-1395), 322);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1.3`bPKBUGsd1H+kJ", (DBTable) null, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Y6|jWOC]tbOc&._ke", (DBTable) null, dBDataType0, integer1, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("z{GnP~i9.G|", (DBTable) null, dBDataType0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("DR<+Nl1j");
      stringBuilder0.insert(0, "cancel");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DR<+Nl1j";
      stringArray0[1] = "cancel";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("DR<+Nl1j");
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "", false, "XYZ;$N.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'XYZ;$N.' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("DR<+Nl1j");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, "*Gt#L9");
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, true);
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_Pp$D@Maq.9", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(2462, "D53SyC>g");
      Integer integer0 = new Integer(4075);
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",s@DHMy^<d+Kgs`o(", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "_u''`Q!k'1LV#YQd", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder2);
      NameSpec nameSpec1 = NameSpec.NEVER;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      Locale locale0 = Locale.ENGLISH;
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '%';
      mockPrintWriter0.print(charArray0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "DR<+Nl1j", (Object[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec1, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      boolean boolean0 = SQLUtil.isQuery("select'cvew7gv:k~c-@vx");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBDataType.getInstance((-1301), "Xh%Q");
      boolean boolean0 = SQLUtil.isProcedureCall("create materialized viewisvalid(int)");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(">ta%6_NhiTeFe7%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")Z!SreC";
      stringArray0[1] = "";
      stringArray0[3] = "isValid(int)";
      stringArray0[3] = ")Z!SreC";
      stringArray0[4] = ")Z!SreC";
      SQLUtil.join("ESq!axmxP_GIe%", (String) null, stringArray0, "isva", "isva", stringArray0);
      SQLUtil.normalize(")Z!SreC", true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(")Z!SreC", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      dBForeignKeyConstraint0.setDoc("Locked by another process");
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("nullCONSTRAINT )Z!SreC ", stringBuilder0.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0488126818826367
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "- ");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("isValid(int)", stringBuilder0);
      String[] stringArray0 = new String[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.join("Cph5)D-;nX}#0 ", "drop index1yadb,d:%cg", stringArray0, "", "B-+*[P_Wp.3Z", stringArray0);
      SQLUtil.normalize("Cph5)D-;nX}#0  join  as B-+*[P_Wp.3Z on drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null", true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder2 = new StringBuilder((CharSequence) "Cph5)D-;nX}#0  join  as B-+*[P_Wp.3Z on drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null");
      SQLUtil.addRequiredCondition("newBootPassword/newEncryptionKey attribute", stringBuilder1);
      stringBuilder2.append(500L);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((int) (byte) (-87), (long) (byte) (-87));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -87
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "call1yadb,d:%cg";
      SQLUtil.mutatesDataOrStructure("call1yadb,d:%cg");
      SQLUtil.isProcedureCall("call1yadb,d:%cg");
      SQLUtil.removeComments("call1yadb,d:%cg");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "call1yadb,d:%cg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error at the beginning 
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6823014993029086
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "- ");
      SQLUtil.addOptionalCondition("isValid(int)", stringBuilder0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "isValid(int)";
      stringArray0[1] = "";
      stringArray0[3] = "isValid(int)";
      stringArray0[3] = "isValid(int)";
      stringArray0[4] = "isValid(int)";
      SQLUtil.join("ESq!axmxP_GIe%", (String) null, stringArray0, (String) null, (String) null, stringArray0);
      SQLUtil.normalize("isValid(int)", true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("isValid(int)", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      dBForeignKeyConstraint0.setDoc("Locked by another process");
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("isValid(int) and nullCONSTRAINT isValid(int) ", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT isValid(int) FOREIGN KEY (isValid(int), , , isValid(int), isValid(int)) REFERENCES null(isValid(int), , , isValid(int), isValid(int))", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.73798344858705
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "- ");
      SQLUtil.addOptionalCondition("isValid(int)", stringBuilder0);
      String[] stringArray0 = new String[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.join("Cph5)D-;nX}#0 ", "drop index1yadb,d:%cg", stringArray0, "", "B-+*[P_Wp.3Z", stringArray0);
      SQLUtil.normalize("Cph5)D-;nX}#0  join  as B-+*[P_Wp.3Z on drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null", true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = new StringBuilder((CharSequence) "Cph5)D-;nX}#0  join  as B-+*[P_Wp.3Z on drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null and drop index1yadb,d:%cg.null = B-+*[P_Wp.3Z.null");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("derby.version.major", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      assertFalse(nameSpec1.equals((Object)nameSpec0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0543563043733695
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "delete2kw39ojmj%wfm[n";
      DataStore dataStore0 = new DataStore("J");
      VirtualFile virtualFile0 = new VirtualFile("delete2kw39ojmj%wfm[n", dataStore0);
      virtualFile0.getOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SQLUtil.removeComments("org.postgresq");
      String string1 = "6R";
      SQLUtil.mutatesDataOrStructure("6R");
      SQLUtil.isDML("org.postgresq");
      SQLUtil.isQuery("select into");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isProcedureCall("delete2kw39ojmj%wfm[n");
      String string2 = "create unique index";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("create unique index", false, "select into", "XVS&2G~#e_zA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("isValid(int)", stringBuilder0);
      String[] stringArray0 = new String[5];
      SQLUtil.join((String) null, "isValid(int)", stringArray0, "alter index", "ioj00", stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.getCheckConstraints();
      defaultDBTable0.getIndex("-!im\"mA/XlLxo~");
      dBForeignKeyConstraint0.setDoc("drop materialized viewisvalid(int)");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("isValid(int)", stringBuilder1);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2);
      assertEquals("isValid(int) and isValid(int)", stringBuilder1.toString());
      assertEquals("isValid(int) and isValid(int)", stringBuilder0.toString());
  }
}
