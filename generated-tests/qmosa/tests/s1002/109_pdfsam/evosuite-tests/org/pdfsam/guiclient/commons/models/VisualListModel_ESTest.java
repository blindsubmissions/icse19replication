/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 08:36:15 GMT 2018
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.MemoryImageSource;
import java.awt.image.PixelGrabber;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.InputStream;
import java.time.Month;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.JComboBox;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.Rotation;
import org.pdfsam.guiclient.dto.VisualPageListItem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[8];
      intArray0[0] = (-143);
      intArray0[1] = 1393;
      intArray0[2] = (-2200);
      intArray0[3] = 1;
      intArray0[4] = (-2105);
      intArray0[5] = (-39);
      intArray0[6] = 0;
      intArray0[7] = 14;
      visualListModel0.undeleteElements(intArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.appendAllElements(linkedList0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = (-261);
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = 360;
      intArray0[2] = 360;
      intArray0[3] = 3;
      int int2 = 0;
      intArray0[4] = 0;
      intArray0[5] = 3;
      intArray0[6] = 5;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      visualListModel0.moveUpIndexes(intArray0);
      boolean boolean0 = false;
      visualListModel0.removeElements(0, (-312), false);
      visualListModel0.addAllElements((-261), (Collection<VisualPageListItem>) stack0);
      visualListModel0.appendAllElements(stack0);
      visualListModel0.appendAllElements(stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 285;
      boolean boolean0 = false;
      visualListModel0.moveDownIndex(285);
      visualListModel0.subList(285, 285, false);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(285, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 896;
      visualListModel0.moveUpIndex(896);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(896, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 896
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(0);
      visualListModel0.subList(0, 1392, false);
      visualListModel0.removeElements(11, 0, true);
      visualListModel0.getListDataListeners();
      visualListModel0.subList(0, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1392;
      intArray0[1] = 0;
      intArray0[2] = 11;
      intArray0[3] = 11;
      intArray0[4] = 11;
      intArray0[5] = 1392;
      visualListModel0.getElements();
      intArray0[6] = 11;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.clone();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.reverseElements(intArray0);
      int int0 = (-2037);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-2037), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2037
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.removeElements(intArray0, true);
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-5124);
      intArray0[3] = 1;
      visualListModel0.subList(1, 1, true);
      intArray0[4] = 0;
      visualListModel0.removeElements(intArray0, true);
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.getElementAt(1);
      visualListModel0.undeleteElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      visualListModel0.data = null;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 32;
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      hashSet0.removeAll(linkedHashSet0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) hashSet0);
      visualListModel0.removeElements(0, 32, false);
      visualListModel0.subList(32, 32, false);
      int int1 = 1207;
      LinkedHashSet<VisualPageListItem> linkedHashSet1 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(1207, (Collection<VisualPageListItem>) linkedHashSet1);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(0);
      visualListModel0.moveDownIndex((-71));
      int[] intArray0 = new int[6];
      intArray0[0] = (-71);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-71);
      intArray0[4] = (-71);
      intArray0[5] = 0;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.appendAllElements(vector0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-918);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      Collection<VisualPageListItem> collection0 = null;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-918), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -918
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = null;
      int int0 = (-808);
      visualListModel0.addAllElements((-808), (Collection<VisualPageListItem>) null);
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1);
      int int1 = 0;
      boolean boolean0 = true;
      visualListModel0.removeElements((-1), 0, true);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.appendAllElements(arrayList0);
      float[] floatArray0 = new float[0];
      Hashtable<RenderingHints.Key, Month> hashtable0 = new Hashtable<RenderingHints.Key, Month>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      Month month0 = Month.JUNE;
      // Undeclared exception!
      try { 
        renderingHints0.put(month0, arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.Month cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[6];
      intArray0[0] = (-4047);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-785);
      visualListModel0.subList((-1), 0);
      intArray0[4] = 0;
      visualListModel0.getListDataListeners();
      intArray0[5] = 927;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.getSize();
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.022808529414703
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[6];
      intArray0[0] = (-4047);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-785);
      visualListModel0.subList((-1), 0);
      intArray0[4] = 0;
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(intArray0, true);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-4047));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4047
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.253857589601352
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[6];
      intArray0[0] = (-4047);
      intArray0[1] = (-4047);
      intArray0[2] = 0;
      intArray0[3] = (-785);
      visualListModel0.subList((-4047), 0);
      intArray0[4] = 0;
      visualListModel0.getListDataListeners();
      intArray0[5] = 927;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.getSize();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(5, visualListModel0.getSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.removeElements(intArray0, false);
      intArray0[0] = 0;
      visualListModel0.moveUpIndex((-252));
      visualListModel0.subList(0, 0, true);
      intArray0[1] = 0;
      intArray0[2] = (-5124);
      visualListModel0.addElement((VisualPageListItem) null);
      intArray0[3] = 1;
      visualListModel0.subList(1, 1, true);
      intArray0[4] = 0;
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.getElementAt(1);
      visualListModel0.undeleteElements(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2429732264381466
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.appendAllElements(vector0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-918);
      vector0.add((VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.setData(vector0);
      visualListModel0.getElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.clone();
      visualListModel0.setData(vector0);
      visualListModel0.reverseElements(intArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.prependAllElements(treeSet0);
      visualListModel0.addAllElements((-71), (Collection<VisualPageListItem>) stack0);
      assertEquals(0, stack0.size());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.removeElements(intArray0, false);
      intArray0[0] = 0;
      visualListModel0.moveUpIndex((-252));
      visualListModel0.subList(0, 0, true);
      intArray0[1] = 0;
      intArray0[2] = (-5124);
      visualListModel0.addElement((VisualPageListItem) null);
      intArray0[3] = 1;
      visualListModel0.subList(1, 1, true);
      intArray0[4] = 0;
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.addElementAt((VisualPageListItem) null, 1438);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      visualListModel0.addAllElements(Integer.MAX_VALUE, (Collection<VisualPageListItem>) linkedHashSet0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.242973226438147
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.removeElements(intArray0, false);
      intArray0[0] = 0;
      visualListModel0.moveUpIndex((-252));
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, true);
      intArray0[1] = 0;
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.subList((-1657), 0, false);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElementAt(0, true);
      visualListModel0.addAllElements((-193), (Collection<VisualPageListItem>) null);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.getElementAt(0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.addAllElements(0, collection0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8891591637540215
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex((-1827));
      int[] intArray0 = new int[5];
      visualListModel0.removeElements(intArray0, false);
      intArray0[0] = 0;
      visualListModel0.moveUpIndex((-252));
      visualListModel0.subList(0, 0, true);
      intArray0[1] = 0;
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.subList(0, 0, false);
      visualListModel1.removeElements(intArray0, true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.undeleteElements(intArray1);
      visualListModel0.removeElements(intArray0, true);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(1299, "sEz)Mc!dXu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.253857589601352
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.removeElements(intArray0, false);
      intArray0[0] = 0;
      visualListModel0.subList((-1657), 1493);
      visualListModel0.getListDataListeners();
      visualListModel0.moveUpIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.getSize();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel1.setData(visualPageListItemArray0);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.removeElements(intArray0, false);
      intArray0[0] = 0;
      visualListModel0.moveUpIndex((-252));
      visualListModel0.subList(0, 0, true);
      intArray0[1] = 0;
      intArray0[2] = (-5124);
      visualListModel0.addElement((VisualPageListItem) null);
      intArray0[3] = 1;
      visualListModel0.subList(1, 1, true);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.addElementAt((VisualPageListItem) null, (-860));
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.setData(vector0);
      int[] intArray0 = new int[0];
      visualListModel0.getElements();
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      int int0 = 1;
      int int1 = (-1211);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)4;
      byteArray0[0] = (byte)4;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1, (-1211), byteArray0, 2900, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map size (-1211) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7480673485460896
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.moveUpIndex(981);
      visualListModel0.updateElementAt(981, (VisualPageListItem) null);
      visualListModel0.moveDownIndex(0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(981, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4583113296830845
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.appendAllElements(vector0);
      Vector<VisualPageListItem> vector1 = visualListModel1.data;
      vector1.add((VisualPageListItem) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (-918);
      intArray0[1] = (-918);
      intArray0[2] = (-918);
      intArray0[3] = (-918);
      intArray0[4] = (-918);
      intArray0[5] = 507;
      intArray0[6] = (-71);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.setData(vector1);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel1.getElements();
      VisualListModel visualListModel3 = new VisualListModel();
      VisualListModel visualListModel4 = new VisualListModel();
      visualListModel4.moveUpIndexes(intArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>(comparator0);
      treeSet0.descendingIterator();
      visualListModel0.appendAllElements(treeSet0);
      visualListModel0.getSize();
      visualListModel3.setData(visualPageListItemArray0);
      visualListModel4.removeElements((-430), (-71), true);
      // Undeclared exception!
      try { 
        visualListModel2.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1383330595080277
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      visualListModel0.moveUpIndex((-252));
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, true);
      intArray0[1] = 0;
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.removeElements(intArray0, false);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.reverseElements(intArray0);
      visualListModel2.elementChanged((VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel1.addAllElements(collection0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.rotateAnticlockwiseElements(intArray0);
      assertEquals(0, visualListModel3.getSize());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1383330595080277
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.appendAllElements(vector0);
      int[] intArray0 = new int[1];
      vector0.add((VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.subList((-1222), (-918), true);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.moveDownIndexes(intArray0);
      int int0 = 659;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(659, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 659
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[5];
      visualListModel0.removeElements(intArray1, false);
      intArray1[0] = 0;
      visualListModel0.moveUpIndex((-252));
      visualListModel0.subList(0, 0, true);
      intArray1[1] = 0;
      VisualListModel visualListModel1 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel1.setData(vector0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      int[] intArray2 = new int[0];
      visualListModel0.moveUpIndexes(intArray2);
      visualListModel0.appendAllElements(vector0);
      visualListModel1.getSize();
      VisualListModel visualListModel4 = new VisualListModel();
      visualListModel4.setData(visualPageListItemArray0);
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1065773332321154
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.appendAllElements(vector0);
      int[] intArray0 = new int[1];
      vector0.add((VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.setData(vector0);
      visualListModel0.getElements();
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.removeElements(intArray0, false);
      intArray0[0] = 0;
      visualListModel0.moveUpIndex((-252));
      visualListModel0.subList(0, 0, true);
      intArray0[1] = 0;
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.subList((-252), 208, false);
      visualListModel0.removeElements(intArray0, true);
      int[] intArray1 = new int[0];
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeElements(intArray0, true);
      visualListModel1.addElementAt((VisualPageListItem) null, 1);
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      assertFalse(visualListModel0.equals((Object)visualListModel1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3066687254045313
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.getValidElements();
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-918);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.setData(vector0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(visualPageListItemArray0);
      visualListModel2.removeListDataListener(jComboBox0);
      visualListModel2.appendAllElements(vector0);
      visualListModel2.getSize();
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[1];
      visualPageListItemArray1[0] = null;
      visualListModel1.setData(visualPageListItemArray1);
      try { 
        visualListModel1.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -918
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.removeElements(intArray0, false);
      int int0 = 0;
      intArray0[0] = 0;
      visualListModel0.moveUpIndex((-252));
      visualListModel0.subList(0, 0, true);
      intArray0[1] = 0;
      intArray0[2] = (-5124);
      visualListModel0.addElement((VisualPageListItem) null);
      int int1 = 0;
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, 1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2110688711446103
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.moveUpIndex(981);
      visualListModel0.updateElementAt(981, (VisualPageListItem) null);
      visualListModel0.moveDownIndex(0);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) visualListModel0;
      objectArray0[1] = (Object) visualListModel0;
      objectArray0[2] = (Object) visualListModel1;
      objectArray0[3] = (Object) visualListModel0;
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(objectArray0);
      visualListModel2.removeListDataListener(jComboBox0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.appendAllElements(arrayList0);
      visualListModel2.getSize();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel2.setData(visualPageListItemArray0);
      visualListModel2.reverseElements(intArray0);
      assertEquals(5, visualListModel2.getSize());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8866967846580787
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.getValidElements();
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-918);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.setData(vector0);
      visualListModel0.getElements();
      VisualListModel visualListModel1 = new VisualListModel();
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -918
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.appendAllElements(vector0);
      int[] intArray0 = new int[1];
      vector0.add((VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.setData(vector0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.069202465820362
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.appendAllElements(vector0);
      int[] intArray0 = new int[1];
      VisualPageListItem visualPageListItem0 = null;
      vector0.add((VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.setData(vector0);
      visualListModel0.getElements();
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.341994252232425
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.appendAllElements(vector0);
      int[] intArray0 = new int[1];
      vector0.add((VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.setData(vector0);
      visualListModel0.getElements();
      vector0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.moveUpIndexes(intArray0);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.appendAllElements(hashSet0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.addElement((VisualPageListItem) null);
      visualListModel3.addAllElements((Collection<VisualPageListItem>) hashSet0);
      int int0 = visualListModel1.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1383330595080277
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.appendAllElements(stack0);
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.getElements();
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3701349548823623
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.appendAllElements(stack0);
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel1.elementChanged((VisualPageListItem) null);
      visualListModel0.moveDownIndex((-2673));
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.removeElements(0, 0, true);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.893788232391138
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      int[] intArray0 = new int[1];
      vector0.add((VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.setData(vector0);
      vector0.add((VisualPageListItem) null);
      visualListModel0.getElements();
      vector0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.moveUpIndexes(intArray0);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      int int0 = 0;
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }
}
