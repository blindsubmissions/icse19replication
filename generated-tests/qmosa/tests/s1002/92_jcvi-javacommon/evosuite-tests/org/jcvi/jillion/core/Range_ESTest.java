/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:07:07 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 0L;
      long long1 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0752205480543715
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483647L;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-232L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(0L);
      range0.isSubRangeOf(range1);
      range1.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("w0J90l!)C6m1z?J7<a", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse w0J90l!)C6m1z?J7<a into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      Range range2 = range0.intersection(range1);
      range2.getEnd(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long1 = 65535L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 286L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.11701255497465
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.of((-2479L));
      long long0 = 0L;
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 0L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range.Builder range_Builder0 = new Range.Builder(2955L);
      range_Builder0.expandBegin(1844L);
      range_Builder0.copy();
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("#*~}b{?; _a.++");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse #*~}b{?; _a.++ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3254283597131136
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      assertFalse(range1.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4876997150596765
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getBegin();
      Range range1 = Range.ofLength(1L);
      range0.getLength();
      range1.split(1L);
      range0.endsBefore(range1);
      range1.iterator();
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.parseRange("J3SC7%(YINfr-fkZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse J3SC7%(YINfr-fkZ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 2170L;
      Range.Builder range_Builder0 = new Range.Builder(2170L);
      range_Builder0.shift(2170L);
      long long1 = 0L;
      range_Builder0.expandBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, 2170L);
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(";4h$(If,8cC|NunXx\"S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.;4h$(If,8cC|NunXx\"S
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1858L), (-1858L));
      range_Builder0.contractEnd(0L);
      range_Builder0.contractEnd(0L);
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd((-1858L));
      range_Builder1.contractEnd((-1858L));
      range_Builder1.shift((-1858L));
      range_Builder1.expandBegin(0L);
      Range range0 = Range.of(578L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0955086579368136
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of(2692L);
      Range range1 = Range.ofLength(2692L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.7110643168511834
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of(0L, 805L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      long long0 = 0L;
      Range range2 = Range.of(0L, 0L);
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.8066624897703174
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range2 = range1.intersection(range0);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      Range range3 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 1 ]/RB", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.contractBegin(1L);
      range_Builder0.expandEnd((-1L));
      Range range4 = Range.of(range_CoordinateSystem1, 1L, 1L);
      assertTrue(range4.isEmpty());
      
      long long1 = range3.getLength();
      assertTrue(long1 == long0);
      
      range1.iterator();
      range1.getEnd();
      long long2 = range3.getEnd(range_CoordinateSystem1);
      assertEquals(2147483647L, long2);
      
      Range range5 = Range.of(0L);
      boolean boolean0 = range5.intersects(range2);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.587422447503994
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      Range range2 = range0.intersection(range1);
      range2.getEnd(range_CoordinateSystem0);
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range.of(range_CoordinateSystem0, 780L, 780L);
      range0.getEnd(range_CoordinateSystem2);
      range3.getBegin();
      range_CoordinateSystem0.getAbbreviatedName();
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8943995444300383
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.5933021238095626
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.ofLength(1844L);
      Range.Builder range_Builder0 = new Range.Builder(2955L);
      range_Builder0.expandBegin(1844L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L));
      range0.complement(range1);
      range2.getBegin();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1058L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4965075614664793
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of((-2479L));
      Range range1 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3074983707954053
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = (-654L);
      Range range0 = Range.of((-654L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(1395L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.044820482464577
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = null;
      List<Range> list0 = new LinkedList<Range>();
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      long long0 = (-4961L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1541L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1541 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9204897427302954
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 799L, 799L);
      Range range1 = Range.ofLength(4294967295L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      range2.complement(range0);
      range0.getEnd();
      Range range3 = Range.of((-13L));
      Range range4 = Range.of(803L);
      range4.split(799L);
      Object object0 = new Object();
      range2.equals(object0);
      range3.getBegin();
      range0.isSubRangeOf(range3);
      range2.intersects(range3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange("-<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse -< into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.078014567747475
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = (-2147483661L);
      long long1 = 587L;
      Range range0 = Range.of((-2147483661L), 587L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.077537443905717
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 799L, 799L);
      Range range1 = Range.ofLength(4294967295L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      range2.complement(range0);
      Range range3 = Range.of((-13L));
      range0.toString();
      range3.equals("number of entries must be >=0");
      Range range4 = Range.of(803L);
      range4.split(799L);
      Object object0 = new Object();
      range2.equals(object0);
      range0.isSubRangeOf(range3);
      range2.intersects(range3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange("-<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse -< into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.7729207803743012
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 286L);
      Range range1 = Range.ofLength(2147483647L);
      range0.equals(range1);
      range1.split(4294967295L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      long long0 = 0L;
      Range.of(0L, 799L);
      // Undeclared exception!
      try { 
        Range.of((-1865L), (-3497L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.198437171478363
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        Range.ofLength((-2326L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6308234185290194
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of((-654L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin();
      assertEquals((-654L), long0);
      
      Long long1 = Long.getLong("J#a-", (-468L));
      Long.divideUnsigned((-1439L), (-1439L));
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(2147483647L, 9223372036854775807L);
      range0.isSubRangeOf(range1);
      boolean boolean1 = range1.endsBefore(range0);
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.shift(2147483647L);
      range_Builder0.contractEnd(2751L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2816L, 2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range2 = Range.of(802L);
      assertFalse(range2.isEmpty());
      
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.copy();
      boolean boolean2 = range0.isSubRangeOf(range1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3163737216861184
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.408335443565482
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getBegin();
      Range range1 = Range.ofLength(20L);
      range0.getLength();
      range1.split(20L);
      range0.endsBefore(range1);
      Range.of(9223372036854775807L);
      range0.startsBefore(range1);
      range1.iterator();
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("Wa6uLc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Wa6uLc into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4738033482643194
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      range0.equals(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = 786L;
      long long1 = (-1L);
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        range1.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.92865977602412
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 799L, 799L);
      Range range1 = Range.ofLength(4294967295L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range2.complement(range0);
      long long0 = (-13L);
      Range.of((-13L));
      range1.complement(range2);
      range2.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-1722L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.349070278947687
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.of((-9223372036854775808L));
      Range.of(1289L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      assertNotSame(range_Builder0, range_Builder2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.463380198681568
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(587L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of((-2187L), 1L);
      range0.isSubRangeOf(range1);
      range1.endsBefore(range0);
      range1.iterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.shift((-1L));
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(407L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3142957219402285
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of(1289L, 2147483647L);
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 2147483647, -9223372036854775808 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.444885956977434
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of(4504L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      range0.equals(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = 786L;
      long long1 = (-1L);
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        range1.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=4.151504773925969
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 799L, 799L);
      Range range1 = Range.ofLength(4294967295L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range2.complement(range0);
      assertEquals(2, list0.size());
      
      Range range3 = Range.of((-13L));
      range0.toString();
      Range range4 = Range.of(806L, 2147483647L);
      range2.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.parseRange("[ 799 .. 799 ]/0B", range_CoordinateSystem1);
      range3.endsBefore(range5);
      range3.iterator();
      assertFalse(range3.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147483648L), (-2218L));
      Range.Builder range_Builder1 = range_Builder0.shift((-790L));
      range_Builder1.contractEnd((-2218L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range6 = Range.of(799L);
      assertTrue(range6.equals((Object)range5));
      assertNotSame(range6, range5);
      
      Range.Builder range_Builder3 = new Range.Builder();
      Object object0 = new Object();
      Range range7 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range4.endsBefore(range7);
      assertFalse(boolean0);
  }
}
