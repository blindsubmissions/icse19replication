/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 08:37:21 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.MapMouseMotionListener;
import freemind.controller.NodeMotionListener;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.filemode.FileMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.sql.Timestamp;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.format.DateTimeParseException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.help.ForwardAction;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicDesktopPaneUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.util.ParsedURL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(238, color0.getBlue());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setDefaultCapable(false);
      ImageIcon imageIcon0 = new ImageIcon("", "day");
      jDayChooser_DecoratorButton0.setIcon(imageIcon0);
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocus();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-740), 0, 238, (-1));
      mockGregorianCalendar0.set(238, (-1), (-469), (-377), 584, 0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-282), 0, (-282), 0, 0);
      focusEvent0.setSource(mockGregorianCalendar1);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(238, 0, 2217, 878, 8944);
      mockGregorianCalendar2.clone();
      mockGregorianCalendar2.setFirstDayOfWeek(0);
      mockGregorianCalendar2.after(mockGregorianCalendar1);
      focusEvent0.setSource(mockGregorianCalendar2);
      jDayChooser0.focusGained(focusEvent0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      Color.getColor("day", 0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("n($%A(,ersjL@ &h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayLanguage(locale1);
      locale0.getDisplayVariant(locale1);
      locale0.getExtensionKeys();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setYear(3319);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1839, (-277L), 5, 0, 'N');
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.drawWeeks();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getLocale();
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getHierarchyBoundsListeners();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.getDayPanel();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getVerifyInputWhenFocusTarget();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.setMaxDayCharacters(1679);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      jDayChooser0.setInheritsPopupMenu(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMaxSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.691693794629735
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Object[][] objectArray0 = new Object[4][7];
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray1[1] = (Object) jDayChooser0;
      objectArray1[2] = (Object) jDayChooser0;
      objectArray1[3] = (Object) jDayChooser0;
      objectArray1[4] = (Object) jDayChooser0;
      objectArray1[5] = (Object) jDayChooser0;
      objectArray1[6] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[6];
      Object object0 = new Object();
      objectArray2[0] = object0;
      Object object1 = jDayChooser0.getTreeLock();
      objectArray2[1] = object1;
      Object object2 = jDayChooser0.getTreeLock();
      objectArray2[2] = object2;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) jDayChooser0;
      objectArray2[5] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[2];
      objectArray3[0] = object2;
      objectArray3[1] = (Object) jDayChooser0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[3];
      objectArray4[0] = object0;
      objectArray4[1] = object0;
      objectArray4[2] = object0;
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[6];
      objectArray5[0] = object2;
      objectArray5[1] = object0;
      objectArray5[2] = object1;
      objectArray5[3] = object2;
      objectArray5[4] = (Object) jDayChooser0;
      objectArray5[5] = object1;
      JTable jTable0 = new JTable(objectArray0, objectArray5);
      Color color0 = jTable0.getGridColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.JAPAN;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(386);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayDeque1, locale_FilteringMode0);
      locale0.getUnicodeLocaleKeys();
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BasicDesktopPaneUI basicDesktopPaneUI0 = new BasicDesktopPaneUI();
      Dimension dimension0 = basicDesktopPaneUI0.getMaximumSize(jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.setSize(dimension0);
      // Undeclared exception!
      try { 
        jDayChooser_DecoratorButton0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      jDayChooser0.setEnabled(false);
      jDayChooser0.initDecorations();
      jDayChooser0.removeAll();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getLocale();
      int int0 = 587;
      jDayChooser0.setDay(587);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setFocus();
      int int1 = 210;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.691693794629735
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jDayChooser0.init();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ImageIcon imageIcon0 = new ImageIcon("day", ".-w3Fd*BZA=h");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ForwardAction forwardAction0 = new ForwardAction(".-w3Fd*BZA=h");
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setMonth(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-47), (-47), 324, (-831), 'N');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-790));
      boolean boolean1 = true;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setWeekOfYearVisible(false);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setYear((-790));
      jDayChooser0.setFocus();
      jDayChooser1.setYear((-790));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-356), 10L, 0, 26, 'r');
      jDayChooser1.keyPressed(keyEvent0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.updateUI();
      // Undeclared exception!
      try { 
        MockInstant.parse("day");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'day' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlignmentY(0.0F);
      jDayChooser0.setAlignmentY(0.0F);
      jDayChooser0.setOpaque(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getLocale();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getCharacterElement(0);
      LabelView labelView0 = new LabelView(element0);
      labelView0.getBackground();
      jDayChooser0.setSundayForeground((Color) null);
      FileDialog fileDialog0 = null;
      try {
        fileDialog0 = new FileDialog((Dialog) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-940));
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      jDayChooser0.setInheritsPopupMenu(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.updateUI();
      jDayChooser0.setMonth(46);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlignmentX(0.97F);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jDayChooser0.init();
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getInputVerifier();
      jDayChooser_DecoratorButton0.isFocusable();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, 4, true);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.691693794629735
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ENGLISH;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.init();
      jDayChooser0.getMinSelectableDate();
      Locale locale1 = Locale.TAIWAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", locale1);
      ParsePosition parsePosition0 = new ParsePosition(10);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser1.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getSelectedDay();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(142);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Color color0 = Color.black;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.drawDays();
      Timestamp timestamp0 = new Timestamp(2813L);
      timestamp0.setTime(1073741824L);
      timestamp0.toInstant();
      Instant instant0 = MockInstant.ofEpochSecond(1073741824L);
      Timestamp.from(instant0);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.forLanguageTag("day");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) canvasGraphicsNode0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth(142);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8966014153765047
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.JAPAN;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(386);
      jDayChooser0.setMaxDayCharacters((-1022));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Color color0 = Color.black;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.drawDays();
      Timestamp timestamp0 = new Timestamp(2813L);
      timestamp0.setTime(1073741824L);
      timestamp0.toInstant();
      Instant instant0 = MockInstant.ofEpochSecond((long) (-1022));
      Timestamp timestamp1 = Timestamp.from(instant0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser1.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, timestamp1);
      jDayChooser1.updateUI();
      Locale.forLanguageTag("day");
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) canvasGraphicsNode0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth(386);
      jDayChooser0.setSelectableDateRange(timestamp1, date0);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser1.drawDays();
      jDayChooser1.setMaxDayCharacters((-16842752));
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6994507830053567
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) jDayChooser0;
      objectArray0[2] = (Object) jDayChooser0;
      objectArray0[3] = (Object) jDayChooser0;
      objectArray0[4] = (Object) jDayChooser0;
      objectArray0[5] = (Object) jDayChooser0;
      objectArray0[6] = (Object) jDayChooser0;
      jDayChooser0.setOpaque(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-414));
      MockDate mockDate0 = new MockDate((-152), (-152), (-414), (-414), 9999, (-1203));
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6638209447778896
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setEnabled(false);
      jDayChooser0.getWidth();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMaxDayCharacters(142);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Color color0 = Color.black;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.drawDays();
      Timestamp timestamp0 = new Timestamp(2813L);
      timestamp0.setTime(1073741824L);
      timestamp0.toInstant();
      Instant instant0 = MockInstant.ofEpochSecond(1073741824L);
      Timestamp.from(instant0);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      jDayChooser0.updateUI();
      jDayChooser0.setMonth(142);
      jDayChooser0.setFocus();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8729, "Windows");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 8729, "day", 391);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7744503799097355
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getVerifyInputWhenFocusTarget();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.setMaxDayCharacters(1679);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.forLanguageTag("~YIj`^bTjU5/` ,1m");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) canvasGraphicsNode0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth(1679);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
