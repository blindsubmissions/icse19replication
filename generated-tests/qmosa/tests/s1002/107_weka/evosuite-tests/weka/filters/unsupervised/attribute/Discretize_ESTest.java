/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 08:36:53 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.findNumBinsTipText();
      int int0 = 371;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(371);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      discretize0.globalInfo();
      range0.getInvert();
      int int0 = 1;
      range0.toDisplay();
      discretize0.getCutPoints(1);
      discretize0.getMakeBinary();
      discretize0.getOptions();
      discretize0.getUseEqualFrequency();
      discretize0.setFindNumBins(false);
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setUseEqualFrequency(false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 2.0;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2006);
      intArray0[1] = 0;
      intArray0[2] = 815;
      intArray0[3] = 82;
      intArray0[4] = 154;
      intArray0[5] = (-2493);
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0, intArray0, (-2006));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getAttributeIndices();
      discretize0.setOutputFormat();
      discretize0.setOutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "first-last";
      stringArray0[1] = "first-last";
      discretize0.m_ClassIndex = 8;
      discretize0.m_IgnoreClass = false;
      Filter.makeCopy(discretize0);
      discretize0.setIgnoreClass(false);
      stringArray0[2] = "first-last";
      discretize0.setOptions(stringArray0);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      discretize0.getCutPoints(336);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("    FastVector attValues;\n");
      boolean boolean0 = false;
      discretize0.setFindNumBins(false);
      discretize0.getBinRangesString(32);
      discretize0.getRevision();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "    FastVector attValues;\n";
      stringArray0[1] = "8964";
      stringArray0[2] = "    FastVector attValues;\n";
      stringArray0[3] = "    FastVector attValues;\n";
      stringArray0[4] = null;
      stringArray0[5] = "8964";
      stringArray0[6] = null;
      stringArray0[7] = "    FastVector attValues;\n";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3406.0);
      doubleArray1[1] = 1001.3145;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1001.3145;
      doubleArray2[1] = (-3406.0);
      doubleArray2[2] = (-3406.0);
      doubleArray2[3] = (-3406.0);
      doubleArray2[4] = 1001.3145;
      doubleArray2[5] = (-3406.0);
      doubleArray2[6] = (-3406.0);
      doubleArray2[7] = 1001.3145;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-3406.0);
      doubleArray3[1] = (-3406.0);
      doubleArray3[2] = 1001.3145;
      doubleArray3[3] = 1001.3145;
      doubleArray3[4] = 1001.3145;
      doubleArray3[5] = (-3406.0);
      doubleArray3[6] = (-3406.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-3406.0);
      doubleArray4[1] = (-1779.9);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-3406.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = (-3406.0);
      doubleArray6[2] = (-3406.0);
      doubleArray6[3] = (-1779.9);
      doubleArray6[4] = 1001.3145;
      doubleArray6[5] = 1001.3145;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = (-3406.0);
      doubleArray7[1] = 1001.3145;
      doubleArray7[2] = 1001.3145;
      doubleArray7[3] = (-3406.0);
      doubleArray7[4] = (-2759.6823917490365);
      doubleArray7[5] = 1001.3145;
      doubleArray7[6] = 1.0;
      doubleArray7[7] = 1001.3145;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = (-2759.6823917490365);
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      Discretize.main((String[]) null);
      discretize0.attributeIndicesTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        sparseInstance0.insertAttributeAt(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't insert attribute: index out of range
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Unknown attribute type '";
      stringArray0[1] = "symbolic";
      stringArray0[2] = "7 KjdH+g>0OQ+b.w|<*";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "--k+1Uc";
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Unknown attribute type '";
      stringArray0[1] = "symbolic";
      stringArray0[2] = "7 KjdH+g>0OQ+b.w|<*";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "-U6;{--0]`:q)*z3V";
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      
      String string1 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string1);
      
      discretize0.getCutPoints(86);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      discretize0.binsTipText();
      discretize0.setDesiredWeightOfInstancesPerInterval(212.419399226);
      discretize0.getCutPoints(928);
      assertEquals(212.419399226, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("4{T.jMlufJsA,6");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4260151319598084
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      discretize0.getOptions();
      discretize0.invertSelectionTipText();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize.main((String[]) null);
      String string0 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse bin numbers rather than ranges for discretized attributes.");
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1916.643987);
      doubleArray1[2] = 300.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1916.643987);
      doubleArray2[1] = (-1916.643987);
      doubleArray2[2] = (-1916.643987);
      doubleArray2[3] = (-1916.643987);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1916.643987);
      doubleArray4[1] = (-1916.643987);
      doubleArray4[2] = (-1916.643987);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-1916.643987);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 300.0;
      doubleArray5[3] = 300.0;
      doubleArray5[4] = 300.0;
      doubleArray5[5] = (-1916.643987);
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 300.0;
      doubleArray6[1] = (-1916.643987);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 300.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-928));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -928
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0752205480543715
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      stringArray0[0] = "Expected end of range string,found:";
      stringArray0[1] = "Expected end of range string,found:";
      stringArray0[2] = "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[3] = "Expected end of range string,found:";
      stringArray0[4] = "Expected end of range string,found:";
      stringArray0[5] = "'B2of2'";
      stringArray0[6] = "Expected end of range string,found:";
      Discretize.main(stringArray0);
      String[] stringArray1 = discretize0.getOptions();
      discretize0.setOptions(stringArray1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(79);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Discretize discretize0 = new Discretize("\tUse bin numbers rather than ranges for discretized attributes.");
      discretize0.getCapabilities();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.593372795445466
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      discretize0.invertSelectionTipText();
      discretize0.setOutputFormat();
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      double[] doubleArray0 = new double[4];
      discretize0.m_MakeBinary = true;
      discretize0.m_ClassIndex = 1;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 17;
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      SystemInUtil.addInputLine("Specify range of attributes to act on. This iv a comma separated list of attribute indices, with \"first\" and \"lst\" valid values. Specify a inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      discretize0.isOutputFormatDefined();
      discretize0.getBinRangesString(66);
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 0;
      discretize0.m_IgnoreClass = true;
      Filter.makeCopies(discretize0, 0);
      boolean boolean0 = false;
      discretize0.setFindNumBins(false);
      discretize0.getOptions();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.532591160801121
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      discretize0.invertSelectionTipText();
      discretize0.setOutputFormat();
      Filter.makeCopy(discretize0);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1593.5);
      doubleArray1[1] = (-3724.867633066);
      doubleArray1[2] = 4.5;
      doubleArray1[3] = 536.7166;
      doubleArray1[4] = 2069.6189550784;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-1593.5);
      doubleArray2[1] = 4.5;
      doubleArray2[2] = 1.7976931348623157E308;
      doubleArray2[3] = (-3724.867633066);
      doubleArray2[4] = (-3724.867633066);
      doubleArray2[5] = 4.5;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 4345.587007548;
      doubleArray2[8] = 4.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1686.2977;
      doubleArray3[1] = 536.7166;
      doubleArray3[2] = 1.7976931348623157E308;
      doubleArray3[3] = 4.5;
      doubleArray3[4] = (-1593.5);
      doubleArray3[5] = (-3724.867633066);
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-2136414142));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2136414142
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7072697097848133
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SystemInUtil.addInputLine("7}sUN=/ckdV:Q&P^5a_");
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      discretize0.setUseBinNumbers(true);
      int int0 = (-2040109463);
      discretize0.getCapabilities();
      discretize0.getBinRangesString((-2040109463));
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
