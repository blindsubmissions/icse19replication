/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 08:48:15 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.BottomUpConstructor;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-3437L));
      jRip0.optimizationsTipText();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("]$<`].");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ]$<`]. not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = (-1579.022779);
      jRip0.usePruningTipText();
      jRip0.getFolds();
      ClassOrder classOrder0 = new ClassOrder();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Whether pruning is performed.";
      stringArray0[1] = "Whether pruning is performed.";
      stringArray0[2] = "Whether pruning is performed.";
      JRip.main(stringArray0);
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      JRip jRip1 = new JRip();
      jRip1.getRevision();
      jRip1.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2409.0;
      doubleArray0[1] = 2409.0;
      doubleArray0[2] = 2409.0;
      doubleArray0[3] = 2409.0;
      doubleArray0[4] = 2409.0;
      doubleArray0[5] = 2409.0;
      doubleArray0[6] = 2409.0;
      doubleArray0[7] = 2409.0;
      jRip_RipperRule0.copy();
      doubleArray0[8] = 2409.0;
      SparseInstance sparseInstance0 = new SparseInstance(2409.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.equalHeaders(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.copy();
      jRip0.setSeed(0L);
      jRip_RipperRule0.copy();
      jRip_RipperRule0.getConsequent();
      jRip0.getOptimizations();
      Instance instance0 = null;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.debugTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setSuppressMappingReport(false);
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-276.0179), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        coverTree0.kNearestNeighbours(sparseInstance1, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 1530.764721;
      jRip0.getCapabilities();
      jRip0.setDebug(true);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("JW}!@<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // JW}!@< not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-1L));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ryc<p+Ty\"Af;l5P7G";
      stringArray0[1] = "";
      stringArray0[2] = "zHSb]~";
      stringArray0[3] = "\tThe complexity constant C. (default 1)";
      stringArray0[4] = ";4d3K&oW";
      stringArray0[5] = "4$-NHAXoRJ$k";
      stringArray0[6] = "X2x-$z=";
      JRip.main(stringArray0);
      jRip0.getSeed();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = null;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 74;
      intArray0[4] = 0;
      intArray0[5] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-166));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      jRip_RipperRule0.covers(binarySparseInstance1);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.globalInfo();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-3549));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(0.0);
      jRip0.getCapabilities();
      int int0 = 28;
      jRip0.setSeed(28);
      jRip0.getCapabilities();
      jRip0.setFolds(28);
      String string0 = "QamLyC!X=;b=.f#lLUb";
      AbstractClassifier.makeCopies(jRip0, 0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("QamLyC!X=;b=.f#lLUb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // QamLyC!X=;b=.f#lLUb not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      Attribute attribute0 = new Attribute("\nGrowing and pruning a new rule ...", (List<String>) null);
      attribute0.addStringValue("\nGrowing and pruning a new rule ...");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccu();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("dwm`+zM<rhKm*Y", 93);
      jRip0.globalInfo();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      
      jRip_NumericAntd0.accuRate = (double) 1;
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.globalInfo();
      jRip0.getTechnicalInformation();
      jRip0.getTechnicalInformation();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("0D", "", protectedProperties0);
      Attribute attribute1 = attribute0.copy(string0);
      jRip_RipperRule0.toString(attribute1);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("AO!e0AI/6W/]&2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AO!e0AI/6W/]&2 not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)78;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I8V<<<");
      byteArray0[4] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      JRip jRip1 = new JRip();
      String string0 = "k99bJpfH$Ht";
      String string1 = "-N";
      Properties properties0 = new Properties();
      jRip1.toString();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      Object object0 = jRip_NumericAntd0.copy();
      // Undeclared exception!
      try { 
        properties0.compute(object0, (BiFunction<? super Object, ? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      JRip jRip1 = new JRip();
      jRip1.getRevision();
      jRip1.toString();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2409.0;
      doubleArray0[1] = 2409.0;
      doubleArray0[2] = 2409.0;
      doubleArray0[3] = 2409.0;
      doubleArray0[4] = 2409.0;
      doubleArray0[5] = 2409.0;
      doubleArray0[6] = 2409.0;
      doubleArray0[7] = 2409.0;
      doubleArray0[8] = 2409.0;
      jRip1.setDebug(false);
      jRip0.foldsTipText();
      jRip1.getOptions();
      jRip0.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2409.0, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute((-1521));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      String string0 = jRip0.checkErrorRateTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8989267893363286
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 1530.764721;
      jRip0.getCapabilities();
      jRip0.setOptimizations((-604));
      jRip0.seedTipText();
      jRip0.setCheckErrorRate(false);
      jRip0.listOptions();
      String[] stringArray0 = new String[2];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      jRip0.getOptions();
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)4;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[0] = "The seed used for randomizing the data.";
      stringArray0[1] = "s$iu";
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.globalInfo();
      jRip0.getTechnicalInformation();
      jRip0.getUsePruning();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      Attribute attribute0 = new Attribute(string0, list0, (-19));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BallNode ballNode0 = new BallNode(6);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(451.155264917, intArray0, (-2433));
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(" <= NaN", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string1 = jRip_NominalAntd0.toString();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(" = ", string1);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      
      Attribute attribute0 = new Attribute("", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double1 = jRip_NominalAntd0.getCover();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, list0, 0);
      attribute0.copy((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayList0;
      arrayList0.toArray(objectArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3019.556, intArray0, (-1307));
      jRip_NominalAntd0.covers(binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 3019.556, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[0];
      JRip.main(stringArray0);
      JRip jRip1 = new JRip();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-106);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      long long0 = jRip1.getSeed();
      assertEquals(1L, long0);
      
      ClassOrder classOrder0 = new ClassOrder();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      jRip0.setUsePruning(true);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("JW}!@<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // JW}!@< not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\nDeleting rules to decrease DL of the whole ruleset ...");
      Attribute attribute1 = attribute0.copy("\nDeleting rules to decrease DL of the whole ruleset ...");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.toString();
      jRip_NumericAntd0.getMaxInfoGain();
      jRip0.minNoTipText();
      BallTree ballTree0 = new BallTree();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 3;
      int int0 = (-3);
      intArray0[3] = (-3);
      intArray0[4] = 2;
      intArray0[5] = 3;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = 0;
      SparseInstance sparseInstance0 = new SparseInstance((-2132.9753965798), doubleArray0, intArray0, (-1));
      try { 
        ballTree0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Attribute attribute0 = new Attribute("", "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.copy();
      jRip_RipperRule0.toString(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      attribute0.addRelation((Instances) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.value(13);
      decisionTable0.m_majority = 1960.80682550249;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\noldDL: ");
      jRip_NominalAntd0.cover = (double) 2;
      jRip_NominalAntd0.getRevision();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_NominalAntd0.att = attribute0;
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.toString();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 1, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 74;
      doubleArray0[1] = (double) 74;
      doubleArray0[2] = (double) 74;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 99.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 99.0;
      doubleArray0[8] = (double) 74;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      Attribute attribute0 = new Attribute((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(boolean0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      JRip jRip0 = new JRip();
      jRip0.getSeed();
      ClassOrder classOrder0 = new ClassOrder();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      String[] stringArray0 = new String[2];
      jRip0.setFolds(2000);
      stringArray0[0] = "L@y";
      stringArray0[1] = "";
      jRip0.setOptions(stringArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.accu = (double) 1;
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      Attribute attribute0 = new Attribute("P", (-16));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      JRip jRip0 = new JRip();
      jRip0.getSeed();
      ClassOrder classOrder0 = new ClassOrder();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("HmE4c", linkedList0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(": Lagrangian=", arrayList0, 0);
      instances0.sort(4);
      jRip_NumericAntd0.splitData(instances0, 2, 0.964);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JRip jRip0 = new JRip();
      jRip0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip0.getDebug();
      jRip0.getDebug();
      JRip jRip1 = null;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("JRIP: No model built yet.", (Instances) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3856.3;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      try { 
        jRip0.rulesetForOneClass(3856.3, (Instances) null, 0.9, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8891591637540215
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 23);
      Attribute attribute0 = new Attribute("@data", instances0, 6);
      Attribute.typeToString(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      arrayList1.toArray(objectArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 2);
      binarySparseInstance0.setValue(2, 0.0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances1 = bayesNet1.m_Instances;
      jRip_NominalAntd0.splitData(instances0, 1.0, 4.94E-321);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.getOptions();
      jRip0.toString();
      int[] intArray0 = new int[3];
      intArray0[0] = 2289;
      intArray0[1] = (-2487);
      intArray0[2] = 80;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-417.0719), intArray0, (-10));
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute((-48));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add("zxZp<Q|:5C!");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute("", linkedList0, protectedProperties0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class implementing the BallTree/Metric Tree algorithm for nearest neighbour search.\nThe connection to dataset is only a reference. For the tree structure the indexes are stored in an array.\nSee the implementing classes of different construction methods of the trees for details on its construction.\n\nFor more information see also:\n\n", arrayList2, 1);
      linkedList0.iterator();
      arrayList2.add(attribute0);
      jRip_NumericAntd0.splitData(instances0, 64.0, (-3354.7099067));
      jRip_NumericAntd0.att = attribute0;
      jRip_NumericAntd0.splitData(instances0, 2, (-2945.9199809));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 1995.0803476, 0);
      assertEquals(3, jRip1.getFolds());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-266));
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(11, stringArray0.length);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList2, 83);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(83);
      jRip_RipperRule0.grow(instances0);
      assertEquals(83.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      assertEquals(1L, jRip1.getSeed());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      assertFalse(jRip0.getUsePruning());
  }
}
