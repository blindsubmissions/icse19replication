/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:57:18 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(2540);
      advancedSettings0.setMaxThreadsForNioWrite(2540);
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesBandwidth((-965));
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize((-1025));
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.toXML("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getBacklog();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getCharset();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize(2540);
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.setPerformancePreferencesLatency((-965));
      assertEquals(2540, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML("K7fVCW=ufO-/+GYf,");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTrafficClass("@Qi>");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTrafficClass("2jXu};P~ih^m>B0l");
      advancedSettings0.setClientSocketTrafficClass(string0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketTrafficClass(string0);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setMaxThreadsForNioWrite((-360));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-360), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("\t<client-socket-send-buffer-size>");
      advancedSettings0.getBacklog();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientIdentifier("<4(Ku>A@8G}");
      advancedSettings0.setClientSocketSendBufferSize((-1669));
      advancedSettings0.setBacklog(0);
      assertEquals((-1669), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setMaxThreadsForNioWrite((-193));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("");
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setPerformancePreferencesLatency((-184));
      String string0 = "6";
      advancedSettings0.setPerformancePreferencesConnectionTime((-184));
      advancedSettings0.setClientIdentifier("6");
      int int0 = 0;
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("\t<performance-preferences-latency>");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1658));
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      int int0 = 717;
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(717);
      advancedSettings0.getCharset();
      advancedSettings0.getCharset();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-939));
      advancedSettings0.setBacklog(717);
      advancedSettings0.setBacklog((-939));
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("&3XijG8qA80");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // &3XijG8qA80
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.370480801364672
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-2596));
      advancedSettings0.setPerformancePreferencesConnectionTime((-2596));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setMaxThreadsForNioWrite((-2596));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setCharset("");
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setPerformancePreferencesLatency((-2596));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7184734013300127
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setMaxThreadsForNioWrite((-4381));
      advancedSettings0.setClientSocketSendBufferSize((-4381));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize(1153);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setQSObjectPoolMaker(":");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getCharset();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setCharset("");
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }
}
