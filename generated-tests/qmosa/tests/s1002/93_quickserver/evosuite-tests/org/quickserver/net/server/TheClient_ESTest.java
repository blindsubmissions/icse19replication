/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:08:14 GMT 2018
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientEventHandler();
      theClient0.setTrusted(false);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.setTimeoutMsg((String) null);
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEvent();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.getSocketChannel();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setSocketChannel((SocketChannel) null);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getSocket();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      try { 
        blockingClientHandler0.handleClient(theClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setTrusted(false);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Max Connection Blocking)}", string0);
      
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientEvent();
      theClient0.setSocket((Socket) null);
      theClient0.setMaxConnectionMsg("org.quickserver.net.server.TheClient");
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setTimeoutMsg("(X$B*x3W|TD.>7<;");
      int int0 = 58;
      QuickServer quickServer0 = new QuickServer();
      theClient0.setTimeout((-1435));
      quickServer0.setApplicationJarPath("");
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      // Undeclared exception!
      try { 
        authenticator0.handleAuthentication((ClientHandler) nonBlockingClientHandler0, (Object) nonBlockingClientHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // String/Byte mode not implemented!
         //
         verifyException("org.quickserver.net.server.QuickAuthenticationHandler", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("A5L S#;.{@%n/7i H r");
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.setCommunicationLogging(true);
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTrusted();
      ClientEventHandler clientEventHandler0 = null;
      theClient0.toString();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getCommunicationLogging();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setTimeout(4366);
      theClient0.setTimeout(4366);
      theClient0.getTrusted();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getSocket();
      theClient0.setSocket((Socket) null);
      QuickServer quickServer0 = new QuickServer();
      // Undeclared exception!
      quickServer0.startQSAdminServer();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TheClient theClient0 = new TheClient();
          theClient0.toString();
          theClient0.getMaxAuthTry();
          SocketChannel socketChannel0 = SocketChannel.open();
          socketChannel0.getRemoteAddress();
          theClient0.getClientData();
          theClient0.setClientData((ClientData) null);
          MockSocket mockSocket0 = new MockSocket();
          mockSocket0.getLocalSocketAddress();
          // Undeclared exception!
          try { 
            socketChannel0.bind((SocketAddress) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:0\" \"listen,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkListen(SecurityManager.java:1131)
             // sun.nio.ch.SocketChannelImpl.bind(SocketChannelImpl.java:582)
             // sun.reflect.GeneratedMethodAccessor50.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.getSocket();
      theClient0.setSocket((Socket) null);
      theClient0.setMaxConnectionMsg("0k48u6f~#-j");
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getSocketChannel();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      Data data0 = new Data();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)100;
      data0.setPassword(byteArray0);
      data0.setUsername("");
      theClient0.setClientData(data0);
      theClient0.getAuthenticator();
      theClient0.setCommunicationLogging(true);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getAuthenticator();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTry(0);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getServer();
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(true);
      theClient0.getClientEvent();
      TheClient theClient1 = new TheClient();
      theClient1.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.toString();
      theClient0.setMaxAuthTryMsg("|F3@|Hn]5Iv5s>IDh");
      QuickServer quickServer0 = new QuickServer();
      theClient1.setServer(quickServer0);
      theClient0.toString();
      theClient1.setTimeout((-3127));
      assertEquals((-3127), theClient1.getTimeout());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTrusted(true);
      TheClient theClient2 = new TheClient();
      theClient2.getClientEventHandler();
      theClient2.setClientEventHandler((ClientEventHandler) null);
      theClient2.getClientEventHandler();
      theClient1.setClientEventHandler((ClientEventHandler) null);
      theClient0.getServer();
      theClient0.setServer((QuickServer) null);
      theClient1.setClientEventHandler((ClientEventHandler) null);
      theClient1.setMaxAuthTryMsg("#*~}b{?; _a.++");
      theClient0.getClientData();
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getTimeout();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient1.getMaxConnectionMsg();
      SocketAddress socketAddress0 = null;
      // Undeclared exception!
      try { 
        SocketChannel.open((SocketAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setSocket((Socket) null);
      theClient0.setMaxAuthTryMsg((String) null);
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxConnectionMsg((String) null);
      int int0 = theClient0.getTimeout();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      int int1 = theClient0.getMaxAuthTry();
      assertTrue(int1 == int0);
      
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      int int0 = 0;
      theClient0.setMaxAuthTry(0);
      theClient0.setClientEvent(clientEvent0);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxConnectionMsg("Q");
      theClient0.setMaxAuthTryMsg("eRZk.kj3Oh");
      theClient0.getTimeoutMsg();
      theClient1.getTrusted();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      try { 
        QuickServer.load("eRZk.kj3Oh");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientEvent();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.setMaxConnectionMsg("");
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
  }
}
