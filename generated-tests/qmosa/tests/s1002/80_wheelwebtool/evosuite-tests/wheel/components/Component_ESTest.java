/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:16:04 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.NumberInput;
import wheel.components.RadioGroup;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      String string0 = "(position:";
      String string1 = "u";
      TextInput textInput0 = new TextInput(xmlEntityRef0, "(position:", "u");
      TextArea textArea0 = null;
      try {
        textArea0 = new TextArea(textInput0, "Could not end compoennt, already at root.", "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Component component0 = null;
      String string0 = "\"$JO:";
      DateInput dateInput0 = new DateInput((Component) null, "\"$JO:", "\"$JO:", "\"$JO:");
      String string1 = "";
      Table table0 = null;
      try {
        table0 = new Table(dateInput0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Request data:");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "Request data:", "Request data:");
      // Undeclared exception!
      try { 
        checkbox0.label("Request data:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4681399390162084
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "F^E~*zi<x4$%o/c{h-";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("F^E~*zi<x4$%o/c{h-");
      TableBlock tableBlock0 = null;
      try {
        tableBlock0 = new TableBlock(xmlEntityRef0, "F^E~*zi<x4$%o/c{h-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "Lou\\Hh*;?--k+1Uc-c+";
      Submit submit0 = new Submit((Component) null, "LouHh*;?--k+1Uc-c+", "LouHh*;?--k+1Uc-c+");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string1 = null;
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator((String) null);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.value("");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.enumeration((String) null);
      ElExpression elExpression0 = new ElExpression("LouHh*;?--k+1Uc-c+");
      RadioGroup radioGroup0 = null;
      try {
        radioGroup0 = new RadioGroup(submit0, "SGs|HiT;%=", (String) null, dynamicSelectModel3, elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      String string1 = "y *Fnm^M+Z2N=2Wh";
      Checkbox checkbox0 = new Checkbox(hidden0, (String) null, "y *Fnm^M+Z2N=2Wh");
      String string2 = "";
      ErrorPage errorPage1 = new ErrorPage();
      errorPage1.setFocus(hidden0);
      // Undeclared exception!
      try { 
        hidden0.label((Object) errorPage1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "org.mvel";
      String string1 = "";
      Checkbox checkbox0 = new Checkbox(errorPage0, "org.mvel", "");
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      String string1 = "'\"FT/\"T";
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("'\"FT/\"T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      Object object0 = new Object();
      Label label0 = new Label(tableBlock0, object0);
      Table table0 = new Table(label0, "h6");
      // Undeclared exception!
      try { 
        table0.id("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Any any0 = null;
      try {
        any0 = new Any(xmlEntityRef0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h6((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      DateInput dateInput0 = new DateInput(xmlEntityRef0, "csC4Lk$q,\"^uf{", "[", "csC4Lk$q,\"^uf{");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h3((Object) dateInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      String string0 = "y *Fnm^M+Z2N=2Wh";
      Checkbox checkbox0 = new Checkbox(hidden0, (String) null, "y *Fnm^M+Z2N=2Wh");
      String string1 = "";
      ErrorPage errorPage1 = new ErrorPage();
      errorPage1.setFocus(hidden0);
      FormElement formElement0 = checkbox0.setFormElementName("");
      String string2 = "</H(\"kwn>!1H";
      TextInput textInput0 = new TextInput(formElement0, "</H(\"kwn>!1H", (String) null);
      textInput0.value("</H(\"kwn>!1H");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        textInput0.img("q.;", ".R$mqiMP|^H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "6L X.:zA6VoQ", "6L X.:zA6VoQ");
      submit0.selectModel();
      String string0 = "1`";
      Table table0 = null;
      try {
        table0 = new Table((Component) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      Object object0 = new Object();
      Label label0 = new Label(tableBlock0, object0);
      String string1 = "h6";
      Hidden hidden0 = new Hidden(tableBlock0, "h6", (String) null);
      String string2 = "me=";
      // Undeclared exception!
      try { 
        hidden0.encode("me=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.u((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      Object object0 = new Object();
      errorPage0.h3(object0);
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, "D5Q{jh8S+xe3");
      DateInput dateInput0 = new DateInput(checkbox0, "D5Q{jh8S+xe3", "D5Q{jh8S+xe3", (CharSequence) null);
      Checkbox checkbox1 = new Checkbox(checkbox0, (String) null, "D5Q{jh8S+xe3");
      // Undeclared exception!
      try { 
        errorPage0.form((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      Checkbox checkbox0 = new Checkbox(hidden0, (String) null, "y *Fnm^M+Z2N=2Wh");
      String string1 = "";
      ErrorPage errorPage1 = new ErrorPage();
      errorPage1.setFocus(hidden0);
      Boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        checkbox0.pre((Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      Checkbox checkbox0 = new Checkbox(hidden0, (String) null, "y *Fnm^M+Z2N=2Wh");
      String string1 = "";
      ErrorPage errorPage1 = new ErrorPage();
      errorPage0.kbd();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        errorPage1.message("big", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "0T7?kQ`gU&iOfV^hfw";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      
      String string1 = "'\"F_.\"T";
      // Undeclared exception!
      try { 
        xmlEntityRef0.entity("^0.c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = null;
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      String string1 = "D5Q{jh8S+xe3";
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, "D5Q{jh8S+xe3");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertNull(checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("D5Q{jh8S+xe3", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.setBinding("D5Q{jh8S+xe3");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertNull(checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("D5Q{jh8S+xe3", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertNull(formElement0.getFormElementName());
      assertEquals("D5Q{jh8S+xe3", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertNotNull(formElement0);
      
      DateInput dateInput0 = new DateInput(formElement0, "D5Q{jh8S+xe3", "D5Q{jh8S+xe3", (CharSequence) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertNull(checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("D5Q{jh8S+xe3", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertNull(formElement0.getFormElementName());
      assertEquals("D5Q{jh8S+xe3", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("D5Q{jh8S+xe3", dateInput0.getFormElementName());
      assertEquals("D5Q{jh8S+xe3", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isValid());
      assertEquals("input", dateInput0.defaultTagName());
      assertNotNull(dateInput0);
      
      Table table0 = new Table(errorPage0, "D5Q{jh8S+xe3");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("D5Q{jh8S+xe3", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ElExpression elExpression0 = new ElExpression((String) null);
      assertNull(elExpression0.toString());
      assertNull(elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("o`;f");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNull(elExpression0.toString());
      assertNull(elExpression0.getExpression());
      assertNull(elExpression1.getExpression());
      assertNull(elExpression1.toString());
      assertNotNull(elExpression1);
      
      // Undeclared exception!
      try { 
        dateInput0.fileInput("", elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Form form0 = new Form("{");
      assertEquals("{", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      form0._clear();
      assertEquals("{", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        form0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      
      DateInput dateInput0 = new DateInput(xmlEntityRef0, "cC4Lk$q,\"^uf{", "[", "cC4Lk$q,\"^uf{");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("cC4Lk$q,\"^uf{", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("[", dateInput0.getComponentId());
      assertNotNull(dateInput0);
      
      // Undeclared exception!
      try { 
        dateInput0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.dt((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = null;
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      String string1 = "D5Q{jh8S+xe3";
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      ElExpression elExpression0 = new ElExpression("I{");
      assertEquals(2, elExpression0.length());
      assertEquals("I{", elExpression0.toString());
      assertEquals("I{", elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      // Undeclared exception!
      try { 
        tableBlock0.radioGroup("D5Q{jh8S+xe3", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)tableBlock0.b(object0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Label label1 = new Label(tableBlock0, object0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Table table0 = new Table(label1, "h6");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("h6", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(table0);
      
      Block block0 = (Block)tableBlock0.ins();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      Table table1 = table0.id("");
      assertNotSame(label1, label0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(table1);
      
      TableBlock tableBlock1 = table1.colgroup();
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(label1, label0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(tableBlock1, tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertFalse(label1.equals((Object)label0));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertNotNull(tableBlock1);
      
      TableBlock tableBlock2 = tableBlock1.renderHint((CharSequence) null);
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(tableBlock0, tableBlock2);
      assertNotSame(label1, label0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(tableBlock1, tableBlock0);
      assertSame(tableBlock1, tableBlock2);
      assertSame(tableBlock2, tableBlock1);
      assertNotSame(tableBlock2, tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertTrue(tableBlock2._isGeneratedId());
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertNotNull(tableBlock2);
      
      // Undeclared exception!
      try { 
        errorPage0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "qm71r5TB5t@:3>+");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("qm71r5TB5t@:3>+", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label(errorPage0, object0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      
      Submit submit0 = new Submit(tableBlock0, "qm71r5TB5t@:3>+", (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("qm71r5TB5t@:3>+", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertEquals("Submit_1", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("qm71r5TB5t@:3>+", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertNotNull(submit0);
      
      FormElement formElement0 = submit0.value((String) null);
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("qm71r5TB5t@:3>+", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertEquals("Submit_1", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("qm71r5TB5t@:3>+", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("Submit_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("qm71r5TB5t@:3>+", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertNotNull(formElement0);
      
      Table table0 = new Table(formElement0, (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("qm71r5TB5t@:3>+", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertEquals("Submit_1", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("qm71r5TB5t@:3>+", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("Submit_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("qm71r5TB5t@:3>+", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertNotNull(table0);
      
      Block block0 = (Block)tableBlock0.ins();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("qm71r5TB5t@:3>+", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      Block block1 = (Block)table0.cite();
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("qm71r5TB5t@:3>+", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertEquals("Submit_1", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("qm71r5TB5t@:3>+", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("Submit_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("qm71r5TB5t@:3>+", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertFalse(block1.equals((Object)block0));
      assertNotNull(block1);
      
      Table table1 = table0.id("");
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("qm71r5TB5t@:3>+", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertEquals("Submit_1", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("qm71r5TB5t@:3>+", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("Submit_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("qm71r5TB5t@:3>+", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertNotNull(table1);
      
      TableBlock tableBlock1 = table0.colgroup();
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("qm71r5TB5t@:3>+", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertEquals("Submit_1", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("qm71r5TB5t@:3>+", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("Submit_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("qm71r5TB5t@:3>+", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertNotNull(tableBlock1);
      
      TableBlock tableBlock2 = tableBlock1.renderHint((CharSequence) null);
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertSame(table0, table1);
      assertSame(tableBlock1, tableBlock2);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock2, tableBlock0);
      assertSame(tableBlock2, tableBlock1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("qm71r5TB5t@:3>+", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertEquals("Submit_1", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("qm71r5TB5t@:3>+", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("Submit_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("qm71r5TB5t@:3>+", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock2.getComponentId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertNotNull(tableBlock2);
      
      // Undeclared exception!
      try { 
        errorPage0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      Form form0 = new Form("");
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.imageSubmit("<!DOCTYPE", "'\"FT/\"T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      String string0 = null;
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(hidden0.isEmpty());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertNull(hidden0.getFormElementName());
      assertNotNull(hidden0);
      
      Checkbox checkbox0 = new Checkbox(hidden0, (String) null, "y *Fnm^M+Z2N=2Wh");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(hidden0.isEmpty());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertNull(hidden0.getFormElementName());
      assertNull(checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("y *Fnm^M+Z2N=2Wh", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      // Undeclared exception!
      try { 
        checkbox0.code();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.315241522536764
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      String string0 = null;
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      String string1 = "D5Q{jh8S+xe3";
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, "D5Q{jh8S+xe3");
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("D5Q{jh8S+xe3", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertNull(checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.setBinding("D5Q{jh8S+xe3");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("D5Q{jh8S+xe3", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertNull(checkbox0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("D5Q{jh8S+xe3", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertNull(formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertNotNull(formElement0);
      
      DateInput dateInput0 = new DateInput(formElement0, "D5Q{jh8S+xe3", "D5Q{jh8S+xe3", (CharSequence) null);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("D5Q{jh8S+xe3", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertNull(checkbox0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("D5Q{jh8S+xe3", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertNull(formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("D5Q{jh8S+xe3", dateInput0.getFormElementName());
      assertEquals("D5Q{jh8S+xe3", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertFalse(dateInput0._isGeneratedId());
      assertNotNull(dateInput0);
      
      Table table0 = new Table(errorPage0, "D5Q{jh8S+xe3");
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("D5Q{jh8S+xe3", table0.getComponentId());
      assertNotNull(table0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = "";
      String string3 = null;
      // Undeclared exception!
      try { 
        dateInput0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      String string0 = null;
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      String string1 = "D5Q{jh8S+xe3";
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, "D5Q{jh8S+xe3");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("D5Q{jh8S+xe3", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertNull(checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.setBinding("D5Q{jh8S+xe3");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("D5Q{jh8S+xe3", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertNull(checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("D5Q{jh8S+xe3", formElement0.getComponentId());
      assertNull(formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertNotNull(formElement0);
      
      // Undeclared exception!
      try { 
        errorPage0.buttonInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "{";
      Form form0 = new Form("{");
      assertEquals("{", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.627358106262135
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label(tableBlock0, object0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Block block0 = label0.placeholder((String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      Table table0 = new Table(label0, "h6");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("h6", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      Block block1 = (Block)tableBlock0.ins();
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertFalse(block1.equals((Object)block0));
      assertNotNull(block1);
      
      Table table1 = table0.id("");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertNotNull(table1);
      
      TableBlock tableBlock1 = table1.colgroup();
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(tableBlock1, tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertNotNull(tableBlock1);
      
      TableBlock tableBlock2 = tableBlock1.renderHint((CharSequence) null);
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock1, tableBlock2);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock2, tableBlock0);
      assertSame(tableBlock2, tableBlock1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertNotNull(tableBlock2);
      
      // Undeclared exception!
      try { 
        errorPage0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNotNull(xmlEntityRef0);
      
      String string1 = "'\"FT/\"T";
      Form form0 = new Form("");
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.h3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "6L X.:zA6VoQ";
      Submit submit0 = new Submit((Component) null, "6L X.:zA6VoQ", "6L X.:zA6VoQ");
      assertEquals("input", submit0.defaultTagName());
      assertEquals("6L X.:zA6VoQ", submit0.getComponentId());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isValid());
      assertEquals("6L X.:zA6VoQ", submit0.getFormElementName());
      assertTrue(submit0.isEmpty());
      assertNotNull(submit0);
      
      // Undeclared exception!
      try { 
        submit0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.729320397237963
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)tableBlock0.b(object0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Label label1 = new Label(tableBlock0, object0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Table table0 = new Table(label1, (String) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(table0);
      
      Block block0 = (Block)tableBlock0.ins();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      Table table1 = (Table)table0.addInternalRenderHint("");
      assertNotSame(label1, label0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(table1);
      
      Table table2 = table0.id("");
      assertNotSame(label1, label0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertFalse(table2._isGeneratedId());
      assertEquals("", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(table2);
      
      TableBlock tableBlock1 = table2.colgroup();
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(label1, label0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertFalse(table2._isGeneratedId());
      assertEquals("", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertFalse(label1.equals((Object)label0));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertNotNull(tableBlock1);
      
      TableBlock tableBlock2 = tableBlock1.renderHint((CharSequence) null);
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(tableBlock0, tableBlock2);
      assertNotSame(label1, label0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertSame(tableBlock1, tableBlock2);
      assertNotSame(tableBlock2, tableBlock0);
      assertSame(tableBlock2, tableBlock1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertFalse(table2._isGeneratedId());
      assertEquals("", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertNotNull(tableBlock2);
      
      // Undeclared exception!
      try { 
        errorPage0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = null;
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      String string1 = "D5Q{jh8S+xe3";
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, "D5Q{jh8S+xe3");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(checkbox0.isValid());
      assertNull(checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("D5Q{jh8S+xe3", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.setBinding("D5Q{jh8S+xe3");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(checkbox0.isValid());
      assertNull(checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("D5Q{jh8S+xe3", checkbox0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertNull(formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("D5Q{jh8S+xe3", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertNotNull(formElement0);
      
      // Undeclared exception!
      try { 
        formElement0.bdo("D5Q{jh8S+xe3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      String string0 = null;
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertNull(hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertNotNull(hidden0);
      
      // Undeclared exception!
      try { 
        hidden0.h4();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Form form0 = new Form("{");
      assertEquals("{", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8346096344580884
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Form form0 = new Form("{");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("{", form0.getComponentId());
      assertNotNull(form0);
      
      form0._clear();
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("{", form0.getComponentId());
      
      String string0 = "f=";
      Checkbox checkbox0 = new Checkbox(form0, "f=", "map");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("{", form0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("map", checkbox0.getComponentId());
      assertEquals("f=", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertNotNull(checkbox0);
      
      String string1 = "org.mvel.conversion.CharCH$2";
      FormElement formElement0 = checkbox0.value("org.mvel.conversion.CharCH$2");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("{", form0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("map", checkbox0.getComponentId());
      assertEquals("f=", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("f=", formElement0.getFormElementName());
      assertEquals("map", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertNotNull(formElement0);
      
      TextArea textArea0 = new TextArea(formElement0, "null", "map");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("{", form0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("map", checkbox0.getComponentId());
      assertEquals("f=", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("f=", formElement0.getFormElementName());
      assertEquals("map", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("null", textArea0.getFormElementName());
      assertEquals("map", textArea0.getComponentId());
      assertNotNull(textArea0);
      
      // Undeclared exception!
      try { 
        textArea0.strike();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.252728336819822
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "6L X.:zA6VoQ";
      Submit submit0 = new Submit((Component) null, "6L X.:zA6VoQ", "6L X.:zA6VoQ");
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("6L X.:zA6VoQ", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertEquals("6L X.:zA6VoQ", submit0.getComponentId());
      assertNotNull(submit0);
      
      // Undeclared exception!
      try { 
        submit0.samp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.pre();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      Block block1 = (Block)errorPage0.kbd();
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertFalse(block1.equals((Object)block0));
      assertNotNull(block1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "SGs|HiT;%=";
      objectArray0[3] = (Object) "";
      objectArray0[6] = (Object) "";
      // Undeclared exception!
      try { 
        errorPage0.message("big", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9459347757561138
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.attributes((String[]) null);
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertNotNull(errorPage1);
      
      String string0 = null;
      Hidden hidden0 = new Hidden(errorPage0, (String) null, "b");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("b", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertNull(hidden0.getFormElementName());
      assertNotNull(hidden0);
      
      // Undeclared exception!
      try { 
        hidden0.imageSubmit((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Form form0 = new Form("6L X.:zA6VoQ");
      assertEquals("6L X.:zA6VoQ", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      form0._clear();
      assertEquals("6L X.:zA6VoQ", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      
      ElExpression elExpression0 = form0.el((String) null);
      assertEquals("6L X.:zA6VoQ", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertNull(elExpression0.getExpression());
      assertNull(elExpression0.toString());
      assertNotNull(elExpression0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4105135571148382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Form form0 = new Form("{");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("{", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.meta();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9251211907908183
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "6L X.:zA6VoQ", "6L X.:zA6VoQ");
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("6L X.:zA6VoQ", submit0.getFormElementName());
      assertEquals("6L X.:zA6VoQ", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertNotNull(submit0);
      
      List<Component> list0 = submit0.findAll((ElExpression) null);
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("6L X.:zA6VoQ", submit0.getFormElementName());
      assertEquals("6L X.:zA6VoQ", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Form form0 = new Form("6L X.:zA6VoQ");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("6L X.:zA6VoQ", form0.getComponentId());
      assertNotNull(form0);
      
      MXSerializer mXSerializer0 = new MXSerializer();
      assertNull(mXSerializer0.getName());
      assertNull(mXSerializer0.getNamespace());
      assertEquals(0, mXSerializer0.getDepth());
      assertNotNull(mXSerializer0);
      
      form0._renderActions((XmlSerializer) null);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("6L X.:zA6VoQ", form0.getComponentId());
      
      FileInput fileInput0 = new FileInput(form0, "6L X.:zA6VoQ", "6L X.:zA6VoQ");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("6L X.:zA6VoQ", form0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("6L X.:zA6VoQ", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("6L X.:zA6VoQ", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isEmpty());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertNotNull(fileInput0);
      
      String[] stringArray0 = new String[1];
      String string0 = "";
      // Undeclared exception!
      try { 
        form0.remove((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = "null";
      Block block0 = (Block)errorPage0.li();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      DateInput dateInput0 = new DateInput(errorPage0, "Ei.T_7H_5", "null", "Ei.T_7H_5");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Ei.T_7H_5", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertEquals("null", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertNotNull(dateInput0);
      
      Table table0 = new Table(dateInput0, "null");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Ei.T_7H_5", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertEquals("null", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("null", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      TableBlock tableBlock0 = table0.tbody();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Ei.T_7H_5", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertEquals("null", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("null", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      // Undeclared exception!
      try { 
        table0.find("dM>A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id dM>A on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Component component0 = null;
      String string0 = "internal error in parseEpilog";
      Submit submit0 = new Submit((Component) null, "internal error in parseEpilog", "internal error in parseEpilog");
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("internal error in parseEpilog", submit0.getFormElementName());
      assertEquals("internal error in parseEpilog", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertNotNull(submit0);
      
      Checkbox checkbox0 = new Checkbox(submit0, "internal error in parseEpilog", "internal error in parseEpilog");
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("internal error in parseEpilog", submit0.getFormElementName());
      assertEquals("internal error in parseEpilog", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("internal error in parseEpilog", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("internal error in parseEpilog", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      String string1 = "}";
      FormElement formElement0 = checkbox0.fieldBinding("}");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("internal error in parseEpilog", submit0.getFormElementName());
      assertEquals("internal error in parseEpilog", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("internal error in parseEpilog", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("internal error in parseEpilog", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("internal error in parseEpilog", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("internal error in parseEpilog", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertNotNull(formElement0);
      
      FileInput fileInput0 = new FileInput(formElement0, "}", "internal error in parseEpilog");
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("internal error in parseEpilog", submit0.getFormElementName());
      assertEquals("internal error in parseEpilog", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("internal error in parseEpilog", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("internal error in parseEpilog", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("internal error in parseEpilog", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("internal error in parseEpilog", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("}", fileInput0.getFormElementName());
      assertEquals("internal error in parseEpilog", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertNotNull(fileInput0);
      
      // Undeclared exception!
      try { 
        fileInput0.script();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
