/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:01:05 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      ClassWriter classWriter1 = new ClassWriter(0);
      classWriter1.newDouble(0.0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "org.apache.commons.io.filefilter.WildcardFilter", "U", (String) null, "U");
      classWriter0.toByteArray();
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.WildcardFilter", true);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.getSize();
      fieldWriter1.visitAnnotation("gSx", true);
      fieldWriter1.getSize();
      // Undeclared exception!
      try { 
        fieldWriter1.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "aA", "]hQcd4@`G)Kw=");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12(49, 2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-10);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteVector byteVector2 = byteVector1.put11(2, 4096);
      ByteVector byteVector3 = byteVector1.putInt(4096);
      byteVector3.putLong(0L);
      ByteVector byteVector4 = byteVector0.putShort(4096);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector2);
      byteVector3.putShort(1);
      fieldWriter0.put(byteVector4);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", false);
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.lastField;
      AnnotationVisitor annotationVisitor1 = fieldWriter1.visitAnnotation("`)5_,o", true);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      ClassWriter classWriter1 = new ClassWriter(0);
      classWriter1.newDouble(0.0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "org.apache.commons.io.filefilter.WildcardFilter", "U", (String) null, "U");
      classWriter0.toByteArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 49, "java/lang/Throwable", "", "java/lang/Throwable", pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.PipedInputStream@3a19a011
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2486));
      Object object0 = new Object();
      Object object1 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2503, "java/lang/Throwable", "java/lang/Throwable", "ConstantValue", "l3");
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putUTF8("Signature");
      ByteVector byteVector1 = byteVector0.putInt(1);
      fieldWriter0.visitAnnotation("gSx", false);
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("java/lang/Throwable", true);
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0735428464085233
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3533), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.visitEnd();
      ByteVector byteVector0 = new ByteVector();
      String string0 = "FMl<ryk";
      FieldWriter fieldWriter2 = new FieldWriter(classWriter0, 8, "", "wheel.asm.ClassWriter", "FMl<ryk", (Object) null);
      classWriter0.toByteArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3081135015649028
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3533), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "", "wheel.asm.ClassWriter");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.visitEnd();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11(0, (-3533));
      byteVector0.putLong(0);
      ByteVector byteVector2 = byteVector1.putShort((-277));
      fieldWriter1.getSize();
      fieldWriter1.put(byteVector2);
      byteVector1.putShort(49);
      fieldWriter1.put(byteVector1);
      fieldWriter0.visitAnnotation("", true);
      fieldWriter1.getSize();
      fieldWriter0.visitAnnotation("", false);
      Attribute attribute0 = new Attribute("wheel.asm.ClassWriter");
      fieldWriter1.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter1.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
