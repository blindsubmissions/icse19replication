/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:59:00 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONException;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      stringArray0[1] = "";
      String string0 = ")Q[7rB])-@y=7b#bq\\T";
      stringArray0[2] = ")Q[7rB])-@y=7b#bqT";
      stringArray0[3] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = "";
      try { 
        jSONObject1.getJSONObject("?i:U9X(YsF@_>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?i:U9X(YsF@_>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(903, (-4680));
      jSONObject0.optInt("", 903);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("{$0$W6],pzW", (Collection) linkedList0);
      jSONObject0.has("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0, 0, 0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.lang.Double@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Double@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Double.NaN;
      JSONObject.doubleToString(Double.NaN);
      String string0 = "9yN\\^qr";
      JSONObject.quote("9yN^qr");
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject.getNames((Object) long0);
      jSONObject0.optInt((String) null, 0);
      String string1 = "] is not a JSONObject.";
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean1);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.toString((-522), (-522));
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      String[] stringArray0 = new String[3];
      String string0 = "XfK";
      stringArray0[0] = "XfK";
      stringArray0[1] = "";
      stringArray0[2] = "GvxN";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optBoolean("XfK");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Gcki_]m>s.J4p";
      stringArray0[1] = "";
      stringArray0[2] = "+JN4ct7t";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optLong("=if4E");
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.30463609734923813
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("\"G");
      String string0 = "0*";
      int int0 = 0;
      Integer integer0 = new Integer(0);
      String string1 = null;
      try { 
        Integer.parseUnsignedInt("\"G", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a number.";
      stringArray0[1] = " at character ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "+;WHH3?=uYFr:{X#BY";
      stringArray0[5] = " !E(n";
      stringArray0[6] = "] not found.";
      stringArray0[7] = "A JSONArray text must start with '['";
      stringArray0[8] = "Unterminated string";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("", (-2661.0792582106774));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.252728336819822
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "E7>mm=!/~X\"QiZ";
      hashMap0.put("E7>mm=!/~X\"QiZ", "E7>mm=!/~X\"QiZ");
      jSONObject0.optBoolean("", true);
      hashMap0.put("f*rF'Ka4v7YAV", "");
      jSONObject0.optDouble("E7>mm=!/~X\"QiZ", 1433.694664118175);
      String string1 = "XlZ";
      Long long0 = new Long(3693L);
      hashMap0.put("B<`(v", long0);
      JSONObject jSONObject1 = jSONObject0.put("XlZ", (-267.925782));
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = (-1535);
      int int1 = 88;
      StringWriter stringWriter0 = new StringWriter(88);
      JSONObject.valueToString(jSONArray0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "wheel.json.JSONArray@0000000001", (-142), (-142));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      String string0 = "g0gBrUk}W,vvRQY5<r";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("g0gBrUk}W,vvRQY5<r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of g0gBrUk}W,vvRQY5<r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?kZl";
      stringArray0[1] = "7B!)#wP\"HpGT";
      stringArray0[2] = " at character ";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      double double0 = jSONObject0.optDouble("wv=F:bF]{nS");
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jSONObject0.optString(" at character ");
      assertEquals("", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-1490), 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0900596587107838
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "Gcki_]m>s.J4p", (-142), (-1518));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      String string0 = "?kZl";
      stringArray0[0] = "?kZl";
      stringArray0[1] = "7B!)#wP\"HpGT";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("?kZl", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("7)jSutxLPQ", 0.0);
      jSONObject1.isNull(" at character ");
      jSONObject2.keys();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("getrotateRight");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getrotateRight
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = jSONObject0.put("wa", (Map) hashMap0);
      jSONObject0.toString((-522), (-522));
      JSONObject jSONObject2 = jSONObject1.put("", false);
      jSONObject0.optDouble((String) null);
      jSONObject0.length();
      jSONObject2.put("] is not a number.", true);
      jSONObject2.has("f@I*JS&/.VT~za[h9?");
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.764921723593759
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      Boolean boolean1 = new Boolean(false);
      JSONObject.valueToString(boolean0, 70, 70);
      Long long0 = new Long(2283L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.testValidity("java.lang.Boolean@0000000001");
      String string0 = "pa";
      JSONObject.quote(".lI0#r{(g'4''H{");
      Object object0 = new Object();
      jSONObject0.append("JSONArray[", long0);
      int int0 = 3894;
      // Undeclared exception!
      jSONObject0.toString(2153, 3894);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(88);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0K&Z }_", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("", (double) 88);
      jSONObject0.isNull("0K&Z }_");
      jSONObject0.keys();
      Double double0 = new Double((-989.3356912));
      jSONObject0.append("0K&Z }_", double0);
      try { 
        jSONObject0.append("", jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.15181386541861
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optBoolean("D)a;)tEvfPx6ADR&:=|");
      boolean boolean0 = new Boolean("D)a;)tEvfPx6ADR&:=|");
      String string0 = ";PT1i";
      jSONObject0.optString("D)a;)tEvfPx6ADR&:=|", ";PT1i");
      JSONObject jSONObject1 = jSONObject0.put("D)a;)tEvfPx6ADR&:=|", 1.0);
      jSONObject1.getDouble("D)a;)tEvfPx6ADR&:=|");
      Double double0 = new Double(1.0);
      Double.min(1.0, 514.0);
      Double.min(1.0, Double.NaN);
      jSONObject1.optBoolean("Dr!#[%;\"", false);
      JSONObject jSONObject2 = jSONObject0.put("|M", (Object) double0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.names();
      jSONObject2.optDouble("Dr!#[%;\"");
      try { 
        jSONObject1.get("`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9331249408322044
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("E7>mm=!/~X\"QiZ", "E7>mm=!/~X\"QiZ");
      Boolean.getBoolean("");
      Short short0 = new Short((short)2390);
      String string0 = JSONObject.valueToString((Object) null, 1547, (-2086));
      assertEquals("null", string0);
      
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject((Object) "E7>mm=!/~X\"QiZ");
      assertEquals(3, jSONObject1.length());
      
      Long.toUnsignedString((long) 1547);
      long long1 = jSONObject0.optLong("par", 747L);
      assertEquals(747L, long1);
      
      boolean boolean0 = jSONObject0.optBoolean(".lI0#r{(g'4''H{");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1180740383621153
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      Boolean boolean1 = new Boolean(false);
      JSONObject.valueToString(boolean0, 70, 70);
      Long long0 = new Long(2283L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.valueToString("");
      jSONObject0.optLong("", 0L);
      jSONObject0.optBoolean(".lI0#r{(g'4''H{");
      jSONObject0.optString("getreplaceAll", "issubstring");
      Float float0 = new Float(2613.407045);
      JSONObject jSONObject1 = jSONObject0.put(".lI0#r{(g'4''H{", (Object) float0);
      jSONObject1.optJSONArray("issubstring");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      stringArray0[1] = "";
      Boolean.getBoolean(".lI0#r{(g'4''H{");
      Short short0 = new Short((short)233);
      JSONObject.valueToString(short0, 70, 51);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      Long.toUnsignedString(0L);
      long long1 = jSONObject1.optLong("", 1180L);
      assertEquals(3, jSONObject1.length());
      assertEquals(1180L, long1);
      
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
      
      jSONObject0.remove("O1^g~");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.615630577027551
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("E7>mm=!/~X\"QiZ", "E7>mm=!/~X\"QiZ");
      jSONObject0.optBoolean("", false);
      String string0 = "`y+k_?/u-Af6";
      hashMap0.put("`y+k_?/u-Af6", "");
      jSONObject0.optDouble("E7>mm=!/~X\"QiZ", 1433.69466412);
      jSONObject0.optBoolean("tqn=NOb1F$:Zvj");
      Float float0 = new Float((-267.925782));
      Float.max(1.0F, 1.0F);
      jSONObject0.put("i<&93", (Map) hashMap0);
      String string1 = "getgetClass";
      JSONObject jSONObject1 = jSONObject0.accumulate("getgetClass", (Object) null);
      boolean boolean0 = false;
      jSONObject1.optBoolean("getgetClass", false);
      JSONObject.testValidity((Object) null);
      try { 
        jSONObject0.getLong("tqn=NOb1F$:Zvj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tqn=NOb1F$:Zvj\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.toString(235);
      try { 
        jSONObject0.getJSONArray("`]dYWsnH&QTN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`]dYWsnH&QTN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2339492428947287
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      Boolean boolean1 = new Boolean(false);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject.valueToString(boolean1);
      jSONObject0.optInt("", 73);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONObject.doubleToString((-4680));
      jSONObject0.optJSONObject("wheel.json.JSONObject$1");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      stringArray0[1] = ",9%*";
      stringArray0[2] = ")Q[7rB])-@y=7b#bqT";
      stringArray0[3] = "";
      JSONObject.valueToString("");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = new Boolean("GHN0PHi(ts*r");
      String string0 = JSONObject.doubleToString(1514.485209);
      assertEquals("1514.485209", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean1);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("", (-522));
      jSONObject0.toString((-522), (-522));
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7851038147158325
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Boolean.logicalOr(true, true);
      Boolean boolean0 = new Boolean("isequals");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      Byte byte0 = Byte.valueOf((byte)2);
      JSONObject jSONObject1 = new JSONObject(byte0);
      try { 
        jSONObject1.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
