/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:58:55 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "-@$ddjSc)Q";
      Form form0 = new Form("-@$ddjSc)Q");
      String string1 = "@y=7b#bq\\TUjn";
      Form form1 = form0.addFormValidationError("@y=7b#bqTUjn");
      Hidden hidden0 = new Hidden(form1, "@y=7b#bqTUjn", "-@$ddjSc)Q");
      // Undeclared exception!
      try { 
        form1.addFormElement(hidden0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Form form0 = new Form("");
      Checkbox checkbox0 = null;
      try {
        checkbox0 = new Checkbox(form0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      String string1 = "CWv&&:M>";
      NumberInput numberInput0 = new NumberInput(form0, "CWv&&:M>", "CWv&&:M>");
      String string2 = "Tbody component can be added only to a Table.";
      String string3 = "1njLHZ&lv2x2X";
      TextArea textArea0 = new TextArea(numberInput0, "Tbody component can be added only to a Table.", "1njLHZ&lv2x2X");
      // Undeclared exception!
      try { 
        form0.tt((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "^v}j", "^v}j");
      FormElement formElement0 = checkbox0.setBinding("^v}j");
      // Undeclared exception!
      try { 
        formElement0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "kbd";
      ActionExpression actionExpression0 = null;
      Form form0 = null;
      try {
        form0 = new Form((Component) null, "kbd", (ActionExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4681399390162084
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ";Nt)g$d7D ";
      Form form0 = new Form(";Nt)g$d7D ");
      Table table0 = null;
      try {
        table0 = new Table(form0, ";Nt)g$d7D ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("S'Q6u2U1r");
      ElExpression elExpression1 = elExpression0.errorMessage("cannot coerce Long to Integer since the value (");
      RadioGroup radioGroup0 = new RadioGroup((Component) null, "S'Q6u2U1r", "cannot coerce Long to Integer since the value (", (ISelectModel) null, elExpression1);
      // Undeclared exception!
      try { 
        radioGroup0.buildComponent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "9E)";
      // Undeclared exception!
      try { 
        errorPage0.id("9E)");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      Any any0 = null;
      try {
        any0 = new Any(form0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "HiqdoR=\"";
      Form form0 = new Form("HiqdoR=\"");
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("HiqdoR=\"", "HiqdoR=\"");
      Locale locale1 = locale0.stripExtensions();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale1);
      // Undeclared exception!
      try { 
        form0.label((Object) calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      String string0 = "Finder expression didn't evaluate to a boolean value.";
      Table table0 = new Table(image0, "Finder expression didn't evaluate to a boolean value.");
      Table table1 = table0.renderHint(charBuffer0);
      // Undeclared exception!
      try { 
        table1.id(">{qK)A$;J[,\"owS7");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "T-bh1e21I>";
      Form form0 = new Form("T-bh1e21I>");
      // Undeclared exception!
      try { 
        form0.abbr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "!R+1]aT-6zP;q-";
      Form form0 = new Form("!R+1]aT-6zP;q-");
      String string1 = "r{mQM>1x9";
      ISelectModel iSelectModel0 = null;
      String string2 = "Could not encode string '";
      // Undeclared exception!
      try { 
        form0.buildComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Form form0 = new Form("*-GN4MdUSM,3\"^Hu>l-");
      ElExpression elExpression0 = new ElExpression("org.mvel.conversion.PrimArrayHandler$2");
      elExpression0.errorMessage("");
      RadioGroup radioGroup0 = new RadioGroup(form0, "", "*-GN4MdUSM,3\"^Hu>l-", (ISelectModel) null, elExpression0);
      // Undeclared exception!
      try { 
        radioGroup0.link();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.components.Form cannot be cast to wheel.components.StandaloneComponent
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      Table table0 = new Table(image0, "Finder expression didn't evaluate to a boolean value.");
      table0.renderHint(charBuffer0);
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance();
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance(xmlPullParserFactory0);
      XmlSerializerWrapper xmlSerializerWrapper0 = xmlPullWrapperFactory0.newSerializerWrapper();
      xmlPullWrapperFactory0.newSerializerWrapper((XmlSerializer) xmlSerializerWrapper0);
      String string0 = "U2|Abc{XKy/kUG&i7JY";
      String string1 = "R:W_hL#@1$GY$.k\"";
      ActionExpression actionExpression0 = new ActionExpression("R:W_hL#@1$GY$.k\"");
      ActionExpression actionExpression1 = actionExpression0.javascript("org.xmlpull.v1.XmlPullParserFactory");
      ActionExpression actionExpression2 = actionExpression1.updateComponent("org.xmlpull.v1.XmlPullParserFactory");
      Form form0 = new Form(table0, "U2|Abc{XKy/kUG&i7JY", actionExpression2);
      Form form1 = form0.addFormValidationError("");
      // Undeclared exception!
      try { 
        form1._render(xmlSerializerWrapper0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "^v}j", "^v}j");
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("^v}j", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("^v}j", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.setBinding("^v}j");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("^v}j", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("^v}j", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("^v}j", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("^v}j", formElement0.getFormElementName());
      assertNotNull(formElement0);
      
      FileInput fileInput0 = new FileInput(checkbox0, "^v}j", "^v}j");
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("^v}j", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("^v}j", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("^v}j", fileInput0.getFormElementName());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("^v}j", fileInput0.getComponentId());
      assertNotNull(fileInput0);
      
      // Undeclared exception!
      try { 
        checkbox0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("S'Q6u2U1r");
      assertEquals("S'Q6u2U1r", elExpression0.getExpression());
      assertEquals(9, elExpression0.length());
      assertEquals("S'Q6u2U1r", elExpression0.toString());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("cannot coerce Long to Integer since the value (");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("S'Q6u2U1r", elExpression0.getExpression());
      assertEquals(9, elExpression0.length());
      assertEquals("S'Q6u2U1r", elExpression0.toString());
      assertEquals("S'Q6u2U1r", elExpression1.getExpression());
      assertEquals("S'Q6u2U1r", elExpression1.toString());
      assertEquals(9, elExpression1.length());
      assertNotNull(elExpression1);
      
      RadioGroup radioGroup0 = new RadioGroup((Component) null, "S'Q6u2U1r", "cannot coerce Long to Integer since the value (", (ISelectModel) null, elExpression1);
      assertEquals("S'Q6u2U1r", elExpression0.getExpression());
      assertEquals(9, elExpression0.length());
      assertEquals("S'Q6u2U1r", elExpression0.toString());
      assertEquals("S'Q6u2U1r", elExpression1.getExpression());
      assertEquals("S'Q6u2U1r", elExpression1.toString());
      assertEquals(9, elExpression1.length());
      assertTrue(radioGroup0.isEmpty());
      assertFalse(radioGroup0._isGeneratedId());
      assertEquals("cannot coerce Long to Integer since the value (", radioGroup0.getComponentId());
      assertTrue(radioGroup0.isValid());
      assertEquals("S'Q6u2U1r", radioGroup0.getFormElementName());
      assertFalse(radioGroup0._isBuilt());
      assertEquals("input", radioGroup0.defaultTagName());
      assertNotNull(radioGroup0);
      
      // Undeclared exception!
      try { 
        radioGroup0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      
      Form form0 = new Form("Finder expression didn't evaluate to a boolean value.");
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      Form form1 = form0.renderHint(charBuffer0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("Finder expression didn't evaluate to a boolean value.", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertNotNull(form1);
      
      Block block0 = (Block)errorPage0.dd();
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      // Undeclared exception!
      try { 
        errorPage0.textInput("Finder expression didn't evaluate to a boolean value.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2602338531746744
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertNotNull(image0);
      
      Map<String, Component> map0 = image0.getComponents();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        image0.message("7]65;t44d~ahpCs\"P", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertNotNull(image0);
      
      String string0 = "Finder expression didn't evaluate to a boolean value.";
      TextArea textArea0 = new TextArea(image0, "Finder expression didn't evaluate to a boolean value.", "Finder expression didn't evaluate to a boolean value.");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("Finder expression didn't evaluate to a boolean value.", textArea0.getFormElementName());
      assertNotNull(textArea0);
      
      // Undeclared exception!
      try { 
        image0.strike((Object) textArea0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      
      Table table0 = new Table(image0, "Finder expression didn't evaluate to a boolean value.");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint(charBuffer0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance();
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertNotNull(xmlPullParserFactory0);
      
      Table table2 = (Table)table0.addRenderBefore(table1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table2.getComponentId());
      assertNotNull(table2);
      
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance(xmlPullParserFactory0);
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNotNull(xmlPullWrapperFactory0);
      
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = (StaticXmlSerializerWrapper)xmlPullWrapperFactory0.newSerializerWrapper();
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNull(staticXmlSerializerWrapper0.getName());
      assertNull(staticXmlSerializerWrapper0.getNamespace());
      assertEquals(0, staticXmlSerializerWrapper0.getDepth());
      assertNull(staticXmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertNotNull(staticXmlSerializerWrapper0);
      
      StaticXmlSerializerWrapper staticXmlSerializerWrapper1 = (StaticXmlSerializerWrapper)xmlPullWrapperFactory0.newSerializerWrapper((XmlSerializer) staticXmlSerializerWrapper0);
      assertNotSame(staticXmlSerializerWrapper0, staticXmlSerializerWrapper1);
      assertNotSame(staticXmlSerializerWrapper1, staticXmlSerializerWrapper0);
      assertFalse(staticXmlSerializerWrapper1.equals((Object)staticXmlSerializerWrapper0));
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNull(staticXmlSerializerWrapper0.getName());
      assertNull(staticXmlSerializerWrapper0.getNamespace());
      assertEquals(0, staticXmlSerializerWrapper0.getDepth());
      assertNull(staticXmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertNull(staticXmlSerializerWrapper1.getCurrentNamespaceForElements());
      assertEquals(0, staticXmlSerializerWrapper1.getDepth());
      assertNull(staticXmlSerializerWrapper1.getNamespace());
      assertNull(staticXmlSerializerWrapper1.getName());
      assertNotNull(staticXmlSerializerWrapper1);
      
      ActionExpression actionExpression0 = new ActionExpression("R%:W_hL#@1$GY$.k\"");
      assertEquals(18, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.javascript("org.xmlpull.v1.XmlPullParserFactory");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals(18, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertEquals(18, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression1.getJavascript());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.getExpression());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.toString());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertNotNull(actionExpression1);
      
      ActionExpression actionExpression2 = actionExpression1.event("Finder expression didn't evaluate to a boolean value.");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertEquals(18, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertEquals("Finder expression didn't evaluate to a boolean value.", actionExpression0.getEvent());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertEquals(18, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression1.getJavascript());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.getExpression());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("Finder expression didn't evaluate to a boolean value.", actionExpression1.getEvent());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("Finder expression didn't evaluate to a boolean value.", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression2.getJavascript());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.toString());
      assertEquals(18, actionExpression2.length());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.getExpression());
      assertNotNull(actionExpression2);
      
      Form form0 = new Form(table0, "org.xmlpull.v1.XmlPullParserFactory", actionExpression2);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertEquals(18, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertEquals(18, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression1.getJavascript());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.getExpression());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.getActionExpression());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("action", actionExpression2.getEvent());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression2.getJavascript());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.toString());
      assertEquals(18, actionExpression2.length());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.getExpression());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      Block block0 = (Block)errorPage0.dd();
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      DynamicSelectModel dynamicSelectModel0 = block0.selectModel();
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(dynamicSelectModel0);
      
      Form form1 = form0.addFormValidationRule((String) null, "");
      assertSame(form1, form0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(form0, form1);
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertEquals(18, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertEquals(18, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression1.getJavascript());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.getExpression());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.getActionExpression());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("action", actionExpression2.getEvent());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression2.getJavascript());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.toString());
      assertEquals(18, actionExpression2.length());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.getExpression());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form1);
      
      boolean boolean0 = form1._isBuilt();
      assertSame(form1, form0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(form0, form1);
      assertFalse(boolean0);
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertEquals(18, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertEquals(18, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression1.getJavascript());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.getExpression());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression1.getActionExpression());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("action", actionExpression2.getEvent());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression2.getJavascript());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.toString());
      assertEquals(18, actionExpression2.length());
      assertEquals("R%:W_hL#@1$GY$.k\"", actionExpression2.getExpression());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertNotNull(image0);
      
      Form form0 = new Form("Finder expression didn't evaluate to a boolean value.");
      assertEquals("form", form0.defaultTagName());
      assertEquals("Finder expression didn't evaluate to a boolean value.", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      Form form1 = form0.renderHint(charBuffer0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("form", form0.defaultTagName());
      assertEquals("Finder expression didn't evaluate to a boolean value.", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("Finder expression didn't evaluate to a boolean value.", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertNotNull(form1);
      
      Block block0 = (Block)errorPage0.dd();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      Form form2 = form1.addFormValidationRule("@V~-", ".css");
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("form", form0.defaultTagName());
      assertEquals("Finder expression didn't evaluate to a boolean value.", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("Finder expression didn't evaluate to a boolean value.", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("form", form2.defaultTagName());
      assertEquals("Finder expression didn't evaluate to a boolean value.", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertNotNull(form2);
      
      Form form3 = new Form("fBPf,&0n85Bq&");
      assertFalse(form3.equals((Object)form1));
      assertFalse(form3.equals((Object)form2));
      assertFalse(form3.equals((Object)form0));
      assertFalse(form3._isGeneratedId());
      assertFalse(form3._isBuilt());
      assertEquals("form", form3.defaultTagName());
      assertEquals("fBPf,&0n85Bq&", form3.getComponentId());
      assertNotNull(form3);
      
      // Undeclared exception!
      try { 
        block0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertNotNull(image0);
      
      Table table0 = new Table(image0, "Finder expression didn't evaluate to a boolean value.");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint(charBuffer0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance();
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertNotNull(xmlPullParserFactory0);
      
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance(xmlPullParserFactory0);
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNotNull(xmlPullWrapperFactory0);
      
      XmlSerializerWrapper xmlSerializerWrapper0 = xmlPullWrapperFactory0.newSerializerWrapper();
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertEquals(0, xmlSerializerWrapper0.getDepth());
      assertNull(xmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertNull(xmlSerializerWrapper0.getName());
      assertNull(xmlSerializerWrapper0.getNamespace());
      assertNotNull(xmlSerializerWrapper0);
      
      XmlSerializerWrapper xmlSerializerWrapper1 = xmlPullWrapperFactory0.newSerializerWrapper((XmlSerializer) xmlSerializerWrapper0);
      assertNotSame(xmlSerializerWrapper0, xmlSerializerWrapper1);
      assertNotSame(xmlSerializerWrapper1, xmlSerializerWrapper0);
      assertFalse(xmlSerializerWrapper1.equals((Object)xmlSerializerWrapper0));
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertEquals(0, xmlSerializerWrapper0.getDepth());
      assertNull(xmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertNull(xmlSerializerWrapper0.getName());
      assertNull(xmlSerializerWrapper0.getNamespace());
      assertNull(xmlSerializerWrapper1.getName());
      assertEquals(0, xmlSerializerWrapper1.getDepth());
      assertNull(xmlSerializerWrapper1.getCurrentNamespaceForElements());
      assertNull(xmlSerializerWrapper1.getNamespace());
      assertNotNull(xmlSerializerWrapper1);
      
      String string0 = "R:W_hL#@1$GY$.k\"";
      ActionExpression actionExpression0 = new ActionExpression("R:W_hL#@1$GY$.k\"");
      assertNull(actionExpression0.getJavascript());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertEquals(17, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.javascript("org.xmlpull.v1.XmlPullParserFactory");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertEquals(17, actionExpression0.length());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.toString());
      assertEquals(17, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.getExpression());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression1.getJavascript());
      assertNotNull(actionExpression1);
      
      ActionExpression actionExpression2 = actionExpression1.updateComponent("org.xmlpull.v1.XmlPullParserFactory");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertEquals(17, actionExpression0.length());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.toString());
      assertEquals(17, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.getExpression());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression1.getJavascript());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression2.toString());
      assertEquals(17, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression2.getJavascript());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertFalse(actionExpression2.isExternalUrl());
      assertNotNull(actionExpression2);
      
      Form form0 = new Form(table0, "org.xmlpull.v1.XmlPullParserFactory", actionExpression2);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertEquals(17, actionExpression0.length());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.toString());
      assertEquals(17, actionExpression1.length());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.getExpression());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression1.getJavascript());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression2.toString());
      assertEquals(17, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression2.getJavascript());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression2.getExpression());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("action", actionExpression2.getEvent());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      String string1 = "";
      Form form1 = form0.addFormValidationError("");
      assertSame(table0, table1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.toString());
      assertEquals(17, actionExpression0.length());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.toString());
      assertEquals(17, actionExpression1.length());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression1.getExpression());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression1.getJavascript());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression2.toString());
      assertEquals(17, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", actionExpression2.getJavascript());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression2.getExpression());
      assertEquals("R:W_hL#@1$GY$.k\"", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("action", actionExpression2.getEvent());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("org.xmlpull.v1.XmlPullParserFactory", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertNotNull(form1);
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      TableBlock tableBlock0 = table1.colgroup();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(tableRow0);
      
      Block block0 = (Block)tableRow0.th();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(block0);
      
      Select select0 = null;
      try {
        select0 = new Select(image0, "org.xmlpull.v1.XmlPullParserFactory", "Finder expression didn't evaluate to a boolean value.", "R:W_hL#@1$GY$.k\"", dynamicSelectModel0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("S'Q6u2U1r");
      assertEquals("S'Q6u2U1r", elExpression0.getExpression());
      assertEquals("S'Q6u2U1r", elExpression0.toString());
      assertEquals(9, elExpression0.length());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("cannot coerce Long to Integer since the value (");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("S'Q6u2U1r", elExpression0.getExpression());
      assertEquals("S'Q6u2U1r", elExpression0.toString());
      assertEquals(9, elExpression0.length());
      assertEquals("S'Q6u2U1r", elExpression1.toString());
      assertEquals("S'Q6u2U1r", elExpression1.getExpression());
      assertEquals(9, elExpression1.length());
      assertNotNull(elExpression1);
      
      Hidden hidden0 = new Hidden((Component) null, "S'Q6u2U1r", "cannot coerce Long to Integer since the value (");
      assertEquals("cannot coerce Long to Integer since the value (", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("S'Q6u2U1r", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertNotNull(hidden0);
      
      FormElement formElement0 = hidden0.value("Awx");
      assertSame(hidden0, formElement0);
      assertSame(formElement0, hidden0);
      assertEquals("cannot coerce Long to Integer since the value (", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("S'Q6u2U1r", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("cannot coerce Long to Integer since the value (", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("S'Q6u2U1r", formElement0.getFormElementName());
      assertNotNull(formElement0);
      
      Checkbox checkbox0 = new Checkbox((Component) null, "S'Q6u2U1r", "S'Q6u2U1r");
      assertEquals("S'Q6u2U1r", checkbox0.getComponentId());
      assertEquals("S'Q6u2U1r", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertNotNull(checkbox0);
      
      checkbox0._setComponentId("");
      assertEquals("S'Q6u2U1r", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getComponentId());
      
      // Undeclared exception!
      try { 
        checkbox0.getPage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6965112295355937
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      
      Table table0 = new Table(image0, "Finder expression didn't evaluate to a boolean value.");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint(charBuffer0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance();
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertNotNull(xmlPullParserFactory0);
      
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance(xmlPullParserFactory0);
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertNotNull(xmlPullWrapperFactory0);
      
      XmlSerializerWrapper xmlSerializerWrapper0 = xmlPullWrapperFactory0.newSerializerWrapper();
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertNull(xmlSerializerWrapper0.getName());
      assertNull(xmlSerializerWrapper0.getNamespace());
      assertNull(xmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertEquals(0, xmlSerializerWrapper0.getDepth());
      assertNotNull(xmlSerializerWrapper0);
      
      XmlSerializerWrapper xmlSerializerWrapper1 = xmlPullWrapperFactory0.newSerializerWrapper((XmlSerializer) xmlSerializerWrapper0);
      assertNotSame(xmlSerializerWrapper0, xmlSerializerWrapper1);
      assertNotSame(xmlSerializerWrapper1, xmlSerializerWrapper0);
      assertFalse(xmlSerializerWrapper1.equals((Object)xmlSerializerWrapper0));
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertNull(xmlSerializerWrapper0.getName());
      assertNull(xmlSerializerWrapper0.getNamespace());
      assertNull(xmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertEquals(0, xmlSerializerWrapper0.getDepth());
      assertNull(xmlSerializerWrapper1.getNamespace());
      assertNull(xmlSerializerWrapper1.getName());
      assertEquals(0, xmlSerializerWrapper1.getDepth());
      assertNull(xmlSerializerWrapper1.getCurrentNamespaceForElements());
      assertNotNull(xmlSerializerWrapper1);
      
      String string0 = "R:W_hL#@1$GY$.k\"";
      // Undeclared exception!
      try { 
        image0.big();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      
      Map<String, Component> map0 = image0.getComponents();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      ElExpression elExpression0 = new ElExpression("7]65;t44d~ahpCs\"P");
      assertEquals("7]65;t44d~ahpCs\"P", elExpression0.toString());
      assertEquals(17, elExpression0.length());
      assertEquals("7]65;t44d~ahpCs\"P", elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("7]65;t44d~ahpCs\"P");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("7]65;t44d~ahpCs\"P", elExpression0.toString());
      assertEquals(17, elExpression0.length());
      assertEquals("7]65;t44d~ahpCs\"P", elExpression0.getExpression());
      assertEquals("7]65;t44d~ahpCs\"P", elExpression1.toString());
      assertEquals("7]65;t44d~ahpCs\"P", elExpression1.getExpression());
      assertEquals(17, elExpression1.length());
      assertNotNull(elExpression1);
      
      ElExpression elExpression2 = elExpression1.errorMessage("V(J<Bb&y/3my^dB0D");
      assertSame(elExpression0, elExpression2);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertSame(elExpression1, elExpression2);
      assertSame(elExpression2, elExpression1);
      assertSame(elExpression2, elExpression0);
      assertEquals("7]65;t44d~ahpCs\"P", elExpression0.toString());
      assertEquals(17, elExpression0.length());
      assertEquals("7]65;t44d~ahpCs\"P", elExpression0.getExpression());
      assertEquals("7]65;t44d~ahpCs\"P", elExpression1.toString());
      assertEquals("7]65;t44d~ahpCs\"P", elExpression1.getExpression());
      assertEquals(17, elExpression1.length());
      assertEquals("7]65;t44d~ahpCs\"P", elExpression2.getExpression());
      assertEquals("7]65;t44d~ahpCs\"P", elExpression2.toString());
      assertEquals(17, elExpression2.length());
      assertNotNull(elExpression2);
      
      Form form0 = new Form("7]65;t44d~ahpCs\"P");
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("7]65;t44d~ahpCs\"P", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      Form form1 = form0.addFormValidationError("");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("7]65;t44d~ahpCs\"P", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("7]65;t44d~ahpCs\"P", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertNotNull(form1);
      
      ElExpression elExpression3 = new ElExpression(">{qK)A$;J[,\"owS7");
      assertFalse(elExpression3.equals((Object)elExpression0));
      assertFalse(elExpression3.equals((Object)elExpression1));
      assertFalse(elExpression3.equals((Object)elExpression2));
      assertEquals(">{qK)A$;J[,\"owS7", elExpression3.toString());
      assertEquals(16, elExpression3.length());
      assertEquals(">{qK)A$;J[,\"owS7", elExpression3.getExpression());
      assertNotNull(elExpression3);
      
      // Undeclared exception!
      try { 
        form0.fileInput("", elExpression3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.625403991166745
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        errorPage0.title("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      Form form0 = new Form("");
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      Form form1 = form0.renderHint("");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertNotNull(form1);
      
      Block block0 = (Block)errorPage0.dd();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      Block block1 = block0.placeholder("");
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertFalse(block1.equals((Object)block0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      
      Form form2 = form0.addFormValidationRule("Finder expression didn't evaluate to a boolean value.", ".css");
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form2, form0);
      assertSame(form2, form1);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("wheel_components_Form", form2.getComponentId());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertNotNull(form2);
      
      boolean boolean0 = form1._isBuilt();
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertFalse(boolean0);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertFalse(form1._isBuilt());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("S'Q6u2U1r");
      assertEquals(9, elExpression0.length());
      assertEquals("S'Q6u2U1r", elExpression0.getExpression());
      assertEquals("S'Q6u2U1r", elExpression0.toString());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("cannot coerce Long to Integer since the value (");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals(9, elExpression0.length());
      assertEquals("S'Q6u2U1r", elExpression0.getExpression());
      assertEquals("S'Q6u2U1r", elExpression0.toString());
      assertEquals("S'Q6u2U1r", elExpression1.getExpression());
      assertEquals(9, elExpression1.length());
      assertEquals("S'Q6u2U1r", elExpression1.toString());
      assertNotNull(elExpression1);
      
      RadioGroup radioGroup0 = new RadioGroup((Component) null, "S'Q6u2U1r", "cannot coerce Long to Integer since the value (", (ISelectModel) null, elExpression1);
      assertEquals(9, elExpression0.length());
      assertEquals("S'Q6u2U1r", elExpression0.getExpression());
      assertEquals("S'Q6u2U1r", elExpression0.toString());
      assertEquals("S'Q6u2U1r", elExpression1.getExpression());
      assertEquals(9, elExpression1.length());
      assertEquals("S'Q6u2U1r", elExpression1.toString());
      assertFalse(radioGroup0._isGeneratedId());
      assertEquals("input", radioGroup0.defaultTagName());
      assertEquals("cannot coerce Long to Integer since the value (", radioGroup0.getComponentId());
      assertTrue(radioGroup0.isEmpty());
      assertFalse(radioGroup0._isBuilt());
      assertEquals("S'Q6u2U1r", radioGroup0.getFormElementName());
      assertTrue(radioGroup0.isValid());
      assertNotNull(radioGroup0);
      
      // Undeclared exception!
      try { 
        radioGroup0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label(">{qK)A$;J[,\"owS7");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel1);
      
      String string0 = "(Z)V";
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.value("(Z)V");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel2);
      
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.collection(">{qK)A$;J[,\"owS7");
      assertSame(dynamicSelectModel0, dynamicSelectModel3);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel3);
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
      assertSame(dynamicSelectModel3, dynamicSelectModel0);
      assertSame(dynamicSelectModel3, dynamicSelectModel2);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel3);
      
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.empty(dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel3);
      assertSame(dynamicSelectModel0, dynamicSelectModel4);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel4);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel4);
      assertSame(dynamicSelectModel2, dynamicSelectModel3);
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
      assertSame(dynamicSelectModel3, dynamicSelectModel0);
      assertSame(dynamicSelectModel3, dynamicSelectModel4);
      assertSame(dynamicSelectModel3, dynamicSelectModel2);
      assertSame(dynamicSelectModel4, dynamicSelectModel0);
      assertSame(dynamicSelectModel4, dynamicSelectModel1);
      assertSame(dynamicSelectModel4, dynamicSelectModel2);
      assertSame(dynamicSelectModel4, dynamicSelectModel3);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel4);
      
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel1.translator("javascript");
      assertSame(dynamicSelectModel0, dynamicSelectModel5);
      assertSame(dynamicSelectModel0, dynamicSelectModel3);
      assertSame(dynamicSelectModel0, dynamicSelectModel4);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel4);
      assertSame(dynamicSelectModel1, dynamicSelectModel5);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel5, dynamicSelectModel2);
      assertSame(dynamicSelectModel5, dynamicSelectModel3);
      assertSame(dynamicSelectModel5, dynamicSelectModel1);
      assertSame(dynamicSelectModel5, dynamicSelectModel4);
      assertSame(dynamicSelectModel5, dynamicSelectModel0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel5);
      
      // Undeclared exception!
      try { 
        errorPage0.multiSelect("Mx8T:q", dynamicSelectModel4, "Mx8T:q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertNotNull(image0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      String string0 = "sup";
      ActionExpression actionExpression0 = new ActionExpression("sup");
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("sup", actionExpression0.getExpression());
      assertEquals("sup", actionExpression0.toString());
      assertEquals(3, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertEquals("sup", actionExpression0.getActionExpression());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.setOwner(table0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("sup", actionExpression0.getExpression());
      assertEquals("sup", actionExpression0.toString());
      assertEquals("Table_1", actionExpression0.getSourceId());
      assertEquals(3, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertEquals("sup", actionExpression0.getActionExpression());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("sup", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals(3, actionExpression1.length());
      assertEquals("sup", actionExpression1.getExpression());
      assertEquals("Table_1", actionExpression1.getSourceId());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertEquals("sup", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertNotNull(actionExpression1);
      
      ActionExpression actionExpression2 = actionExpression0.event("sup");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("sup", actionExpression0.getEvent());
      assertNull(actionExpression0.getJavascript());
      assertEquals("sup", actionExpression0.getExpression());
      assertEquals("sup", actionExpression0.toString());
      assertEquals("Table_1", actionExpression0.getSourceId());
      assertEquals(3, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("sup", actionExpression0.getActionExpression());
      assertEquals("sup", actionExpression2.getEvent());
      assertEquals("Table_1", actionExpression2.getSourceId());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isSubmissible());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("sup", actionExpression2.toString());
      assertEquals("sup", actionExpression2.getActionExpression());
      assertEquals(3, actionExpression2.length());
      assertEquals("sup", actionExpression2.getExpression());
      assertNotNull(actionExpression2);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertNotNull(errorPage1);
      
      // Undeclared exception!
      try { 
        errorPage1.remove((Component) table0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6363914389377974
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertNotNull(image0);
      
      Hidden hidden0 = new Hidden(errorPage0, ">{qK)A$;J[,\"owS7", ">{qK)A$;J[,\"owS7");
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertEquals(">{qK)A$;J[,\"owS7", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals(">{qK)A$;J[,\"owS7", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertNotNull(hidden0);
      
      // Undeclared exception!
      try { 
        image0.b((Object) hidden0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      
      Map<String, Component> map0 = image0.getComponents();
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      String string0 = errorPage0.toString();
      assertEquals("<div id=\"wheel_ErrorPage\"/>", string0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = image0.defaultTagName();
      assertEquals("img", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6221854903826207
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertNotNull(image0);
      
      // Undeclared exception!
      try { 
        image0.br();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      ElExpression elExpression0 = new ElExpression("!fw2^herqbG,t");
      assertEquals(14, elExpression0.length());
      assertEquals("!fw2^herqbG,t", elExpression0.getExpression());
      assertEquals("!fw2^herqbG,t", elExpression0.toString());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("HD8>Q/");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals(14, elExpression0.length());
      assertEquals("!fw2^herqbG,t", elExpression0.getExpression());
      assertEquals("!fw2^herqbG,t", elExpression0.toString());
      assertEquals("!fw2^herqbG,t", elExpression1.getExpression());
      assertEquals("!fw2^herqbG,t", elExpression1.toString());
      assertEquals(14, elExpression1.length());
      assertNotNull(elExpression1);
      
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "!fw2^herqbG,t", "[fU)5>b|yx|3'ZcDt(,", (ISelectModel) null, elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(14, elExpression0.length());
      assertEquals("!fw2^herqbG,t", elExpression0.getExpression());
      assertEquals("!fw2^herqbG,t", elExpression0.toString());
      assertFalse(radioGroup0._isGeneratedId());
      assertEquals("!fw2^herqbG,t", radioGroup0.getFormElementName());
      assertEquals("input", radioGroup0.defaultTagName());
      assertFalse(radioGroup0._isBuilt());
      assertTrue(radioGroup0.isValid());
      assertTrue(radioGroup0.isEmpty());
      assertEquals("[fU)5>b|yx|3'ZcDt(,", radioGroup0.getComponentId());
      assertNotNull(radioGroup0);
      
      Link link0 = (Link)radioGroup0.a();
      assertSame(elExpression0, elExpression1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(14, elExpression0.length());
      assertEquals("!fw2^herqbG,t", elExpression0.getExpression());
      assertEquals("!fw2^herqbG,t", elExpression0.toString());
      assertFalse(radioGroup0._isGeneratedId());
      assertEquals("!fw2^herqbG,t", radioGroup0.getFormElementName());
      assertEquals("input", radioGroup0.defaultTagName());
      assertFalse(radioGroup0._isBuilt());
      assertTrue(radioGroup0.isValid());
      assertTrue(radioGroup0.isEmpty());
      assertEquals("[fU)5>b|yx|3'ZcDt(,", radioGroup0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertNotNull(link0);
      
      Link link1 = (Link)link0.renderHint("[fU)5>b|yx|3'ZcDt(,");
      assertSame(elExpression0, elExpression1);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(14, elExpression0.length());
      assertEquals("!fw2^herqbG,t", elExpression0.getExpression());
      assertEquals("!fw2^herqbG,t", elExpression0.toString());
      assertFalse(radioGroup0._isGeneratedId());
      assertEquals("!fw2^herqbG,t", radioGroup0.getFormElementName());
      assertEquals("input", radioGroup0.defaultTagName());
      assertFalse(radioGroup0._isBuilt());
      assertTrue(radioGroup0.isValid());
      assertTrue(radioGroup0.isEmpty());
      assertEquals("[fU)5>b|yx|3'ZcDt(,", radioGroup0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("a", link1.defaultTagName());
      assertTrue(link1._isGeneratedId());
      assertEquals("Link_1", link1.getComponentId());
      assertNotNull(link1);
      
      // Undeclared exception!
      try { 
        radioGroup0.buildComponent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read value with binding !fw2^herqbG,t in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.360736090273855
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      
      String string0 = "7]65;t44d~ahpCs\"P";
      Map<String, Component> map0 = image0.getComponents();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      ActionExpression actionExpression0 = new ActionExpression("7]65;t44d~ahpCs\"P");
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.getExpression());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals(17, actionExpression0.length());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.toString());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.submitForm(false);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.getExpression());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals(17, actionExpression0.length());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression1.getExpression());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression1.toString());
      assertEquals(17, actionExpression1.length());
      assertFalse(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getEvent());
      assertNotNull(actionExpression1);
      
      ActionExpression actionExpression2 = actionExpression1.updateComponent("7]65;t44d~ahpCs\"P");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.getExpression());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals(17, actionExpression0.length());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression1.getExpression());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression1.toString());
      assertEquals(17, actionExpression1.length());
      assertFalse(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmitForm());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression2.getActionExpression());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression2.toString());
      assertEquals(17, actionExpression2.length());
      assertNull(actionExpression2.getEvent());
      assertNotNull(actionExpression2);
      
      Form form0 = new Form(image0, "7]65;t44d~ahpCs\"P", actionExpression2);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.getExpression());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals(17, actionExpression0.length());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression1.getExpression());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression1.toString());
      assertEquals(17, actionExpression1.length());
      assertFalse(actionExpression1.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("action", actionExpression2.getEvent());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmitForm());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression2.getActionExpression());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("7]65;t44d~ahpCs\"P", actionExpression2.toString());
      assertEquals(17, actionExpression2.length());
      assertEquals("7]65;t44d~ahpCs\"P", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      String string1 = "Thead component can be added only to a Table.";
      // Undeclared exception!
      try { 
        form0.id("Thead component can be added only to a Table.");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      Image image0 = new Image(errorPage0, charBuffer0, charBuffer0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertNotNull(image0);
      
      String string0 = "Finder expression didn't evaluate to a boolean value.";
      // Undeclared exception!
      try { 
        image0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      assertFalse(form0._isBuilt());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      Table table0 = null;
      try {
        table0 = new Table(form0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
