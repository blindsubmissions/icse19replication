/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:19:07 GMT 2018
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.0604430105464155
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.addHeader("OY", "WaJfaM}");
      resultMatrixHTML0.toString();
      resultMatrixHTML0.setRowNameWidth((-163));
      resultMatrixHTML0.toStringHeader();
      resultMatrixHTML0.setSignificance(1714, 1714, 1714);
      int[][] intArray0 = new int[7][6];
      int[] intArray1 = new int[8];
      intArray1[0] = 1714;
      intArray1[1] = (-163);
      intArray1[2] = 2;
      intArray1[3] = 1;
      intArray1[4] = 2;
      intArray1[5] = 0;
      intArray1[6] = 3688;
      intArray1[7] = (-163);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 1714;
      intArray2[1] = (-1552);
      intArray2[2] = 3688;
      intArray2[3] = (-163);
      intArray2[4] = 0;
      intArray2[5] = 1714;
      intArray2[6] = 2;
      intArray2[7] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = (-163);
      intArray3[1] = 0;
      intArray3[2] = 3688;
      intArray3[3] = 3688;
      intArray3[4] = 2;
      intArray3[5] = 1714;
      intArray3[6] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = (-163);
      intArray4[1] = (-163);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 3688;
      intArray6[1] = 0;
      intArray6[2] = 2434;
      intArray6[3] = 3688;
      intArray6[4] = 0;
      intArray6[5] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      intArray7[0] = (-1552);
      intArray7[1] = 3688;
      intArray7[2] = 804;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.174387269895635
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = "$circ$";
      stringArray0[2] = ")";
      stringArray0[3] = " ";
      stringArray0[4] = "(";
      stringArray0[5] = "(";
      stringArray0[6] = "$circ$";
      resultMatrixLatex0.setOptions(stringArray0);
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & \\\\\n\\hline\n & \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = 652.27894430616;
      doubleArray1[2] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) (-1860);
      doubleArray3[1] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 652.27894430616;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-3085.187962003747);
      doubleArray4[4] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (double) 2;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (-2976.8782164783);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-613.84608513);
      doubleArray6[4] = (-3085.187962003747);
      doubleArray6[5] = (double) (-1860);
      doubleArray6[6] = (-3085.187962003747);
      doubleArray6[7] = (-2976.8782164783);
      doubleArray6[8] = (double) 2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 652.27894430616;
      doubleArray7[1] = (-4743.0);
      doubleArray7[2] = 652.27894430616;
      doubleArray7[3] = (double) 2;
      doubleArray7[4] = (-96.0);
      doubleArray7[5] = (-3085.187962003747);
      doubleArray0[6] = doubleArray7;
      resultMatrixLatex0.m_Mean = doubleArray0;
      resultMatrixLatex0.setCountWidth((-1860));
      resultMatrixLatex0.getDefaultPrintColNames();
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.headerKeys();
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.doubleToString((-1222.0), 3384);
      String string0 = resultMatrixLatex0.padString("-supervised..*", 0);
      assertEquals("-supervised..*", string0);
      
      resultMatrixLatex0.LOSS_STRING = "'Oz1fPFMv";
      resultMatrixLatex0.setSignificance(0, 0, 0);
      resultMatrixLatex0.getAverage((-228));
      resultMatrixLatex0.getDisplayRow(570);
      resultMatrixLatex0.getCountWidth();
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      resultMatrixHTML0.addHeader("*", "v");
      int[][] intArray0 = new int[8][0];
      int[] intArray1 = new int[1];
      intArray1[0] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 1;
      intArray3[3] = (-2074);
      intArray3[4] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray4[2] = 2;
      intArray4[3] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      intArray5[0] = 0;
      intArray5[1] = 2;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 1;
      intArray5[5] = (-2074);
      intArray5[6] = 0;
      intArray5[7] = 0;
      intArray5[8] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      intArray6[0] = 1;
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray6[3] = (-2074);
      intArray6[4] = 190;
      intArray6[5] = 0;
      intArray6[6] = 2;
      intArray6[7] = 1;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      intArray7[0] = (-2074);
      intArray7[1] = 0;
      intArray7[2] = (-2074);
      intArray7[3] = 0;
      intArray7[4] = 0;
      intArray7[5] = 0;
      intArray7[6] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[4];
      intArray8[0] = 0;
      intArray8[1] = 1547;
      intArray8[2] = 1471;
      intArray8[3] = (-2074);
      intArray0[7] = intArray8;
      resultMatrixHTML1.m_NonSigWins = intArray0;
      resultMatrixHTML1.setCountWidth(2);
      resultMatrixHTML1.getDefaultPrintColNames();
      assertEquals(2, resultMatrixHTML1.getCountWidth());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(25, 25);
      int int0 = 0;
      resultMatrixHTML0.clear();
      resultMatrixHTML0.WIN_STRING = "0uQ3*:}V_";
      boolean boolean0 = true;
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray1[3] = 1;
      intArray1[4] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 2;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray2[7] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = 25;
      intArray3[2] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray4[3] = 2;
      intArray4[4] = 1;
      intArray0[3] = intArray4;
      int[][] intArray5 = new int[3][9];
      int[] intArray6 = new int[5];
      intArray6[0] = 25;
      intArray6[1] = 1;
      intArray6[2] = 2;
      intArray6[3] = 1;
      intArray6[4] = 1;
      intArray5[0] = intArray6;
      intArray5[1] = intArray1;
      intArray5[2] = intArray4;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setSummary(intArray0, intArray5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.meanPrecTipText();
      assertEquals("The number of decimals after the decimal point for the mean.", string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      resultMatrixLatex0.isStdDev(657);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.toStringRanking();
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-653);
      resultMatrixCSV0.m_RankingWins = intArray0;
      resultMatrixPlainText0.listOptions();
      resultMatrixPlainText0.setEnumerateRowNames(false);
      ResultMatrixPlainText resultMatrixPlainText1 = null;
      try {
        resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixCSV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8133529292743957
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 765;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      resultMatrixCSV0.m_Significance = intArray1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      resultMatrixCSV0.m_RankingWins = intArray0;
      resultMatrixCSV0.m_CountWidth = 0;
      resultMatrixCSV0.getColName(765);
      resultMatrixCSV0.WIN_STRING = "";
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.setMeanWidth(278);
      resultMatrixCSV0.getStdDev(765, 97);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.317488113536302
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      stringArray0[1] = "(";
      stringArray0[2] = " ";
      stringArray0[3] = "v";
      int[] intArray0 = new int[8];
      intArray0[0] = 279;
      intArray0[1] = 279;
      intArray0[2] = 279;
      intArray0[3] = 0;
      intArray0[4] = 279;
      intArray0[5] = 2;
      intArray0[6] = 1;
      intArray0[7] = 2;
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      resultMatrixSignificance0.setMeanWidth(279);
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance1.toStringKey();
      resultMatrixSignificance1.setPrintRowNames(false);
      resultMatrixSignificance1.setPrintRowNames(true);
      String[] stringArray1 = new String[0];
      ResultMatrixLatex.main(stringArray1);
      resultMatrixSignificance1.setCount(0, 2);
      resultMatrixSignificance1.setPrintRowNames(true);
      assertEquals(279, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.011282632922212
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "*";
      stringArray0[2] = ")";
      resultMatrixPlainText0.padString("iYsAx,", 0);
      stringArray0[3] = "v";
      stringArray0[4] = "(";
      resultMatrixPlainText0.setOptions(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixPlainText0.m_HeaderValues = vector0;
      vector0.remove((Object) "u\"P}Q(+dWShg");
      vector0.trimToSize();
      resultMatrixPlainText0.padString("u\"P}Q(+dWShg", (-1818), true);
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.toString();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.setColNameWidth((-829));
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.getMeanPrec();
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixLatex0.getDefaultShowStdDev();
      assertEquals(5, resultMatrixPlainText0.getStdDevPrec());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.toStringRanking();
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.9182496163756393
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(25, 25);
      resultMatrixHTML0.clear();
      resultMatrixHTML0.WIN_STRING = "0uQ3*:}V_";
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray1[3] = 1;
      intArray1[4] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      intArray2[1] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.setMeanWidth((-278));
      assertEquals(25, resultMatrixSignificance0.getVisibleRowCount());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*";
      stringArray0[1] = ")";
      stringArray0[2] = "(";
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance1.toStringKey();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(2, 44);
      resultMatrixSignificance2.setPrintRowNames(false);
      resultMatrixSignificance1.setPrintRowNames(false);
      ResultMatrixLatex.main(stringArray0);
      resultMatrixSignificance0.setCount(0, 0);
      resultMatrixSignificance2.setPrintRowNames(true);
      assertTrue(resultMatrixSignificance2.getEnumerateRowNames());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.174387269895635
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixSignificance0.setCountWidth(11);
      resultMatrixSignificance1.trimString(")", 3277);
      resultMatrixSignificance1.showAverageTipText();
      resultMatrixSignificance1.getEnumerateRowNames();
      resultMatrixSignificance1.doubleToString(95, 36);
      resultMatrixSignificance0.getOptions();
      resultMatrixSignificance1.meanWidthTipText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultEnumerateColNames();
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML((-16), (-4668));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.9159073749017206
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(592, 3);
      resultMatrixPlainText0.addHeader("]", "<to}7,y{q$Kfx");
      resultMatrixPlainText0.m_RowOrder = null;
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.setColOrder((int[]) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*";
      stringArray0[1] = "*";
      stringArray0[2] = "";
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixPlainText0.setRowHidden(3, true);
      resultMatrixPlainText0.getOptions();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0404387273591684
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      stringArray0[1] = "(";
      stringArray0[2] = " ";
      stringArray0[3] = "v";
      int[] intArray0 = new int[8];
      intArray0[0] = 279;
      intArray0[1] = 279;
      intArray0[2] = 279;
      intArray0[3] = 0;
      intArray0[4] = 279;
      intArray0[5] = 2;
      intArray0[6] = 1;
      intArray0[7] = 2;
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      resultMatrixSignificance0.setMeanWidth(279);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setSignificance(822, 0, (-1150));
      resultMatrixLatex0.getAverage(1079);
      resultMatrixLatex0.getDisplayRow(279);
      resultMatrixLatex0.getCountWidth();
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.9805292904360945
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.headerKeys();
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.doubleToString((-1222.0), 3384);
      resultMatrixLatex0.padString("-supervised..*", 0);
      resultMatrixLatex0.LOSS_STRING = "'Oz1fPFMv";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'Oz1fPFMv";
      stringArray0[1] = "$circ$";
      stringArray0[3] = "(";
      stringArray0[4] = "";
      stringArray0[5] = "-summary data not set-";
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.setPrintRowNames(false);
      ResultMatrixLatex.main(stringArray0);
      resultMatrixSignificance0.setCount(801, 1);
      resultMatrixSignificance0.setSignificanceWidth(2);
      resultMatrixSignificance0.setPrintRowNames(false);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.980920409722227
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[4][0];
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 1;
      intArray0[0] = intArray1;
      intArray0[1] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setSignificance(0, 3186, 1);
      resultMatrixLatex0.getAverage(363);
      resultMatrixLatex0.getDisplayRow(3381);
      resultMatrixLatex0.getCountWidth();
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7292670234547844
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.getAverage(0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.9118214049809756
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(25, 25);
      resultMatrixHTML0.clear();
      resultMatrixHTML0.WIN_STRING = "0uQ3*:}V_";
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray1[3] = 1;
      intArray1[4] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 2;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray2[7] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.setColOrder(intArray3);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      stringArray0[1] = "0uQ3*:}V_";
      stringArray0[2] = "0uQ3*:}V_";
      stringArray0[3] = ")";
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixPlainText0.setRowHidden(25, true);
  }
}
