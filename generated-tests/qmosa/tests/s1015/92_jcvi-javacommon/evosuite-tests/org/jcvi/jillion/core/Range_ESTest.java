/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:44:28 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      String string0 = "";
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-691L));
      range_Builder0.shift(0L);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-579L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.252653332309798
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.intersects(range1);
      assertNotSame(range1, range0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertTrue(range0.isEmpty());
      assertTrue(range0.equals((Object)range1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(0L);
      range_Builder0.contractEnd(1L);
      range_Builder1.shift((-2770L));
      range_Builder1.shift(0L);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1313335816367016
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of((-1505L), (-1505L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      range0.getEnd(range_CoordinateSystem0);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6635616461296423
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.ofLength(1001L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range2.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange("d|Iw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse d|Iw into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(890L);
      range_Builder0.contractEnd(0L);
      range_Builder0.expandEnd(890L);
      range_Builder0.expandBegin(1481L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1929L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.545010761758336
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = range0.asRange();
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      List<Range> list2 = range0.complementFrom(list1);
      assertEquals(0, list2.size());
      
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift((-1L));
      range_Builder1.contractBegin(1L);
      Range.CoordinateSystem.values();
      range0.asRange();
      String string0 = range0.toString();
      assertEquals("[ 1 .. 1 ]/0B", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.contractEnd(0L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(985L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4149515610048855
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      String string0 = "z.+Vr";
      Object object0 = new Object();
      Range range1 = Range.of((-32768L), 0L);
      range0.isSubRangeOf(range1);
      range0.getBegin();
      range0.getBegin();
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.parseRange("z.+Vr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse z.+Vr into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3379352076093354
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 2278L);
      String string0 = range0.toString();
      assertEquals("[ -2147483648 .. 2278 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder((-1816L), 2278L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.Comparators.values();
      Range range2 = range1.intersection(range0);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.044820482464577
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = 1957L;
      Range.of(1957L, 1957L);
      // Undeclared exception!
      try { 
        Range.parseRange("coordinateSystem can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse coordinateSystem can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0867152724480524
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2905L;
      long long1 = 3753L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2905L, 3753L);
      range_CoordinateSystem0.toString();
      Range.of(3753L);
      // Undeclared exception!
      try { 
        Range.parseRange("+'dct]3^#1'T7M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse +'dct]3^#1'T7M into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.268434871006809
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.expandEnd((-519L));
      Range range0 = Range.of((-519L));
      Range range1 = Range.of(288L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0870423502280255
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.997068727089017
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range range0 = Range.ofLength(0L);
      range0.equals(range_Builder1);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.285819949395403
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-658L), (-1L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-2096L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.084958600954189
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      range_Builder0.contractBegin(22L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1897L));
      boolean boolean0 = range1.endsBefore(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(22L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3184914725250287
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2877L);
      range1.intersects(range0);
      assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder(range1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5861333314214465
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1205L, 1205L);
      Range.Builder range_Builder1 = range_Builder0.shift(1205L);
      range_Builder0.expandBegin(824L);
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder2 = range_Builder1.shift(2078L);
      range_Builder2.contractBegin((-472L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 824L, (-9223372036854775808L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range range1 = Range.ofLength(2078L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1260L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.491386704217048
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-658L), (-1L));
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(4294967296L, long0);
      
      Range.Comparators.values();
      Range.Comparators.values();
      Range range2 = Range.of(4294967296L);
      Range range3 = range0.intersection(range2);
      assertFalse(range2.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5293372337716873
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = range0.asRange();
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      range0.complementFrom(list1);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder1.shift((-1L));
      Range.of((-1L));
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3016646551761535
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1415L), 4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-658L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -658 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.031514648030985
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967294L, 4294967295L);
      range_Builder0.expandEnd((-3529L));
      Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5407955260681114
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-658L), 288L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString();
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(4294967296L, long0);
      
      Range.Comparators.values();
      Range range2 = Range.of(4294967296L);
      Range range3 = range0.intersection(range2);
      Range range4 = Range.of((-658L), 963L);
      assertNotSame(range4, range1);
      
      range0.split(4294967295L);
      boolean boolean0 = range2.isSubRangeOf(range3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.518871354564215
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 2278L);
      String string0 = range0.toString();
      assertEquals("[ -2147483648 .. 2278 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder((-1816L), 2278L);
      range_Builder0.copy();
      range0.getEnd(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.Comparators.values();
      Range.of((-32767L));
      Range range1 = Range.of(1929L, 2919L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.6914826390662308
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.ofLength(2278L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      range0.complementFrom(list2);
      List<Range> list3 = range0.complementFrom(list0);
      assertTrue(list3.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 22L, 4095L);
      boolean boolean0 = range0.endsBefore(range2);
      assertTrue(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range2.toString(range_CoordinateSystem1);
      assertEquals("[ 23 .. 4096 ]/RB", string0);
      
      long long0 = range0.getEnd();
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.604920305852598
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 2278L);
      String string0 = range0.toString();
      assertEquals("[ -2147483648 .. 2278 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder((-1816L), 2278L);
      range_Builder0.copy();
      range0.getEnd(range_CoordinateSystem0);
      Range.Comparators.values();
      Range range1 = Range.of((-1197L));
      Range range2 = Range.of(2068L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      
      List<Range> list0 = range2.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2597460986744555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-519L));
      Range range0 = Range.of((-519L));
      Range range1 = Range.of(range_CoordinateSystem0, (-519L), (-296L));
      range0.intersects(range1);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5724292331227065
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2278L);
      String string0 = range0.toString();
      assertEquals("[ -1 .. 2277 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder((-1816L), 2278L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.Comparators.values();
      Range.Comparators.values();
      Range range1 = Range.of(2457L);
      Range.of(1L, 3547L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.828812110605311
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range.of(288L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString();
      range0.getEnd(range_CoordinateSystem0);
      Range.Comparators.values();
      Range range1 = Range.of(4294967296L);
      range1.getBegin(range_CoordinateSystem0);
      Range range2 = Range.of((-3376L));
      range1.intersection(range2);
      Range.ofLength(4294967296L);
      // Undeclared exception!
      try { 
        Range.parseRange("8k6X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 8k6X into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2826939972780647
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      range_Builder0.expandBegin((-1L));
      range_Builder0.expandBegin((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5035724620512374
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.of(1L);
      List<Range> list0 = range0.complement(range1);
      range0.getBegin();
      boolean boolean0 = range1.isSubRangeOf(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 2147483647L);
      boolean boolean1 = range2.intersects(range0);
      assertTrue(boolean1 == boolean0);
      assertSame(range0, range1);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.122018498519748
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range1 = range0.asRange();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.221916672737539
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      range1.getBegin();
      range0.isSubRangeOf(range1);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 9223372036854775724L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775724L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.5172991505538103
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.ofLength(2278L);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder((-1816L), 2278L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2277L, long0);
      
      Range.Comparators.values();
      Range.Comparators.values();
      Range range1 = Range.of(2147483647L);
      String string0 = range1.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range range2 = Range.ofLength(2277L);
      Object object0 = new Object();
      boolean boolean0 = range2.equals(object0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder(range2);
      range_Builder1.expandEnd((-307L));
      assertTrue(range2.equals((Object)range0));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem1);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4180535796891625
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of(1205L, 1205L);
      Range range1 = Range.of(4294967295L);
      range1.intersects(range0);
      Range range2 = Range.of(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3214631067247744
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(1L, 581L);
      Range range1 = Range.of((-2619L));
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range1.getBegin();
      assertFalse(range1.isEmpty());
      assertEquals((-2619L), long0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.456825157891041
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.spliterator();
      range_Builder0.expandBegin(4294967295L);
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Range range2 = range1.intersection(range0);
      range2.intersection(range1);
      range2.iterator();
      range0.complement(range1);
      String string0 = "||wGM5*?N,k(8vRh";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("must be >=0", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.775261629309834
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.44967503537723
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-691L));
      range_Builder0.shift(0L);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.ofLength(0L);
      Range range2 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      boolean boolean0 = range2.endsBefore(range1);
      assertTrue(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.491643363629648
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-1L));
      boolean boolean0 = range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("JDOB,6,67x?Y:kkFJ", range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      boolean boolean1 = range2.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.6888794541139402
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.expandEnd(255L);
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.split(21L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 21L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.equals(list0);
      range0.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.6603299628417556
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      long long0 = 21L;
      range0.split(21L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 21L);
      Range range1 = Range.of((-1L));
      Range.of((-1L));
      range1.intersection(range0);
      Range.ofLength(2352L);
      // Undeclared exception!
      try { 
        Range.parseRange("8k6X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 8k6X into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.972845711672121
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("p6Dp9?2g\"6^", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse p6Dp9?2g\"6^ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3030622530516247
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4415L);
      Range range1 = Range.of(4415L, 4415L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.asRange();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.310191837467551
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(288L, 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.asRange();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.919023506060833
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2583L);
      Range.Builder range_Builder1 = new Range.Builder(2583L);
      Range range0 = Range.of(2583L);
      range0.equals(range_Builder1);
      List<Range> list0 = range0.split(2583L);
      assertTrue(list0.contains(range0));
      
      Range.Builder range_Builder2 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2755829876634905
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.complement(range0);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.070422009571029
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      Range.Builder range_Builder1 = new Range.Builder(22L);
      long long0 = 817L;
      Range range0 = Range.ofLength(817L);
      Range range1 = Range.of(22L, 817L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 817L, 22L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(4294967295L);
      Range range0 = Range.of(1L);
      range0.equals("k");
      range0.split(4294967295L);
      Range range1 = null;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.4834870929655204
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.expandEnd(255L);
      Range range0 = range_Builder0.build();
      range0.split(21L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 21L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.split(21L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.266674357297578
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2583L);
      Range.Builder range_Builder1 = new Range.Builder(2583L, 2583L);
      Range range0 = Range.of(2583L);
      range0.equals(range_Builder1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.intersects(range0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.0325189149497596
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.asRange();
      range1.getEnd();
      Range range2 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      Long long0 = new Long(245L);
      range2.equals("p6Dp9?2g\"6^");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("p6Dp9?2g\"6^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.p6Dp9?2g\"6^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.6317146319943676
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.of((-34L), (-34L));
      Range.Builder range_Builder0 = new Range.Builder((-34L), (-34L));
      range_Builder0.expandBegin((-34L));
      Range range1 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-32768L), 1873L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range3 = Range.ofLength(2147483647L);
      range3.equals(range2);
      range2.startsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 995L, 995L);
      range1.isSubRangeOf(range4);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.8337387456310323
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = range0.asRange();
      Range range2 = range1.asRange();
      range2.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.116954888166493
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range1.forEach(consumer0);
      range1.asRange();
      Range range2 = range0.intersection(range1);
      range2.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.5
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.472899418696644
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.expandEnd(255L);
      Range range0 = range_Builder0.build();
      range0.split(21L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 21L, 21L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.equals((Object) null);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-658L), (-1L));
      Range.Comparators.values();
      Range range1 = Range.of((-128L), 850L);
      Object object0 = new Object();
      range1.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.4752722019489446
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(2924L, 9223372036854775807L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of((-2147483648L), 1134L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range3 = range0.asRange();
      assertNotSame(range3, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6916219808387587
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(255L);
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.split(21L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 21L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.equals(list0);
      assertFalse(list0.contains(range1));
      assertEquals(13, list0.size());
      
      range0.getBegin(range_CoordinateSystem0);
      Range range2 = range0.intersection(range1);
      range2.equals(range_Builder1);
      assertFalse(range2.isEmpty());
      
      range_Builder0.expandEnd(0L);
      Range range3 = Range.ofLength(3100L);
      List<Range> list1 = range3.complement(range0);
      assertEquals(1, list1.size());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.of((-1549L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1695L), 255L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range1 = range0.asRange();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("tT6#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.tT6#
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
