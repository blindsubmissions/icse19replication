/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:48:32 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      int int0 = (-62);
      xPathLexer0.colon();
      xPathLexer0.div();
      xPathLexer0.consume((-62));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DKnt*:>r]j");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("K", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      xPathLexer0.consume(1746);
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (22) (nt)", string0);
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.isIdentifierChar('q');
      xPathLexer0.comma();
      xPathLexer0.not();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.isIdentifierStartChar('(');
      xPathLexer0.equals();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.consume((-2));
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}-[)Rp");
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.XPathLexer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("y", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("=", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("^", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Z", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(";D", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("T", token5.getTokenText());
      
      xPathLexer0.setXPath("78)JFH4D6)@g/LC}J");
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("7", token6.getTokenText());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('0');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.div();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      char char0 = xPathLexer0.LA(62);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.328471881330736
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.at();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.setXPath("*cL#f");
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("L", token5.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.whitespace();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.div();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.doubleColon();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      xPathLexer0.and();
      Token token11 = xPathLexer0.whitespace();
      assertEquals((-2), token11.getTokenType());
      
      char char0 = xPathLexer0.LA(27);
      assertEquals('\uFFFF', char0);
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar(')');
      Token token14 = xPathLexer0.at();
      assertEquals(16, token14.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3314242696207523
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lsUcEgX9)");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("U", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.colon();
      assertEquals("E", token3.getTokenText());
      
      xPathLexer0.isIdentifierChar('%');
      Token token4 = xPathLexer0.nextToken();
      assertEquals("gX9", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.setXPath("10\u0004k,{");
      Token token8 = xPathLexer0.comma();
      assertEquals("1", token8.getTokenText());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      xPathLexer0.isIdentifierChar('h');
      xPathLexer0.consume();
      Token token13 = xPathLexer0.rightBracket();
      assertEquals(4, token13.getTokenType());
      
      Token token14 = xPathLexer0.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4880383153293666
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.at();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierStartChar('^');
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.consume(0);
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.nextToken();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.709472776584213
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.slashes();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.pipe();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("0", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      String string0 = token2.toString();
      assertEquals("[ (17) (E)", string0);
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("}", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals("V", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("_", token8.getTokenText());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4736702067832719
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.not();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.equals();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.consume(1223);
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1230, int0);
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      char char0 = xPathLexer0.LA(121);
      assertEquals('\uFFFF', char0);
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.plus();
      int int1 = xPathLexer0.endPosition();
      assertEquals(0, int1);
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.consume();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.016351948490226
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      String string0 = xPathLexer0.getXPath();
      assertEquals("", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2861703896509078
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")[DQ!e5VLr[3S1z`][");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.pipe();
      assertEquals(")", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("D", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("Q", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("!", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.consume(1952);
      xPathLexer0.setXPath("");
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.isIdentifierChar('e');
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.or();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(32, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.097374971525931
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(")A", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
      
      xPathLexer0.at();
      token0.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (17) ($)", string0);
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(0);
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.not();
      assertEquals("b", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.currentPosition();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("16", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("(uCoVM:#");
      Token token6 = xPathLexer1.nextToken();
      assertEquals("(", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(">", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer1.leftBracket();
      assertEquals("u", token8.getTokenText());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals("CoVM", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4751815448538177
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lsUcEgX9)");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.not();
      assertEquals("s", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("U", token2.getTokenText());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.dots();
      assertEquals("E", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("g", token4.getTokenText());
      
      xPathLexer0.isIdentifierChar('%');
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("X9", token5.getTokenText());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.setXPath("10\u0004k,{");
      Token token10 = xPathLexer0.comma();
      assertEquals("1", token10.getTokenText());
      
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("0", token11.getTokenText());
      
      Token token12 = xPathLexer0.literal();
      assertNull(token12);
      
      Token token13 = xPathLexer0.colon();
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer0.comma();
      assertEquals(32, token14.getTokenType());
      
      xPathLexer0.isIdentifierChar('h');
      xPathLexer0.consume();
      Token token15 = xPathLexer0.rightBracket();
      assertEquals(4, token15.getTokenType());
      
      Token token16 = xPathLexer0.equals();
      assertEquals(21, token16.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3296426940104096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftParen();
      xPathLexer0.or();
      String string0 = token1.toString();
      assertEquals("[ (1) (5)", string0);
      
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(3, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("!5clPn:F[Su9 WR");
      xPathLexer1.isIdentifierStartChar('O');
      xPathLexer1.getPreviousToken();
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("P", token3.getTokenText());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer1.minus();
      assertEquals("!", token5.getTokenText());
      
      xPathLexer0.equals();
      Token token6 = xPathLexer1.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.consume(0);
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals("clPn", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3253595419369752
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("78)JFH4D6)@g/LC}J");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.getXPath();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9426061863465487
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y$^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("y", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("$", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("y$^Z;DTF");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      
      xPathLexer0.notEquals();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("D", token4.getTokenText());
      
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("y[d=/~))ShgSf");
      Token token7 = xPathLexer2.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("y", token7.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('0');
      assertFalse(boolean0);
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      boolean boolean1 = xPathLexer0.isIdentifierChar('v');
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.29337194581576
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("E", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("u", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      String string0 = token3.toString();
      assertEquals("[ (17) (0)", string0);
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals(":", token5.getTokenText());
      
      xPathLexer0.setPreviousToken(token3);
      Token token6 = xPathLexer0.colon();
      assertEquals("}", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("V_", token7.getTokenText());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.508786577024463
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.isIdentifierStartChar('^');
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer("ONk/W*^A/hX(0");
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.isIdentifierStartChar('0');
      xPathLexer2.nextToken();
      xPathLexer2.isIdentifierChar('Y');
      xPathLexer0.dots();
      xPathLexer1.whitespace();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.145872602929104
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{vluE(~c|m}qJPR{/u");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer0.leftParen();
      xPathLexer1.comma();
      xPathLexer0.consume(1952);
      xPathLexer1.setXPath("-#*");
      xPathLexer1.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer1.doubleColon();
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer1.identifier();
      xPathLexer0.isIdentifierChar('p');
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.or();
      xPathLexer2.relationalOperator();
      xPathLexer0.or();
      xPathLexer1.or();
      xPathLexer1.notEquals();
      xPathLexer1.leftBracket();
      xPathLexer1.notEquals();
      xPathLexer1.mod();
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3458085124844898
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("E", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("0", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("u", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("O5o$:-+MZ<a.f#sI!");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.literal();
      Token token5 = xPathLexer2.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token6 = xPathLexer3.pipe();
      assertEquals(17, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("9@dta'(wO4");
      Token token7 = xPathLexer4.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("9@", token7.getTokenText());
      
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('&');
      assertFalse(boolean0);
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("Q3", token8.getTokenText());
      
      boolean boolean1 = xPathLexer4.isIdentifierChar('&');
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7552187843786955
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lsUcEgX9)");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.getXPath();
      xPathLexer0.isIdentifierChar('%');
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("EgX9", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.setXPath("10\u0004k,{");
      Token token8 = xPathLexer0.comma();
      assertEquals("1", token8.getTokenText());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      xPathLexer0.rightParen();
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      xPathLexer0.isIdentifierChar('h');
      xPathLexer0.consume();
      Token token13 = xPathLexer0.rightBracket();
      assertEquals(4, token13.getTokenType());
      
      Token token14 = xPathLexer0.equals();
      assertEquals(21, token14.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('z');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.194703185455704
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(")A", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      xPathLexer0.isIdentifierChar('^');
      Token token3 = xPathLexer0.at();
      assertEquals("r", token3.getTokenText());
      
      token0.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (17) ($)", string0);
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume((-7));
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.currentPosition();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("AZr", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.setPreviousToken(token5);
      xPathLexer0.getPreviousToken();
      xPathLexer0.getPreviousToken();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("!", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals("x", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals("0", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('9');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.442927064699593
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^AshXE0");
      XPathLexer xPathLexer1 = new XPathLexer("ONk/W*^AshXE0");
      xPathLexer1.or();
      Token token0 = xPathLexer1.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("O", token0.getTokenText());
      
      xPathLexer1.slashes();
      xPathLexer1.hasMoreChars();
      xPathLexer1.setXPath("E0uQ3*:}V_:");
      Token token1 = xPathLexer1.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer1.pipe();
      Token token3 = xPathLexer1.rightBracket();
      String string0 = token2.toString();
      assertEquals("[ (17) (E)", string0);
      
      Token token4 = xPathLexer1.identifier();
      assertEquals("uQ3", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.or();
      xPathLexer0.mod();
      Token token5 = xPathLexer1.at();
      assertEquals("*", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      assertEquals("0", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("E0uQ3*:}V_:");
      Token token6 = xPathLexer0.nextToken();
      assertEquals("ONk/W*^AshXE0", token6.getTokenText());
      
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("E", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals("O", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(":", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.599742990997967
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.div();
      token0.toString();
      token1.toString();
      xPathLexer0.nextToken();
      token3.toString();
      token3.toString();
      token2.toString();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.isIdentifierStartChar('^');
      Token token4 = xPathLexer0.leftBracket();
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.consume('^');
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      xPathLexer0.dots();
      Token token5 = xPathLexer0.nextToken();
      assertFalse(token5.equals((Object)token4));
  }
}
