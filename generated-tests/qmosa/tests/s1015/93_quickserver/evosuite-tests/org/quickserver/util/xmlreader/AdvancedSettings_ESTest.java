/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:34:37 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-62));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setBacklog(1746);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setQSObjectPoolMaker("lEDzewRrhV4@g$?\"Wq");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("vLGS[}UqAM>F");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>1746</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>vLGS[}UqAM>F</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>-62</performance-preferences-latency>\n\t<performance-preferences-bandwidth>-1</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize(1746);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(1424);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(1003);
      int int0 = advancedSettings0.getSocketLinger();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-317));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.toXML("1n{wV:OY!w_xJ@#Wa");
      advancedSettings0.setClientSocketSendBufferSize((-639));
      advancedSettings0.setClientSocketSendBufferSize((-639));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setMaxThreadsForNioWrite((-639));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setSocketLinger((-1490));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(809);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("$0$W6],");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketReceiveBufferSize(809);
      advancedSettings0.setSocketLinger(0);
      assertEquals(809, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setByteBufferSize(1);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("P<r:4~w#:BN]V/uv?");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // P<r:4~w#:BN]V/uv?
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("fb?>e");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setQSObjectPoolMaker("F~V#U!");
      assertEquals("fb?>e", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.173768833930095
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setPerformancePreferencesLatency(2202);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setQSObjectPoolMaker("v'Cs~xPgw%o_a");
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientSocketTrafficClass("v'Cs~xPgw%o_a");
      advancedSettings0.setSocketLinger(2202);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.toXML("v'Cs~xPgw%o_a");
      advancedSettings0.getBacklog();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getCharset();
      assertEquals(2202, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("fc,E+");
      advancedSettings0.setBacklog((-974));
      advancedSettings0.setClientSocketSendBufferSize((-974));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-280));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      int int0 = advancedSettings0.getBacklog();
      assertEquals((-280), advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6393405872324327
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.setPerformancePreferencesConnectionTime((-120));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setMaxThreadsForNioWrite(10);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-120));
      advancedSettings0.setPerformancePreferencesBandwidth((-120));
      advancedSettings0.setCharset("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.setQSObjectPoolMaker("<RpIb@b+}");
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-2426));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize(10);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("$iB8I/{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // $iB8I/{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(3009);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getCharset();
      advancedSettings0.getCharset();
      assertEquals(3009, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setBacklog((-2807));
      advancedSettings0.setPerformancePreferencesLatency(1202);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setSocketLinger(1327);
      advancedSettings0.setClientSocketReceiveBufferSize(1012);
      advancedSettings0.setClientSocketReceiveBufferSize(1898);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertEquals(1898, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0904599236161974
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("Dzl");
      advancedSettings0.setClientSocketSendBufferSize((-4122));
      advancedSettings0.toXML("^6zV T#X\">h");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-81));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger(1641);
      assertEquals(1641, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9412316867217543
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "PdDj";
      advancedSettings0.toXML("PdDj");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("hpV/Jr;<JL@z~'Z6");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("PdDj");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // PdDj
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1760828146595914
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketSendBufferSize((-1853));
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.setSocketLinger((-1853));
      advancedSettings0.setPerformancePreferencesLatency((-4150));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setClientSocketSendBufferSize(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setSocketLinger((-1853));
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings1.setSocketLinger((-4002));
      advancedSettings1.setSocketLinger(10);
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.setCharset((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(1897);
      assertEquals(1897, advancedSettings0.getPerformancePreferencesConnectionTime());
  }
}
