/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:45:49 GMT 2018
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getSocket();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg("");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getTimeoutMsg();
      theClient0.setMaxConnectionMsg("\"?");
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(3624);
      theClient0.setTimeoutMsg("H");
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeoutMsg("zrcc");
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTry();
      theClient0.setTimeout(13);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTry(13);
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTimeout(13);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient1.setClientEvent(clientEvent0);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      theClient1.setClientData((ClientData) null);
      blockingClientHandler0.toString();
      theClient1.getMaxAuthTry();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient1.setClientData((ClientData) null);
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      // Undeclared exception!
      try { 
        MockInetSocketAddress.createUnresolved((String) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.setAuthenticator((Authenticator) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient1.getClientWriteHandler();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient1.setMaxAuthTry(4447);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientEvent();
      theClient1.getSocket();
      theClient1.getClientEvent();
      TheClient theClient2 = new TheClient();
      theClient2.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      Data data0 = new Data();
      theClient1.setClientData(data0);
      theClient0.getCommunicationLogging();
      theClient1.getTrusted();
      theClient0.setTrusted(true);
      theClient1.setAuthenticator((Authenticator) null);
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.updateLastCommunicationTime();
      // Undeclared exception!
      try { 
        blockingClientHandler0.getSocketChannel();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxConnectionMsg("r;m,'$#NHE");
      theClient0.getClientCommandHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setTimeoutMsg("r;m,'$#NHE");
      TheClient theClient1 = new TheClient();
      theClient1.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient1.getMaxConnectionMsg();
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      QuickServer quickServer0 = new QuickServer("=");
      theClient0.setServer(quickServer0);
      theClient0.setTimeoutMsg("");
      theClient0.toString();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      theClient0.getClientCommandHandler();
      theClient0.setMaxAuthTry((-3844));
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxConnectionMsg("");
      assertEquals((-3844), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientCommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(4861);
      theClient0.setMaxAuthTryMsg("");
      MockSocket mockSocket0 = new MockSocket();
      blockingClientHandler0.setSocket(mockSocket0);
      blockingClientHandler0.setCommunicationLogging(true);
      Socket socket0 = blockingClientHandler0.getSocket();
      theClient0.setSocket(socket0);
      theClient0.getAuthenticator();
      theClient0.getMaxAuthTry();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getTrusted();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setSocket(socket0);
      assertEquals("<ClientHandler-Pool#4861-ID:1>", blockingClientHandler0.getName());
      
      theClient0.getTrusted();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getServer();
      assertEquals(0, theClient0.getMaxAuthTry());
  }
}
