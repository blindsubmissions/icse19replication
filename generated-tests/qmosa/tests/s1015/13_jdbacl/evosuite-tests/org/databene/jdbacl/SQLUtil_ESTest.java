/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:44:10 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.ArrayInputStream;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.field.TypeConvertionException;
import org.h2.value.ValueLobDb;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "0qA:CS=M^43", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "rename";
      SQLUtil.isDDL("rename");
      SQLUtil.isDDL("{zI,CWv&&:M>a.!7t");
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[4];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVARArray0[0] = xSQLVAR0;
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVARArray0[1] = xSQLVAR1;
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      xSQLVARArray0[2] = xSQLVAR2;
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      xSQLVARArray0[3] = xSQLVAR3;
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      FBResultSet fBResultSet0 = null;
      try {
        fBResultSet0 = new FBResultSet(xSQLVARArray0, genericDescriptorList0);
        fail("Expecting exception: TypeConvertionException");
      
      } catch(Throwable e) {
         //
         // SQL type for this field is not yet supported.
         //
         verifyException("org.firebirdsql.jdbc.field.FBField", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("0N-LaPT");
      assertNull(boolean0);
      
      VersionNumber versionNumber0 = VersionNumber.valueOf("+ytcfl-3,U_z");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("0N-LaPT", "", versionNumber0);
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("0N-LaPT", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Y3}S97]65;t44d";
      stringArray0[1] = "Y3}S97]65;t44d";
      stringArray0[2] = "Y3}S97]65;t44d";
      stringArray0[3] = "Y3}S97]65;t44d";
      stringArray0[4] = "Y3}S97]65;t44d";
      stringArray0[5] = "(";
      stringArray0[6] = "Y3}S97]65;t44d";
      SQLUtil.renderColumnListWithTableName("Y3}S97]65;t44d", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(8, "Y3}S97]65;t44d");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y3}S97]65;t44d", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", ";
      String string0 = "";
      String[] stringArray1 = new String[5];
      stringArray1[0] = ", ";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      SQLUtil.innerJoin(", ", stringArray0, "", "", stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ', ' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      String string0 = "";
      TableContainer tableContainer0 = new TableContainer("");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.326543253194114
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("0N-LaPT");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0N-LaPT";
      stringArray0[1] = "";
      stringArray0[2] = "0N-LaPT";
      stringArray0[3] = "0N-LaPT";
      String string0 = SQLUtil.renderColumnListWithTableName("0N-LaPT", stringArray0);
      assertEquals("0N-LaPT.0N-LaPT, 0N-LaPT., 0N-LaPT.0N-LaPT, 0N-LaPT.0N-LaPT", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(5, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0N-LaPT", defaultDBTable0, dBDataType0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Pu@$UOT,pLn\r'tw4N", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (0N-LaPT, , 0N-LaPT, 0N-LaPT)", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Y3}S97]65;t44d";
      stringArray0[1] = "Y3}S97]65;t44d";
      stringArray0[2] = "Y3}S97]65;t44d";
      stringArray0[3] = "Y3}S97]65;t44d";
      stringArray0[5] = "(";
      stringArray0[6] = "Y3}S97]65;t44d";
      SQLUtil.renderColumnListWithTableName("Y3}S97]65;t44d", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("create table0n-lapt");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("execute0n-lapt", stringBuilder0);
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      StringBuilder stringBuilder3 = stringBuilder2.append('<');
      stringBuilder3.appendCodePoint(72);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" on ");
      dBSchema0.getTable(" on ");
      dBSchema0.setDoc("C96kGhOt~`");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C96kGhOt~`", (DBTable) null, 2385, "C96kGhOt~`");
      defaultDBColumn0.setDefaultValue("org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " on ";
      stringArray0[1] = " on ";
      SQLUtil.renderValue(defaultDBColumn0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H0|x5Tz^h0";
      stringArray0[1] = "1o8NGhC/pxPeH^1";
      stringArray0[2] = "1o8NGhC/pxPeH^1";
      stringArray0[3] = "1o8NGhC/pxPeH^1";
      stringArray0[4] = "1o8NGhC/pxPeH^1";
      stringArray0[5] = "1o8NGhC/pxPeH^1";
      SQLUtil.leftJoin("1o8NGhC/pxPeH^1", stringArray0, "H0|x5Tz^h0", "HH", stringArray0);
      String string0 = "Hg<";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Hg<");
      DBDataType dBDataType0 = DBDataType.getInstance(2023, "");
      Integer integer0 = new Integer(2023);
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1o8NGhC/pxPeH^1", defaultDBTable0, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("1o8NGhC/pxPeH^1", stringBuilder0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("H0|x5Tz^h0", defaultDBTable0, 2023, "HH");
      SQLUtil.renderColumn(defaultDBColumn1);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "{/Bjd";
      TableContainer tableContainer0 = new TableContainer("{/Bjd");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 200;
      SQLUtil.removeComments("alter session");
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      defaultDBTable0.getUniqueConstraints(true);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H0|x5Tz^h0";
      stringArray0[1] = "1o8NGhC/pxPeH^1";
      stringArray0[2] = "1o8NGhC/pxPeH^1";
      stringArray0[3] = "1o8NGhC/pxPeH^1";
      stringArray0[4] = "1o8NGhC/pxPeH^1";
      stringArray0[5] = "1o8NGhC/pxPeH^1";
      String string0 = SQLUtil.leftJoin("1o8NGhC/pxPeH^1", stringArray0, "H0|x5Tz^h0", "HH", stringArray0);
      assertEquals("left join H0|x5Tz^h0 as HH on 1o8NGhC/pxPeH^1.H0|x5Tz^h0 = HH.H0|x5Tz^h0 and 1o8NGhC/pxPeH^1.1o8NGhC/pxPeH^1 = HH.1o8NGhC/pxPeH^1 and 1o8NGhC/pxPeH^1.1o8NGhC/pxPeH^1 = HH.1o8NGhC/pxPeH^1 and 1o8NGhC/pxPeH^1.1o8NGhC/pxPeH^1 = HH.1o8NGhC/pxPeH^1 and 1o8NGhC/pxPeH^1.1o8NGhC/pxPeH^1 = HH.1o8NGhC/pxPeH^1 and 1o8NGhC/pxPeH^1.1o8NGhC/pxPeH^1 = HH.1o8NGhC/pxPeH^1", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Hg<");
      DBDataType dBDataType0 = DBDataType.getInstance(2023, "");
      Integer integer0 = new Integer(2023);
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1o8NGhC/pxPeH^1", defaultDBTable0, dBDataType0, integer0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("K ??@0~%X_ +]", defaultDBTable0, dBDataType0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1o8NGhC/pxPeH^1", false, stringArray0);
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 1o8NGhC/pxPeH^1 PRIMARY KEY (H0|x5Tz^h0, 1o8NGhC/pxPeH^1, 1o8NGhC/pxPeH^1, 1o8NGhC/pxPeH^1, 1o8NGhC/pxPeH^1, 1o8NGhC/pxPeH^1)", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4799555205445176
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("0N-aPT");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0N-aPT";
      stringArray0[1] = "0N-aPT";
      stringArray0[2] = "}sW$4zor";
      stringArray0[3] = "0N-aPT";
      String string0 = SQLUtil.renderColumnListWithTableName("}sW$4zor", stringArray0);
      assertEquals("}sW$4zor.0N-aPT, }sW$4zor.0N-aPT, }sW$4zor.}sW$4zor, }sW$4zor.0N-aPT", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "0N-aPT");
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0N-aPT", defaultDBTable0, dBDataType0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "PRIMARY KEY ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"PRIMARY KEY \" PRIMARY KEY (0N-aPT, 0N-aPT, }sW$4zor, 0N-aPT)", string1);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("mFVB{sW Umoaor)OPX+");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("Y3}S97]65;t44d");
      VersionNumber versionNumber1 = VersionNumber.valueOf((String) null);
      VersionNumber.valueOf((String) null);
      versionNumber0.compareTo(versionNumber1);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Y3}S97]65;t44d", "", versionNumber0);
      SQLUtil.ownerDotComponent(defaultDatabase0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?Oa`/");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y3}S97]65;t44d";
      stringArray0[1] = "(";
      stringArray0[2] = "Y3}S97]65;t44d";
      stringArray0[3] = "~1";
      stringArray0[4] = "(";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string0 = "execute\\tw&ss_%a$#\\lqox2@";
      String string1 = "fhYH|t";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("(", false, defaultDBTable0, "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(538, byteArray0, (byte)0);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("5gIa`I&", false);
      StringBuilder stringBuilder0 = new StringBuilder(12);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "execute";
      SQLUtil.mutatesStructure("execute");
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("into", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Pu@$UOT,pLn\r'tw4N";
      stringArray0[1] = "Pu@$UOT,pLn\r'tw4N";
      stringArray0[2] = "into";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Pu@$UOT,pLn\r'tw4N", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("M2Q5 tlh6", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, (String) null, true, stringArray0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "PURGE_ROWS", false, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec1);
      assertEquals("CONSTRAINT PURGE_ROWS PRIMARY KEY (Pu@$UOT,pLn\r'tw4N, Pu@$UOT,pLn\r'tw4N, into)", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("0N-LaPT");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0N-LaPT";
      stringArray0[1] = "";
      stringArray0[2] = "0N-LaPT";
      stringArray0[3] = "0N-LaPT";
      String string0 = SQLUtil.renderColumnListWithTableName("0N-LaPT", stringArray0);
      assertEquals("0N-LaPT.0N-LaPT, 0N-LaPT., 0N-LaPT.0N-LaPT, 0N-LaPT.0N-LaPT", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(5, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0N-LaPT", defaultDBTable0, dBDataType0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Pu@$UOT,pLn\r'tw4N", true, stringArray0);
      Character character0 = Character.valueOf('2');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'2'", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("TN\"QyYv|B25Js5/Y");
      VersionNumber.valueOf("gxSCrziy\"7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("TN\"QyYv|B25Js5/Y", "TN\"QyYv|B25Js5/Y", versionNumber0);
      SQLUtil.removeComments("TN\"QyYv|B25Js5/Y");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("v1(5La:Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: v1(5La:Y
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.isDML("'SI#/g");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'SI#/g", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'SI#/g";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "4}Yk\"\"{", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("'SI#/g", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-168), "'SI#/g");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'SI#/g", dBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("'SI#/g", "4}Yk\"\"{", object0);
      assertEquals("'SI#/g", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName(".tableScan", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("execute0n-lapt");
      SQLUtil.addOptionalCondition(".tableScan", stringBuilder0);
      assertEquals("execute0n-lapt or .tableScan", stringBuilder0.toString());
      
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4681399390162087
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("'SI#/g");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'SI#/g", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'SI#/g";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "4}k\"\"{", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("'SI#/g", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-168), "'SI#/g");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.divideUnsigned(341, 341);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'SI#/g", dBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("'SI#/g 'SI#/G(0,0) NULL", string0);
      
      String string1 = SQLUtil.normalize("*RZ5Iv3.U", true);
      assertEquals("* RZ5Iv3.U", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("Y3}S97]65;t44d");
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.addOptionalCondition("@M;Vvw5'kt0(&XxS", stringBuilder0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "@M;Vvw5'kt0(&XxS", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("Y3}S97]65;t44d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'Y3}S97]65;t44d'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.056780764632065
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("8? DyuLm1V%F>fA");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\",Dl";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "8? DyuLm1V%F>fA";
      SQLUtil.renderColumnListWithTableName("\",Dl", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(7, "BzqZ._NH");
      SQLUtil.normalize("I,Ha@|4~QKNT2,];", true);
      StringBuilder stringBuilder0 = new StringBuilder(7);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.isDML("'SI#/g");
      DBDataType dBDataType0 = DBDataType.getInstance(1, "'SI#/g");
      Integer integer0 = new Integer((-935));
      dBDataType0.isAlpha();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType1 = DBDataType.getInstance((-937), "'SI#/g");
      defaultDBTable0.getColumns();
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType1, integer0, integer1);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("EB=4+hL7pNbUSzU`#z:", stringBuilder0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("EB=4+hL7pNbUSzU`#z:", (DBTable) null, (-937), "");
      String string0 = "/z^&tn";
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("/z^&tn", (DBTable) null, dBDataType1, integer0);
      defaultDBColumn2.toString();
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Hg<");
      DBDataType dBDataType0 = DBDataType.getInstance(2023, "");
      Integer integer0 = new Integer(2023);
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1o8NGhC/pxPeH^1", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table Hg<", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VersionNumber.valueOf("TN\"QyYv|B25Js5/Y");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "TN\"QyYv|B25Js5/Y";
      stringArray0[1] = "gxSCrziy\"7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "gxSCrziy\"7", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("PRIMARY KEY (TN\"QyYv|B25Js5/Y, gxSCrziy\"7, , , , , )", string0);
      
      String[] stringArray1 = new String[2];
      stringArray1[0] = "org.apache.derby.impl.store.raw.data.DirectActions";
      stringArray1[1] = "PURGE_ROWS";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = new DBPrimaryKeyConstraint(defaultDBTable0, "call", false, stringArray1);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("UNIQUE (TN\"QyYv|B25Js5/Y, gxSCrziy\"7, , , , , )", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("gxSCrziy\"7", dBTable0, 67, "PURGE_ROWS");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("call", defaultDBTable0, 1, "gxSCrziy\"7");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("gxSCrziy\"7, call", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VersionNumber.valueOf("TN\"QyYv|B25Js5/Y");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "TN\"QyYv|B25Js5/Y";
      stringArray0[1] = "gxSCrziy\"7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "gxSCrziy\"7", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "org.apache.derby.impl.store.raw.data.DirectActions";
      stringArray1[1] = "PURGE_ROWS";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = new DBPrimaryKeyConstraint(defaultDBTable0, "call", false, stringArray1);
      SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TableContainer tableContainer0 = new TableContainer("[SX*J)xwz", dBTable0);
      tableContainer0.getTable("null.gxSCrziy\"7");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("?NEP^5", false, (DBTable) null, stringArray1, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6885673693022827
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(538, byteArray0, (byte)0);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("- 0", false);
      StringBuilder stringBuilder0 = new StringBuilder(22);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6885673693022827
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(538, byteArray0, (byte)0);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("jdbc:postgresql://", false);
      StringBuilder stringBuilder0 = new StringBuilder(11);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "script.sql");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(3);
      StringBuilder stringBuilder2 = stringBuilder1.insert(3, 0L);
      StringBuilder stringBuilder3 = SQLUtil.addRequiredCondition("script.sql", stringBuilder2);
      stringBuilder3.append(3);
      stringBuilder1.append(true);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3306600933628872
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.isDML("'SI#/g");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)9;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(890, byteArray0, 0L);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("(\tw", false);
      StringBuilder stringBuilder0 = new StringBuilder(1684);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5735160760972797
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(538, byteArray0, (byte)0);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.slashSlashComments(true);
      SQLUtil.renderNumber(streamTokenizer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLUtil.normalize("jdbc:postgresql://", false);
      StringBuilder stringBuilder0 = new StringBuilder(9);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DBSchema dBSchema0 = new DBSchema("t,s`9A<%NeZ1FWNYL");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TIME '", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "t,s`9A<%NeZ1FWNYL", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueConstraint0.setDoc((String) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".lobs.db");
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8143075196071254
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.isDML("'SI#/g");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'SI#/g", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'SI#/g";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "4}k\"\"{", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("'SI#/g", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType.getInstance((-168), "'SI#/g");
      dBUniqueConstraint0.setDoc(" ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBUniqueIndex0.isIdentical(dBTable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'SI#/g");
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6987829895138011
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VersionNumber.valueOf("BpFpQ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "1o8NGhC/pxPeH^1", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select", true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = new DBPrimaryKeyConstraint(defaultDBTable0, "'nk&~vX-$2GRlN{#i:u", false, (String[]) null);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("CONSTRAINT 1o8NGhC/pxPeH^1 UNIQUE ()", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1699929969668565
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.isDML("'SI#/g");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'SI#/g", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'SI#/g";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "4}k\"\"{", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("'SI#/g", true, dBUniqueConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'SI#/g", false, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("4}k\"\"{", (DBSchema) null);
      defaultDBTable1.getPrimaryKeyConstraint();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("'SI#/g", true);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-4));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7721393884375285
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("0N-LaPT");
      String string0 = "";
      String string1 = "+ytcfl-3,U_z";
      SQLUtil.mutatesDataOrStructure("updatejep");
      String string2 = "GV)}nNLUVvq9I@VO6Lk";
      TableContainer tableContainer0 = new TableContainer("1N");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "TN\"QyYv|B25Js5/Y";
      VersionNumber.valueOf("TN\"QyYv|B25Js5/Y");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TN\"QyYv|B25Js5/Y";
      DBDataType dBDataType0 = DBDataType.getInstance((-1251), "\"c");
      int int0 = 209;
      Integer integer0 = new Integer(209);
      dBDataType0.isAlpha();
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = new Integer((-1251));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Vc`+7S5:MKq2ZpLN,6", defaultDBTable0, dBDataType0, integer1, integer2);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string1 = "";
      SQLUtil.addRequiredCondition("", stringBuilder0);
      dBDataType0.isAlpha();
      DBNotNullConstraint dBNotNullConstraint0 = null;
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      String string2 = "nQF(}|7)W?+DA3VJuvz";
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, (-1251), "nQF(}|7)W?+DA3VJuvz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}|7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VersionNumber.valueOf("TN\"QyYv|B25Js5/Y");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "gxSCrziy\"7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "gxSCrziy\"7", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TN\"QyYv|B25Js5/Y";
      stringArray0[1] = "gxSCrziy\"7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "gxSCrziy\"7", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBDataType.getInstance((-168), "gxSCrziy\"7");
      dBPrimaryKeyConstraint0.setDoc((String) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBUniqueIndex0.isIdentical(dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.setName("K~z& HE,4:~)n3E-^h2");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gxSCrziy\"7");
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = 'q';
      charArray0[2] = 'j';
      charArray0[3] = ',';
      mockPrintWriter0.println(charArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec1);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8989267893363286
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VersionNumber.valueOf("TN\"QyYv|B25Js5/Y");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TN\"QyYv|B25Js5/Y";
      DBDataType dBDataType0 = DBDataType.getInstance((-1251), "\"c");
      dBDataType0.isAlpha();
      Integer integer0 = new Integer((-1251));
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("\"c", stringBuilder0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "1 KH", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(defaultDBTable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("delete");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("\"cCONSTRAINT \"1 KH\" ", stringBuilder0.toString());
      
      String string0 = SQLUtil.normalize("TN\"QyYv|B25Js5/Y", false);
      assertEquals("TN \"QyYv|B25Js5/Y\"", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VersionNumber.valueOf("TN\"QyYv|B25Js5/Y");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TN\"QyYv|B25Js5/Y";
      DBDataType dBDataType0 = DBDataType.getInstance((-1251), "\"c");
      dBDataType0.isAlpha();
      Integer integer0 = new Integer((-1251));
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("\"c", stringBuilder0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "1 KH", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("9}X", false, dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(defaultDBTable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("TN\"QyYv|B25Js5/Y");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      SQLUtil.normalize("getTargetResultSet", true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"c", defaultDBTable0, (-1251), "yB;+@/tH");
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec1, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Lwc.8-,5[a");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("Lwc.8-,5[a", stringBuilder0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("9]cgl|+", defaultDBTable0, 2, "select into");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "1o8NGhC/pxPeH^1", true, "9]cgl|+");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("'f)T", defaultDBTable0, (-18), "1o8NGhC/pxPeH^1");
      defaultDBColumn0.toString();
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.constraintName(dBNotNullConstraint0);
      SQLUtil.addOptionalCondition("truncate", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = ",s'";
      SQLUtil.parseColumnTypeAndSize(",s'");
      SQLUtil.removeComments("create materialized viewcallfailed to start a browser to open the url");
      SQLUtil.mutatesDataOrStructure("create materialized viewcallfailed to start a browser to open the url");
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VersionNumber.valueOf(" (");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DBDataType dBDataType0 = DBDataType.getInstance(2149, "call");
      System.setCurrentTimeMillis(2149);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", defaultDBTable0, dBDataType0);
      genericDescriptorList0.add((Object) defaultDBColumn0);
      genericDescriptorList0.add((Object) stringBuilder0);
      genericDescriptorList0.add((Object) " (");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.StringBuilder cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.removeComments("org.apache.derby.catalog.DependableFinder");
      SQLUtil.removeComments("v0Fu_<]6U");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("3&pn2Cii/3Rs!*");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.catalog.DependableFinder";
      stringArray0[1] = "select";
      stringArray0[2] = "create materialized viewcreate materialized viewcallfailed to start a browser to open the url";
      stringArray0[3] = "v0Fu_<]6U";
      stringArray0[4] = "v0Fu_<]6U";
      stringArray0[5] = "v0Fu_<]6U";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "v0Fu_<]6U";
      stringArray1[1] = "create materialized viewcreate materialized viewcallfailed to start a browser to open the url";
      stringArray1[2] = "v0Fu_<]6U";
      stringArray1[3] = "nL";
      stringArray1[4] = "org.apache.derby.catalog.DependableFinder";
      stringArray1[5] = "nL";
      stringArray1[6] = "v0Fu_<]6U";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("nL", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (org.apache.derby.catalog.DependableFinder, select, create materialized viewcreate materialized viewcallfailed to start a browser to open the url, v0Fu_<]6U, v0Fu_<]6U, v0Fu_<]6U) REFERENCES 3&pn2Cii/3Rs!*(v0Fu_<]6U, create materialized viewcreate materialized viewcallfailed to start a browser to open the url, v0Fu_<]6U, nL, org.apache.derby.catalog.DependableFinder, nL, v0Fu_<]6U)", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VersionNumber.valueOf(" (");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DBDataType dBDataType0 = DBDataType.getInstance(2149, "call");
      System.setCurrentTimeMillis(2149);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", defaultDBTable0, dBDataType0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = " (";
      stringArray0[1] = " (";
      stringArray0[2] = " (";
      stringArray0[3] = " (";
      stringArray0[4] = "//";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      stringArray0[5] = "PRIMARY KEY ";
      stringArray0[6] = "call";
      stringArray0[7] = "PRIMARY KEY ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "PRIMARY KEY ", false, stringArray0);
      defaultDBColumn0.addUkConstraint(dBPrimaryKeyConstraint0);
      genericDescriptorList0.add((Object) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
      assertEquals("call", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("Lwc.8-,5[a", stringBuilder0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("9]cgl|+", defaultDBTable0, 2, "select into");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "1o8NGhC/pxPeH^1", true, "9]cgl|+");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      defaultDBColumn0.toString();
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.constraintName(dBNotNullConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBNotNullConstraint0, stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.addRequiredCondition("alter sessionnot", stringBuilder0);
      assertEquals("Lwc.8-,5[aCONSTRAINT 1o8NGhC/pxPeH^1  and alter sessionnot", stringBuilder0.toString());
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("select into", defaultDBTable0, 2, "pr.ssQC[<Zkg.");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("9]cgl|+ NOT NULL", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSchema dBSchema0 = new DBSchema("delete");
      dBSchema0.getTable("'8rs!_~8o},");
      DBDataType dBDataType0 = DBDataType.getInstance((-2004), "delete");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", (DBTable) null, dBDataType0, integer0, integer1);
      defaultDBColumn0.setDefaultValue("delete");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("delete DELETE(3,1) DEFAULT delete NULL", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.normalize("*/", true);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader();
      String string0 = SQLUtil.normalize("06R_=RN)5", true);
      assertEquals("06R_ = RN ) 5", string0);
      
      String string1 = SQLUtil.normalize("alter indexdc[givos\"v?:8v@", true);
      assertEquals("alter indexdc [ givos \"v?:8v@\"", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VersionNumber.valueOf((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      StringBuilder stringBuilder0 = new StringBuilder();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("get_Timestamp");
      mockPrintWriter0.write(" (");
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "get_Timestamp";
      stringArray0[2] = "get_Timestamp";
      stringArray0[3] = "-- [";
      stringArray0[4] = "-- [";
      stringArray0[5] = "-- [";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = " (";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-- [", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "get_Timestamp");
      HsqlProperties hsqlProperties0 = new HsqlProperties("get_Timestamp");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }
}
