/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:51:43 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1));
      simpleNode0.jjtGetNumChildren();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.jjtClose();
      simpleNode0.jjtClose();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      arrayList0.containsAll(set0);
      String string0 = "";
      JavaParser javaParser0 = new JavaParser("");
      JJTJavaParserState jJTJavaParserState0 = javaParser0.jjtree;
      simpleNode0.parser = javaParser0;
      simpleNode0.parent = null;
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-903));
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("3qb*sE6r^={I}wj~");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3qb*sE6r^={I}wj~";
      stringArray0[1] = "3qb*sE6r^={I}wj~";
      stringArray0[2] = "3qb*sE6r^={I}wj~";
      stringArray0[3] = "3qb*sE6r^={I}wj~";
      stringArray0[4] = "3qb*sE6r^={I}wj~";
      JavaParser.main(stringArray0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      simpleNode0.jjtClose();
      simpleNode0.parser = javaParser0;
      simpleNode0.jjtOpen();
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-2508));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1108));
      Node node0 = simpleNode0.parent;
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 0);
      Node[] nodeArray0 = new Node[9];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = null;
      nodeArray0[5] = null;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      nodeArray0[8] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.setIdentifier("");
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(1880);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1880
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      int int0 = (-1108);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1108));
      Node node0 = simpleNode0.parent;
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 0);
      Node[] nodeArray0 = new Node[9];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = null;
      nodeArray0[5] = null;
      simpleNode0.jjtGetParent();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('f');
      // Undeclared exception!
      try { 
        simpleNode0.dump("2G", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1108
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("C(iT]Z");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('&');
      simpleNode0.dump("", stringWriter1);
      Node node0 = simpleNode0.parent;
      stringWriter1.close();
      simpleNode0.jjtAddChild((Node) null, 1360);
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("");
      simpleNode0.setIdentifier("C(iT]ZCompilationUnit");
      simpleNode0.jjtGetParent();
      stringWriter0.append('&');
      simpleNode0.dump("", stringWriter1);
      simpleNode0.setIdentifier((String) null);
      simpleNode0.jjtClose();
      StringReader stringReader0 = new StringReader("{");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      simpleNode1.jjtSetParent((Node) null);
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode2.toString("");
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6245757807017087
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("C(iT]Z");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('&');
      simpleNode0.dump("", stringWriter1);
      Node node0 = simpleNode0.parent;
      stringWriter1.close();
      simpleNode0.jjtAddChild((Node) null, 1360);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      simpleNode0.jjtGetParent();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.append('&');
      simpleNode0.dump("2G", stringWriter2);
      simpleNode0.setIdentifier("");
      simpleNode0.jjtClose();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString("n");
      simpleNode0.jjtGetChild(959);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 45);
      assertEquals(1361, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 706);
      simpleNode0.jjtAddChild((Node) null, 1301);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.setIdentifier("");
      int int0 = 1321;
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(1321);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("}udb%&9");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.toString("}udb%&9CompilationUnit");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('k');
      SimpleNode simpleNode1 = new SimpleNode(1347);
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      Node node0 = simpleNode1.parent;
      simpleNode0.jjtAddChild(simpleNode1, 233);
      simpleNode1.jjtAddChild(simpleNode0, 233);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      simpleNode1.jjtGetParent();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.write("{");
      // Undeclared exception!
      try { 
        simpleNode0.dump(">=", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1347
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6245757807017087
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      String string0 = "[@sbUA@o^kT'V,2`";
      simpleNode0.toString("[@sbUA@o^kT'V,2`");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('u');
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.setIdentifier(">");
      simpleNode0.setIdentifier("<=");
      simpleNode0.jjtGetParent();
      stringWriter0.append('v');
      simpleNode0.dump("<=", stringWriter0);
      simpleNode0.setIdentifier(">");
      simpleNode0.jjtClose();
      StringReader stringReader0 = new StringReader("[@sbUA@o^kT'V,2`CompilationUnit");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, (-1910504865));
      simpleNode2.jjtSetParent(simpleNode0);
      int int0 = 0;
      SimpleNode simpleNode3 = new SimpleNode(1216);
      simpleNode1.toString("<=");
      SimpleNode simpleNode4 = new SimpleNode(javaParser0, 0);
      // Undeclared exception!
      try { 
        simpleNode4.jjtGetChild(1332);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2922907509099737
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("[@sbUA@o^kT'V,2`");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('\\');
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      String string0 = "&&";
      simpleNode0.setIdentifier("&&");
      simpleNode0.setIdentifier("&&");
      simpleNode0.jjtGetParent();
      stringWriter0.append(',');
      simpleNode0.dump("<=", stringWriter0);
      simpleNode0.setIdentifier("<=");
      simpleNode0.jjtClose();
      StringReader stringReader0 = new StringReader("RUNSIGNEDSHIFT");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, (-1910504865));
      simpleNode0.jjtSetParent(simpleNode1);
      SimpleNode simpleNode3 = new SimpleNode(1216);
      // Undeclared exception!
      try { 
        simpleNode2.toString("TypeArgument");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1910504865
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("[@sbUA@o^kT'V,2`");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(0);
      stringWriter1.append('a');
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.setIdentifier(" ");
      simpleNode0.setIdentifier("[@sbUA@o^kT'V,2`");
      simpleNode0.jjtGetParent();
      StringWriter stringWriter2 = new StringWriter(0);
      stringWriter1.append((CharSequence) " ", 0, 0);
      StringWriter stringWriter3 = stringWriter2.append('v');
      simpleNode0.dump("ImportDeclaration", stringWriter3);
      simpleNode0.setIdentifier(";");
      simpleNode0.jjtGetParent();
      simpleNode0.dump("\"return\"", stringWriter1);
      simpleNode0.dump(";", stringWriter2);
      simpleNode0.dump("ImportDeclaration", stringWriter2);
      simpleNode0.dump(";", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier> </identifier>\n  <identifier>[@sbUA@o^kT'V,2`</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2337673247041645
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("[@sbUA@o^kT'V,2`");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\\');
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.setIdentifier("<");
      simpleNode0.setIdentifier("[@sbUA@o^kT'V,2`CompilationUnit");
      simpleNode0.jjtGetParent();
      StringWriter stringWriter2 = stringWriter1.append('E');
      simpleNode0.dump("RSIGNEDSHIFT", stringWriter2);
      simpleNode0.setIdentifier("[@sbUA@o^kT'V,2`");
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.toString("[@sbUA@o^kT'V,2`CompilationUnit");
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump("ub%&9", stringWriter1);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetNumChildren();
      SimpleNode simpleNode1 = new SimpleNode(0);
      StringWriter stringWriter4 = new StringWriter();
      simpleNode1.dump("&&", stringWriter1);
      simpleNode0.dump("<", stringWriter2);
      simpleNode1.dump(">=", stringWriter0);
      simpleNode0.dump("<=", stringWriter2);
      assertEquals("\\E<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>[@sbUA@o^kT'V,2`CompilationUnit</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>[@sbUA@o^kT'V,2`CompilationUnit</identifier>\n  <identifier>[@sbUA@o^kT'V,2`</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>[@sbUA@o^kT'V,2`CompilationUnit</identifier>\n  <identifier>[@sbUA@o^kT'V,2`</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>[@sbUA@o^kT'V,2`CompilationUnit</identifier>\n  <identifier>[@sbUA@o^kT'V,2`</identifier>\n</CompilationUnit>\n", stringWriter2.toString());
      assertEquals("\\E<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>[@sbUA@o^kT'V,2`CompilationUnit</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>[@sbUA@o^kT'V,2`CompilationUnit</identifier>\n  <identifier>[@sbUA@o^kT'V,2`</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>[@sbUA@o^kT'V,2`CompilationUnit</identifier>\n  <identifier>[@sbUA@o^kT'V,2`</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>[@sbUA@o^kT'V,2`CompilationUnit</identifier>\n  <identifier>[@sbUA@o^kT'V,2`</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }
}
