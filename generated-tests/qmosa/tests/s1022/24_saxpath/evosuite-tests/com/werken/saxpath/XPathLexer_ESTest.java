/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:52:21 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) ($)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("Sq", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.consume(17);
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" Sviq");
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GQ47");
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.at();
      xPathLexer0.getPreviousToken();
      xPathLexer0.mod();
      xPathLexer0.plus();
      xPathLexer0.hasMoreChars();
      xPathLexer0.hasMoreChars();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.endPosition();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.identifier();
      xPathLexer0.endPosition();
      xPathLexer0.consume((-2941));
      assertEquals("GQ47", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0625293002546217
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierStartChar('x');
      xPathLexer0.plus();
      xPathLexer0.colon();
      xPathLexer0.literal();
      xPathLexer0.and();
      xPathLexer0.setXPath("");
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1220));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.identifier();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3782));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(7, int0);
      
      xPathLexer0.div();
      xPathLexer0.and();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      xPathLexer0.identifier();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer0.identifier();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7255503958317213
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.leftParen();
      token0.toString();
      xPathLexer0.star();
      Token token1 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.minus();
      xPathLexer0.hasMoreChars();
      xPathLexer0.getXPath();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.mod();
      assertNull(token2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9731435781878296
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.consume(35);
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.setXPath("W8${,z\"fsLHqS");
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.slashes();
      assertEquals("8", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("$", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      assertEquals("{,z\"fsLHqS", token6.getTokenText());
      
      xPathLexer0.consume(4);
      xPathLexer0.div();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("f", token7.getTokenText());
      
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("s", token8.getTokenText());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.954673212304816
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" )AfL;");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(" )", token1.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (15) ()", string0);
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("A", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("f", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("L", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals(";", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      xPathLexer0.endPosition();
      boolean boolean0 = xPathLexer0.isIdentifierChar('M');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.965015693256506
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]T<#2)Q?]R");
      xPathLexer0.identifier();
      xPathLexer0.consume(0);
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.LA(0);
      xPathLexer0.rightBracket();
      xPathLexer0.consume(0);
      assertEquals("]T<#2)Q?]R", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4886315995178379
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.getPreviousToken();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('M');
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      xPathLexer0.and();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer0.operatorName();
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.410194209368772
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("B?1oIXcxqX4qo@{Ve?S");
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.isIdentifierChar('|');
      xPathLexer0.slashes();
      xPathLexer0.consume(25);
      assertEquals("B?1oIXcxqX4qo@{Ve?S", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.838257252573675
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.operatorName();
      token0.toString();
      xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.at();
      token1.toString();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.consume();
      assertEquals("Bz^w*A_RL|/0@&|@k1", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8777721231824762
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.colon();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.hasMoreChars();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.consume(2977);
      assertEquals(") (", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1284602570444422
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) ($)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("#", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("Sq", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("[", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(".", token6.getTokenText());
      
      xPathLexer1.getPreviousToken();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("i?x", token7.getTokenText());
      
      Token token8 = xPathLexer1.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer1.star();
      Token token9 = xPathLexer1.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer1.operatorName();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      Token token10 = xPathLexer2.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals("i", token11.getTokenText());
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer0.operatorName();
      Token token13 = xPathLexer1.star();
      assertEquals(20, token13.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.409534927067813
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s+s)y\"zPj");
      Token token0 = xPathLexer0.at();
      assertEquals("s", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      xPathLexer0.setXPath("/r{");
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(11, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
  }
}
