/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:36:41 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 605);
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      Party party0 = player0.head;
      player0.prev = null;
      boolean boolean1 = player0.isDead();
      assertTrue(boolean1 == boolean0);
      
      float float0 = player0.getZ();
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-145));
      player0.setDead((-3362L));
      player0.setY(0.0F);
      player0.reset(false);
      player0.pack();
      player0.remove((Party) null);
      Player player1 = new Player(0, "vDW;0oc\"clg*", "vDW;0oc\"clg*", 4);
      player0.setJoinOK(player1, false);
      player0.getTimeOfDeath();
      player0.add((Party) null);
      player0.getTimeOfDeath();
      player0.getX();
      player0.setConnected(true);
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player();
      player0.gangStrength();
      player0.setMoney(1);
      player0.getTimeOfDeath();
      player0.getTimeOfDeath();
      Player player1 = new Player();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)0;
      player1.unpack(byteArray0);
      player0.setJoinOK(player1, false);
      player0.getIP();
      player0.reset(false);
      assertEquals(1.0F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.setConnected(true);
      player0.getName();
      player0.setZ((-993.18F));
      player0.getZ();
      player0.isConnected();
      player0.setDead((-577L));
      player0.setDead((-577L), true);
      Party party0 = new Party((short)4919);
      player0.boss = party0;
      player0.getName();
      player0.setZ((-577L));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      player0.unpack(byteArray0);
      assertEquals((-577L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-179);
      int int1 = 1369;
      Player player0 = new Player((-179), "", 1369);
      Party party0 = player0.boss;
      player0.head = null;
      player0.remove((Party) null);
      player0.setY(1369);
      player0.toString();
      player0.getIP();
      Player player1 = new Player((short)4919, (String) null, "", 1369);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1149);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(4919, ";", "module.ModuleBrowserDialog$ModuleFilter", 1);
      player0.boss = null;
      player0.reset(true);
      player0.setConnected(true);
      Player player1 = new Player((short)4919, "module.ModuleBrowserDialog$ModuleFilter", 1);
      player0.setJoinOK(player1, true);
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((-104), "Fqv\"pR", "Fqv\"pR", (-104));
      MockPrintStream mockPrintStream0 = new MockPrintStream("Fqv\"pR");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Fqv\"pR";
      PrintStream printStream0 = mockPrintStream0.printf("Fqv\"pR", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      dataOutputStream0.writeShort(0);
      player0.pack(dataOutputStream0);
      Player player1 = new Player((short)4919, "S))!0r=cdDQFMrd3}h", "", (-2011));
      player1.getSubparty();
      player0.isJoinOK(player1, false);
      assertEquals(10.0F, player1.getX(), 0.01F);
      
      player1.setX(0.0F);
      player0.setConnected(false);
      assertFalse(player0.isConnected());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(0, "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", 0);
      player0.reset(false);
      player0.gangStrength();
      player0.setZ(1940.1F);
      player0.setDead((long) 0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      player0.unpack(dataInputStream0);
      player0.setY((-457.505F));
      player0.getX();
      player0.type();
      player0.getIP();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      player0.unpack(byteArray0);
      assertTrue(player0.isDead());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      player0.add((Party) null);
      player0.boss = null;
      player0.setZ((-971.5191F));
      player0.toString();
      player0.getY();
      player0.setX(3044.2207F);
      assertEquals((-971.5191F), player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      player0.reset(false);
      player0.reset(true);
      float float0 = player0.getMoney();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(978, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "", 0, (-2787));
      byte[] byteArray0 = new byte[0];
      player0.unpack(byteArray0);
      player0.setZ(0.0F);
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
      
      int int1 = player0.gangStrength();
      int int2 = player0.getStrength();
      assertTrue(player0.isConnected());
      assertEquals("Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", player0.getIP());
      assertTrue(int2 == int1);
      assertEquals((-2787), int2);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getZ(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player(0);
      player0.reset(true);
      player0.remove((Party) null);
      Player player2 = new Player(196);
      player2.remove((Party) null);
      player1.pack();
      Player player3 = new Player(1, "Player.unpack(): *** WARNING *** data is not of proper type!", (-173));
      player3.isJoinOK(player0, false);
      Player player4 = new Player((short)4919, "", "", 0, (-934));
      player4.setDead();
      Player player5 = new Player(0, "", "", 16);
      player5.isJoinOK(player1, true);
      player3.getStrength();
      player2.getPictureId();
      player5.isJoinOK(player4, true);
      player2.getName();
      player1.getTimeOfDeath();
      player5.getZ();
      boolean boolean0 = player4.isDead();
      assertEquals(1392409281320L, player4.getTimeOfDeath());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-3753), "state.Player$JoinInfo", (-3753));
      Player player1 = new Player(16896, "state.Player$JoinInfo", 16896);
      Party party0 = new Party();
      player1.gangStrength();
      player1.pack();
      player1.gangStrength();
      player0.setDead();
      player0.isDead();
      player1.setMoney((-1490.7622F));
      player0.setJoinOK(player1, true);
      player0.setDead();
      player1.setX((-901.69F));
      player1.getIP();
      player1.getZ();
      player1.setMoney(0.0F);
      player0.setConnected(true);
      player0.isJoinOK(player1, true);
      System.setCurrentTimeMillis(16896);
      System.setCurrentTimeMillis((-3753));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7709738809556863
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((-3753), "state.Player$JoinInfo", (-3753));
      Player player1 = new Player(16896, "state.Player$JoinInfo", 16896);
      Party party0 = new Party();
      player1.gangStrength();
      player1.pack();
      player1.gangStrength();
      player0.setDead();
      player0.isDead();
      player1.setMoney((-1490.7622F));
      player0.setJoinOK(player1, true);
      player0.setDead();
      player1.setX((-901.69F));
      player1.getIP();
      player1.getZ();
      player1.setMoney(0.0F);
      player1.head = (Party) player0;
      player0.setConnected(true);
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis(16896);
      System.setCurrentTimeMillis((-3753));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      System.setCurrentTimeMillis((-2766L));
      System.setCurrentTimeMillis(1L);
      Player player0 = new Player();
      Player player1 = new Player((short)4919, "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", (short)4919);
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis((-2766L));
      Player player2 = new Player((short)4919, "module.ModuleBrowserDialog$ModuleFilter", "N", (short)4919);
      byte[] byteArray0 = new byte[0];
      Player player3 = new Player((short)4919, "state.Party", "state.Party", (short)4919);
      player1.setJoinOK(player3, false);
      player0.unpack(byteArray0);
      player1.isJoinOK(player2, true);
      player2.isJoinOK(player0, false);
      player2.setZ((short)4919);
      System.setCurrentTimeMillis(15000L);
      System.setCurrentTimeMillis((short)4919);
      player0.isJoinOK(player1, true);
      player1.isJoinOK(player2, true);
      player0.isJoinOK(player3, false);
      System.setCurrentTimeMillis(15000L);
      boolean boolean0 = player1.isJoinOK(player2, false);
      assertEquals(4919.0F, player2.getZ(), 0.01F);
      assertFalse(boolean0);
  }
}
