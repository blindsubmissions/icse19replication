/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:26:18 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DefaultCols = null;
      discretize0.getCapabilities();
      discretize0.setDesiredWeightOfInstancesPerInterval(1.0);
      try { 
        Filter.useFilter((Instances) null, discretize0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      Discretize discretize0 = new Discretize("");
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setInvertSelection(true);
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("W_,");
      int int0 = 11;
      Filter.makeCopies(discretize0, 11);
      discretize0.getCapabilities();
      discretize0.getCapabilities();
      int int1 = (-764);
      int[] intArray0 = new int[8];
      intArray0[0] = (-764);
      intArray0[1] = (-764);
      intArray0[2] = (-764);
      intArray0[3] = (-764);
      intArray0[4] = (-764);
      intArray0[5] = (-764);
      intArray0[6] = (-764);
      intArray0[7] = (-764);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getBinRangesString((-764));
      discretize0.setUseEqualFrequency(true);
      discretize0.m_DefaultCols = "weka/core/Capabilities.props";
      discretize0.setUseEqualFrequency(true);
      discretize0.makeBinaryTipText();
      discretize0.setDesiredWeightOfInstancesPerInterval((-764));
      String[] stringArray0 = new String[0];
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("9?");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "9?";
      stringArray0[1] = "9?";
      stringArray0[2] = "9?";
      stringArray0[3] = "9?";
      stringArray0[4] = "9?";
      stringArray0[5] = "9?";
      stringArray0[6] = "9?";
      stringArray0[7] = "9?";
      discretize0.setOptions(stringArray0);
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 68.768121298074;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.setBins(6);
      discretize0.globalInfo();
      assertEquals(6, discretize0.getBins());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("\", atts, 0);\n");
      discretize0.listOptions();
      discretize0.getCapabilities();
      discretize0.getAttributeIndices();
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      discretize0.getOptions();
      stringArray0[0] = "Dc1*in8@82G";
      stringArray0[1] = "^]LtC,%O_<";
      stringArray0[2] = "";
      stringArray0[3] = "$^I`X1p#LKX <";
      stringArray0[4] = "}Q";
      discretize0.getBinRangesString(17);
      stringArray0[5] = ";AZp11L|)Z[~8";
      stringArray0[6] = "M";
      stringArray0[7] = "-D";
      stringArray0[8] = "Cd:Sg]q19l$m>`KG'f|";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getMakeBinary();
      discretize0.findNumBinsTipText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      Discretize.main(stringArray0);
      discretize0.getRevision();
      discretize0.listOptions();
      discretize0.setDesiredWeightOfInstancesPerInterval(1173.5119);
      discretize0.getRevision();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1173.5119;
      doubleArray0[1] = 1173.5119;
      doubleArray0[2] = 1173.5119;
      doubleArray0[3] = 1173.5119;
      doubleArray0[4] = 1173.5119;
      doubleArray0[5] = 1173.5119;
      DenseInstance denseInstance0 = new DenseInstance(1173.5119, doubleArray0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Attribute attribute0 = new Attribute("8964", list0, (-3094));
      // Undeclared exception!
      try { 
        denseInstance0.setValue(attribute0, "relational");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value not defined for given nominal attribute!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2129.6088);
      doubleArray0[1] = (-2129.6088);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      discretize0.getCutPoints(0);
      discretize0.getMakeBinary();
      discretize0.getUseEqualFrequency();
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      Discretize discretize1 = new Discretize("G.3");
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getFindNumBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      
      Discretize.main(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      discretize0.m_IgnoreClass = false;
      discretize0.getBinRangesString((-1216));
      discretize0.getCapabilities();
      String string0 = discretize1.useEqualFrequencyTipText();
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getMakeBinary());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9481184814404857
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("zal9Jn<`qy<dJ[q:nN");
      assertFalse(discretize0.getFindNumBins());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "zal9Jn<`qy<dJ[q:nN";
      stringArray0[1] = "zal9Jn<`qy<dJ[q:nN";
      stringArray0[2] = "zal9Jn<`qy<dJ[q:nN";
      stringArray0[3] = "zal9Jn<`qy<dJ[q:nN";
      stringArray0[4] = "zal9Jn<`qy<dJ[q:nN";
      stringArray0[5] = "zal9Jn<`qy<dJ[q:nN";
      stringArray0[6] = "zal9Jn<`qy<dJ[q:nN";
      stringArray0[7] = "zal9Jn<`qy<dJ[q:nN";
      stringArray0[8] = "zal9Jn<`qy<dJ[q:nN";
      Discretize.main(stringArray0);
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      discretize0.getOptions();
      discretize0.setOutputFormat();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4260151319598084
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("zezIP<482+dM");
      discretize0.setUseEqualFrequency(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = false;
      discretize0.m_ClassIndex = (-288);
      discretize0.findNumBinsTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getBinRangesString((-2040109463));
      discretize0.binsTipText();
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-288);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(">\n", arrayList0, 79);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4036404106149494
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DenseInstance denseInstance0 = new DenseInstance(5.7, (double[]) null);
      Discretize discretize0 = new Discretize("   * @param inst\tthe instance to turn into an array\n");
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.762312432066596
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("");
      discretize0.setOutputFormat();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "    return i;\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(788);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      doubleArray0[0] = (-2129.6088);
      doubleArray0[1] = (-2129.6088);
      discretize0.m_UseEqualFrequency = true;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      discretize0.getCutPoints(0);
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 0);
      Discretize discretize1 = new Discretize();
      Discretize discretize2 = new Discretize("m*PJ9}8D");
      // Undeclared exception!
      try { 
        discretize2.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-770);
      doubleArray1[1] = (double) (-770);
      doubleArray1[2] = (double) (-770);
      doubleArray1[3] = (double) (-770);
      doubleArray1[4] = (double) (-770);
      doubleArray1[5] = (double) (-770);
      doubleArray1[6] = (double) (-770);
      doubleArray1[7] = (double) (-770);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) (-770);
      doubleArray2[1] = (double) (-770);
      doubleArray2[2] = (double) (-770);
      doubleArray2[3] = (double) (-770);
      doubleArray2[4] = (double) (-770);
      doubleArray2[5] = (double) (-770);
      doubleArray2[6] = (double) (-770);
      doubleArray2[7] = (double) (-770);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) (-770);
      doubleArray3[1] = (double) (-770);
      doubleArray3[2] = (double) (-770);
      doubleArray3[3] = (-2747.47);
      doubleArray3[4] = (double) (-770);
      doubleArray3[5] = (double) (-770);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-2942.8);
      doubleArray4[1] = (-2747.47);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) (-770);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (double) (-770);
      doubleArray6[1] = (-2942.8);
      doubleArray6[2] = (double) (-770);
      doubleArray6[3] = (-2747.47);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-2747.47);
      doubleArray6[6] = (double) (-770);
      doubleArray6[7] = 2319.6659;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 2319.6659;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-2747.47);
      doubleArray8[1] = (double) (-770);
      doubleArray8[2] = (-2747.47);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 2319.6659;
      doubleArray8[6] = (-2747.47);
      doubleArray8[7] = (double) (-770);
      doubleArray8[8] = 0.0;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-770));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -770
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("result");
      discretize0.m_IgnoreClass = true;
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.getBinRangesString(3635);
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.");
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "v$v?j.");
      Discretize discretize0 = new Discretize("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.");
      discretize0.listOptions();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }
}
