/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:12:34 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = ">,6MK*AEA(pr";
      Form form0 = new Form(">,6MK*AEA(pr");
      Any any0 = null;
      try {
        any0 = new Any(form0, ">,6MK*AEA(pr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      StringBuilder stringBuilder0 = new StringBuilder();
      Form form1 = form0.renderHint(stringBuilder0);
      // Undeclared exception!
      try { 
        form1.id("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Component component0 = null;
      Hidden hidden0 = new Hidden((Component) null, "!", "!");
      // Undeclared exception!
      try { 
        hidden0.sup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "+";
      Form form0 = new Form("+");
      Form form1 = form0.renderHint("+");
      NumberInput numberInput0 = null;
      try {
        numberInput0 = new NumberInput(form1, "+", "+", "+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize DecimalFormat with pattern '+'.
         //
         verifyException("wheel.components.NumberInput", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "[f_l/j/W_,";
      Table table0 = null;
      try {
        table0 = new Table((Component) null, "[f_l/j/W_,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "S_AON";
      Form form0 = new Form("S_AON");
      FormElement formElement0 = null;
      // Undeclared exception!
      try { 
        form0.b((Object) "S_AON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "";
      FileInput fileInput0 = new FileInput(errorPage0, "", "");
      // Undeclared exception!
      try { 
        fileInput0.textInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "RB";
      Checkbox checkbox0 = new Checkbox((Component) null, "RB", " evaluated to null. Can't build a dynamic ISelectModel");
      // Undeclared exception!
      try { 
        checkbox0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "9\"n-";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("9\"n-");
      // Undeclared exception!
      try { 
        xmlEntityRef0.submit("9\"n-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "h5";
      String string1 = "f&vr\\Qc[JH/5XdO5p=S";
      Submit submit0 = new Submit((Component) null, "h5", "f&vrQc[JH/5XdO5p=S");
      TextArea textArea0 = new TextArea((Component) null, "", "f&vrQc[JH/5XdO5p=S");
      // Undeclared exception!
      try { 
        submit0.i((Object) textArea0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      Table table0 = null;
      try {
        table0 = new Table(form0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      String string1 = "src";
      dynamicSelectModel0.value("src");
      dynamicSelectModel0.reset();
      ElExpression elExpression0 = new ElExpression("`R_5tmN4EGK@+M");
      CheckboxGroup checkboxGroup0 = null;
      try {
        checkboxGroup0 = new CheckboxGroup(xmlEntityRef0, "", "", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Component component0 = null;
      String string0 = "&!a0Q!<8UDk+%_*<Z'";
      String string1 = "I&{b+CI";
      Submit submit0 = new Submit((Component) null, "&!a0Q!<8UDk+%_*<Z'", "I&{b+CI");
      // Undeclared exception!
      try { 
        submit0.wBlock("I&{b+CI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "lwfZvC]m%A4M{jKi!w";
      Form form0 = new Form("lwfZvC]m%A4M{jKi!w");
      String string1 = ");";
      Checkbox checkbox0 = new Checkbox(form0, ");", "/GVb");
      String string2 = "";
      Submit submit0 = null;
      try {
        submit0 = new Submit(checkbox0, "lwfZvC]m%A4M{jKi!w", "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.components.Form cannot be cast to wheel.components.StandaloneComponent
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "6@*90P5QDkyV6$/q%";
      String string1 = "82QrP],1U5cp";
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, (String) null, "82QrP],1U5cp");
      Table table0 = new Table(textInput0, "9C[SAT1@\"K\u0001`J)k}");
      // Undeclared exception!
      try { 
        table0.id("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      errorPage0.noframes();
      String[] stringArray0 = new String[6];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.span((Object) stringArray0[4]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "6@*90P5QDkyV6$/q%";
      String string1 = "^282QrP],1U5cp";
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, (String) null, "^282QrP],1U5cp");
      Table table0 = new Table(textInput0, "9C[SAT1@\"K\u0001`J)k}");
      // Undeclared exception!
      try { 
        textInput0.meta();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.022808529414704
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = ">,6MK*AEA(pr";
      Form form0 = new Form(">,6MK*AEA(pr");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals(">,6MK*AEA(pr", form0.getComponentId());
      
      String string1 = null;
      String string2 = "\\LFn<0y\\'*x|PHE[Nm";
      FileInput fileInput0 = new FileInput(form0, (String) null, "LFn<0y'*x|PHE[Nm");
      assertNotNull(fileInput0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals(">,6MK*AEA(pr", form0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertNull(fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("LFn<0y'*x|PHE[Nm", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      
      // Undeclared exception!
      try { 
        fileInput0.textInput(">,6MK*AEA(pr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Form form0 = new Form("6AMl;XCq");
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      
      Checkbox checkbox0 = new Checkbox(form0, "dd", "6AMl;XCq");
      assertNotNull(checkbox0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      
      FormElement formElement0 = checkbox0.setBinding("6AMl;XCq");
      assertNotNull(formElement0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("dd", formElement0.getFormElementName());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      TextInput textInput0 = new TextInput(formElement0, "6AMl;XCq", "\")");
      assertNotNull(textInput0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("dd", formElement0.getFormElementName());
      assertEquals("\")", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("6AMl;XCq", textInput0.getFormElementName());
      
      TextInput textInput1 = (TextInput)textInput0.actionBinding("i");
      assertNotNull(textInput1);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("dd", formElement0.getFormElementName());
      assertEquals("\")", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("6AMl;XCq", textInput0.getFormElementName());
      assertFalse(textInput1._isGeneratedId());
      assertTrue(textInput1.isEmpty());
      assertTrue(textInput1.isValid());
      assertEquals("\")", textInput1.getComponentId());
      assertEquals("input", textInput1.defaultTagName());
      assertEquals("6AMl;XCq", textInput1.getFormElementName());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertSame(textInput0, textInput1);
      assertSame(textInput1, textInput0);
      
      // Undeclared exception!
      try { 
        textInput1.message("U&)DCk}{qh K-<1<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Form form0 = new Form("6AMl;XCq");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      Checkbox checkbox0 = new Checkbox(form0, "dd", "6AMl;XCq");
      assertNotNull(checkbox0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      
      FormElement formElement0 = checkbox0.setBinding("6AMl;XCq");
      assertNotNull(formElement0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("dd", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      TextInput textInput0 = new TextInput(formElement0, "6AMl;XCq", "\")");
      assertNotNull(textInput0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("dd", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("6AMl;XCq", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("\")", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      XmlEntityRef xmlEntityRef1 = (XmlEntityRef)xmlEntityRef0.attribute("dd", "\")");
      assertNotNull(xmlEntityRef1);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNull(xmlEntityRef1.defaultTagName());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef1.getComponentId());
      assertSame(xmlEntityRef0, xmlEntityRef1);
      assertSame(xmlEntityRef1, xmlEntityRef0);
      
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = null;
      try {
        label0 = new Label(textInput0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.components.Form cannot be cast to wheel.components.StandaloneComponent
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertNotNull(errorPage1);
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      Block block0 = (Block)errorPage0.style();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotSame(errorPage0, errorPage1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      ErrorPage errorPage2 = new ErrorPage();
      assertNotNull(errorPage2);
      assertFalse(errorPage2._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage2.getComponentId());
      assertFalse(errorPage2._isGeneratedId());
      assertEquals("div", errorPage2.defaultTagName());
      assertTrue(errorPage2.isPage());
      assertTrue(errorPage2.equals((Object)errorPage1));
      assertTrue(errorPage2.equals((Object)errorPage0));
      
      Label label0 = new Label(errorPage0, stringSelectModel0);
      assertNotNull(label0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(errorPage0.equals((Object)errorPage2));
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      Block block1 = (Block)label0.b();
      assertNotNull(block1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(errorPage0, errorPage2);
      assertNotSame(block1, block0);
      assertTrue(errorPage0.equals((Object)errorPage2));
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(block1.equals((Object)block0));
      
      label0.setText("p5X1u~L Z$2");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(errorPage0, errorPage2);
      assertTrue(errorPage0.equals((Object)errorPage2));
      assertTrue(errorPage0.equals((Object)errorPage1));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Block block0 = (Block)errorPage0.noframes();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_2", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      String[] stringArray0 = new String[6];
      Any any0 = (Any)errorPage0.area(stringArray0);
      assertNotNull(any0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertEquals(6, stringArray0.length);
      
      // Undeclared exception!
      try { 
        errorPage0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5927874269574187
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Block block0 = (Block)errorPage0.noframes();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_2", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "6AMl;XCq";
      stringArray0[1] = "6AMl;XCq";
      stringArray0[2] = "6AMl;XCq";
      stringArray0[3] = "6AMl;XCq";
      stringArray0[4] = "6AMl;XCq";
      stringArray0[5] = "6AMl;XCq";
      stringArray0[6] = "6AMl;XCq";
      stringArray0[7] = "6AMl;XCq";
      stringArray0[8] = "6AMl;XCq";
      // Undeclared exception!
      try { 
        errorPage0.area(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Form form0 = new Form("6AMl;XCq");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertFalse(form0._isBuilt());
      
      Checkbox checkbox0 = new Checkbox(form0, "dd", "6AMl;XCq");
      assertNotNull(checkbox0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      
      FormElement formElement0 = checkbox0.setBinding("6AMl;XCq");
      assertNotNull(formElement0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("dd", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      TextInput textInput0 = new TextInput(formElement0, "6AMl;XCq", "\")");
      assertNotNull(textInput0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("dd", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("\")", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertEquals("6AMl;XCq", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      
      TextInput textInput1 = (TextInput)textInput0.actionBinding("i");
      assertNotNull(textInput1);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("dd", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("\")", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertEquals("6AMl;XCq", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("\")", textInput1.getComponentId());
      assertEquals("input", textInput1.defaultTagName());
      assertFalse(textInput1._isGeneratedId());
      assertTrue(textInput1.isValid());
      assertTrue(textInput1.isEmpty());
      assertEquals("6AMl;XCq", textInput1.getFormElementName());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertSame(textInput0, textInput1);
      assertSame(textInput1, textInput0);
      
      // Undeclared exception!
      try { 
        textInput1.cite((Object) formElement0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.components.Form cannot be cast to wheel.components.StandaloneComponent
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Any any0 = new Any(errorPage0, "");
      assertNotNull(any0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      
      ActionExpression actionExpression0 = errorPage0.action("bdo");
      assertNotNull(actionExpression0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNull(actionExpression0.getEvent());
      assertEquals("bdo", actionExpression0.toString());
      assertEquals(3, actionExpression0.length());
      assertEquals("bdo", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("bdo", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      
      Block block0 = (Block)errorPage0.ul();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      
      Table table0 = new Table(errorPage0, "\"$");
      assertNotNull(table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("\"$", table0.getComponentId());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      String string0 = "";
      FileInput fileInput0 = new FileInput(errorPage0, "", "");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      
      Any any0 = new Any(errorPage0, "");
      assertNotNull(any0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      
      String string1 = "cannot coerce Integer to Short since the value (";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.base("cannot coerce Integer to Short since the value (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Form form0 = new Form("6AMl;XCq");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      
      Checkbox checkbox0 = new Checkbox(form0, "dd", "6AMl;XCq");
      assertNotNull(checkbox0);
      assertFalse(form0._isGeneratedId());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      
      FormElement formElement0 = checkbox0.setBinding("6AMl;XCq");
      assertNotNull(formElement0);
      assertFalse(form0._isGeneratedId());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("dd", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      TextInput textInput0 = new TextInput(formElement0, "6AMl;XCq", "\")");
      assertNotNull(textInput0);
      assertFalse(form0._isGeneratedId());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("dd", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("6AMl;XCq", textInput0.getFormElementName());
      assertEquals("\")", textInput0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      
      TextInput textInput1 = (TextInput)textInput0.actionBinding("i");
      assertNotNull(textInput1);
      assertFalse(form0._isGeneratedId());
      assertEquals("6AMl;XCq", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("dd", checkbox0.getFormElementName());
      assertEquals("6AMl;XCq", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("6AMl;XCq", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("dd", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("6AMl;XCq", textInput0.getFormElementName());
      assertEquals("\")", textInput0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput1.isValid());
      assertTrue(textInput1.isEmpty());
      assertEquals("6AMl;XCq", textInput1.getFormElementName());
      assertEquals("input", textInput1.defaultTagName());
      assertEquals("\")", textInput1.getComponentId());
      assertFalse(textInput1._isGeneratedId());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertSame(textInput0, textInput1);
      assertSame(textInput1, textInput0);
      
      String string0 = "U&)\\DCk}{qh K-<1<";
      // Undeclared exception!
      try { 
        textInput1.br();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.components.Form cannot be cast to wheel.components.StandaloneComponent
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      String string0 = "";
      FileInput fileInput0 = new FileInput(errorPage0, "", "");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("", fileInput0.getFormElementName());
      
      Block block0 = (Block)errorPage0.noframes();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_2", block0.getComponentId());
      
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        fileInput0.table();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "wheel.components.RenderableComponentConfiguration");
      assertNotNull(checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("wheel.components.RenderableComponentConfiguration", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      
      FormElement formElement0 = checkbox0.setBinding("");
      assertNotNull(formElement0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("wheel.components.RenderableComponentConfiguration", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("wheel.components.RenderableComponentConfiguration", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      TextInput textInput0 = new TextInput(errorPage0, "\")", "wheel.components.RenderableComponentConfiguration");
      assertNotNull(textInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertEquals("wheel.components.RenderableComponentConfiguration", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      assertEquals("\")", textInput0.getFormElementName());
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("\")");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("\")", xmlEntityRef0.getComponentId());
      
      // Undeclared exception!
      try { 
        formElement0.message("i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertNotNull(errorPage1);
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      TextInput textInput0 = new TextInput(errorPage0, "", "");
      assertNotNull(textInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertEquals("", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      String string0 = "i";
      TextInput textInput1 = new TextInput(textInput0, "i", "\")");
      assertNotNull(textInput1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertEquals("", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertTrue(textInput1.isEmpty());
      assertEquals("input", textInput1.defaultTagName());
      assertEquals("\")", textInput1.getComponentId());
      assertFalse(textInput1._isGeneratedId());
      assertEquals("i", textInput1.getFormElementName());
      assertTrue(textInput1.isValid());
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(textInput1.equals((Object)textInput0));
      
      String string1 = null;
      TextInput textInput2 = (TextInput)textInput1.actionBinding((String) null);
      assertNotNull(textInput2);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertEquals("", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertTrue(textInput1.isEmpty());
      assertEquals("input", textInput1.defaultTagName());
      assertEquals("\")", textInput1.getComponentId());
      assertFalse(textInput1._isGeneratedId());
      assertEquals("i", textInput1.getFormElementName());
      assertTrue(textInput1.isValid());
      assertEquals("\")", textInput2.getComponentId());
      assertEquals("input", textInput2.defaultTagName());
      assertEquals("i", textInput2.getFormElementName());
      assertFalse(textInput2._isGeneratedId());
      assertTrue(textInput2.isValid());
      assertTrue(textInput2.isEmpty());
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(textInput0, textInput1);
      assertNotSame(textInput0, textInput2);
      assertNotSame(textInput1, textInput0);
      assertSame(textInput1, textInput2);
      assertNotSame(textInput2, textInput0);
      assertSame(textInput2, textInput1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(textInput0.equals((Object)textInput1));
      assertFalse(textInput1.equals((Object)textInput0));
      assertFalse(textInput2.equals((Object)textInput0));
      
      String string2 = "Z6.AK@lM";
      String string3 = "F";
      // Undeclared exception!
      try { 
        textInput0.u();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.730113963040932
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      String string0 = "l$m>`KG'f|W8s|}/G";
      Checkbox checkbox0 = new Checkbox(errorPage0, "l$m>`KG'f|W8s|}/G", "l$m>`KG'f|W8s|}/G");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("l$m>`KG'f|W8s|}/G", checkbox0.getComponentId());
      assertEquals("l$m>`KG'f|W8s|}/G", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      
      Any any0 = (Any)errorPage0.area((String[]) null);
      assertNotNull(any0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      Select select0 = new Select(errorPage0, "l$m>`KG'f|W8s|}/G", "l$m>`KG'f|W8s|}/G", "l$m>`KG'f|W8s|}/G", stringSelectModel0, false);
      assertNotNull(select0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertTrue(select0.isEmpty());
      assertEquals("l$m>`KG'f|W8s|}/G", select0.getFormElementName());
      assertEquals("l$m>`KG'f|W8s|}/G", select0.getComponentId());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertFalse(select0._isGeneratedId());
      assertFalse(select0._isBuilt());
      
      // Undeclared exception!
      try { 
        checkbox0.span((Object) select0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "9\"n-";
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      ActionExpression actionExpression0 = errorPage0.action(",7}Fw^9uo");
      assertNotNull(actionExpression0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(9, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals(",7}Fw^9uo", actionExpression0.getActionExpression());
      assertEquals(",7}Fw^9uo", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(",7}Fw^9uo", actionExpression0.toString());
      
      ErrorPage errorPage1 = new ErrorPage();
      assertNotNull(errorPage1);
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertTrue(errorPage1.isPage());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      // Undeclared exception!
      try { 
        errorPage1.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      
      Any any0 = new Any(errorPage0, "");
      assertNotNull(any0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      
      String string0 = "cannot coerce Integer to Short since the value (";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      
      ErrorPage errorPage1 = new ErrorPage();
      assertNotNull(errorPage1);
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertNotNull(errorPage1);
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      Block block0 = (Block)errorPage0.style();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Select select0 = new Select(errorPage1, "", "", stringSelectModel0, stringBuffer0);
      assertNotNull(select0);
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertFalse(select0._isBuilt());
      assertEquals("Select_1", select0.getComponentId());
      assertEquals("", select0.getFormElementName());
      assertEquals("select", select0.defaultTagName());
      assertTrue(select0.isValid());
      assertTrue(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      TextArea textArea0 = new TextArea(block0, "", "link");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("link", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      Map<String, String> map0 = textArea0.getAttributes();
      assertNull(map0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("link", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertNotSame(errorPage0, errorPage1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      Block block1 = (Block)errorPage0.script();
      assertNotNull(block1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(block1, block0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(block1.equals((Object)block0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      assertNotNull(form0);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      
      // Undeclared exception!
      try { 
        form0.h6((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
