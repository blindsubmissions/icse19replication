/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:00:39 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote(" of ");
      jSONObject0.remove("%hVIf|SzhSi6");
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      String string0 = null;
      long long0 = 0L;
      Long long1 = new Long(0L);
      try { 
        jSONObject0.accumulate((String) null, long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float float0 = (-327.5252F);
      Float float1 = new Float((-327.5252F));
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      String string0 = "{}";
      JSONObject jSONObject1 = jSONObject0.put("{}", 518.9508);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.put("J,/Ph.9`e('Sb=@", (Object) jSONArray0);
      try { 
        jSONObject1.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = new Long((-2951L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">!^kJ`3i:T9lAk6A";
      stringArray0[1] = "xk&AuY";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6120392655696443
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(13);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      Float float0 = new Float(3525.726934349);
      Double double0 = new Double(Double.NaN);
      hashMap0.put(float0, double0);
      stringArray0[1] = "Z";
      stringArray0[2] = "] is not a Boolean.";
      jSONObject0.optBoolean("Expected a ',' or ']'");
      stringArray0[3] = "p0JV~u{VV";
      stringArray0[4] = "a>(3H]W1";
      stringArray0[5] = "4v)7wYwy@>>";
      stringArray0[6] = "`00MMvjO_a";
      stringArray0[7] = ";Az%j ";
      stringArray0[8] = "L;IoBM";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.testValidity(";Az%j ");
      jSONObject1.optBoolean("`00MMvjO_a");
      try { 
        jSONObject1.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      Byte.compare((byte)97, (byte) (-119));
      jSONObject0.isNull("(_&");
      assertEquals(1, jSONObject0.length());
      
      JSONObject.numberToString(byte0);
      JSONObject.quote("");
      JSONObject.doubleToString((byte) (-119));
      JSONObject.quote("wheel.json.JSONObject$1");
      String string0 = JSONObject.doubleToString(216);
      assertEquals("216", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 12;
      StringWriter stringWriter0 = new StringWriter(12);
      Float float0 = new Float((float) 12);
      JSONObject.numberToString(float0);
      String string0 = "";
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double((-1197.0));
      Double.sum(0.0, 0.0);
      Double.isFinite((-2514.460436234822));
      JSONObject.getNames((Object) double0);
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string0 = "] is not a JSONObject.";
      jSONObject0.optInt("] is not a JSONObject.");
      Integer integer0 = new Integer(0);
      JSONObject.valueToString(integer0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) null);
      jSONObject0.optLong("wheel.json.JSONException", (long) 0);
      jSONObject1.keys();
      jSONObject0.toString();
      int int0 = 0;
      // Undeclared exception!
      try { 
        Integer.remainderUnsigned(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float float0 = (-327.5252F);
      Float float1 = new Float((-327.5252F));
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float.sum(0.0F, (-327.5252F));
      try { 
        jSONObject0.getString("Pv2E'ThQ#f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Pv2E'ThQ#f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4981434407392586
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      byte byte1 = (byte)97;
      Byte.compare((byte)97, (byte) (-119));
      jSONObject0.isNull("(_&");
      JSONObject.numberToString(byte0);
      JSONObject.quote("");
      JSONObject.doubleToString((byte) (-119));
      Short short0 = new Short((byte)39);
      jSONObject0.putOpt("\"$c.1O[-X9i", short0);
      JSONTokener jSONTokener0 = new JSONTokener("'m P|=");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 'm P|=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(13);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      Float float0 = new Float(3525.726934349);
      Double double0 = new Double(Double.NaN);
      hashMap0.put(float0, double0);
      stringArray0[1] = "Z";
      stringArray0[2] = "] is not a Boolean.";
      jSONObject0.optBoolean("Expected a ',' or ']'");
      stringArray0[3] = "p0JV~u{VV";
      jSONObject0.optLong("wheel.json.JSONException");
      jSONObject0.remove((String) null);
      jSONObject0.optString("is");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("\b", (Collection) linkedList0);
      String string0 = "-)#>`U+F=";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.285822252581014
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      JSONObject.quote("Unclosed comment");
      jSONObject0.optInt("%|bmZP$ms4*`Z");
      jSONObject0.toString();
      // Undeclared exception!
      jSONObject0.toString(1530, (-2117));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.793794313822812
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      JSONObject.quote("Unclosed comment");
      jSONObject0.optInt("%|bmZP$ms4*`Z");
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Object) "%|bmZP$ms4*`Z");
      String string0 = "'z2mb";
      Long long0 = new Long((-487L));
      jSONObject0.append("'z2mb", long0);
      String string1 = null;
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(12);
      Double.sum(0.0, (-2252.167794836282));
      Double.isFinite((-710.25));
      JSONObject.getNames((Object) stringWriter0);
      String string0 = "";
      String string1 = "RT8u3l.~].,i";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("RT8u3l.~].,i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of RT8u3l.~].,i
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.154587744376142
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 0.0F);
      hashMap0.put(float0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.remove((Object) jSONObject0);
      Long long0 = new Long((-1L));
      JSONObject.valueToString(long0);
      hashMap0.getOrDefault(jSONObject0, jSONObject0);
      JSONObject.valueToString(hashMap0, 8, 13);
      JSONObject.doubleToString(0.0);
      jSONObject0.keys();
      jSONObject0.toString(13);
      try { 
        jSONObject0.getJSONArray(";&7Li\"+g4z OK%1i76o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";&7Li\\\"+g4z OK%1i76o\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8466796372141983
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      JSONObject.quote("Unclosed comment");
      int int0 = jSONObject0.optInt("%|bmZP$ms4*`Z");
      assertEquals(0, int0);
      
      jSONObject0.optString("%|bmZP$ms4*`Z", "Unclosed comment");
      jSONObject0.opt("Unclosed comment");
      long long0 = jSONObject0.optLong("/5e}3okJ.YevT+~7u ");
      assertEquals(0L, long0);
      
      jSONObject0.toString((-2117));
      Byte.compare((byte)97, (byte)15);
      boolean boolean0 = jSONObject0.isNull("a2H;Fk;R703/.");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
      
      Double double0 = new Double(82);
      JSONObject.numberToString(double0);
      JSONObject.quote("PJRO[O");
      JSONObject.doubleToString((-1447.539535));
      String string0 = JSONObject.quote("wheel.json.JSONObject$1");
      assertEquals("\"wheel.json.JSONObject$1\"", string0);
      
      String string1 = JSONObject.doubleToString(0);
      assertEquals("0", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4459992434823086
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      int int0 = new Byte((byte)97);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("*bpp)j7=", (Collection) linkedList0);
      jSONObject1.accumulate("] is not a JSONArray.", linkedList0);
      try { 
        jSONObject0.getJSONObject("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": java.lang.Double@0000000003}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6578198452576887
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      double double0 = jSONObject0.optDouble("Ih?`q", (double) (-821));
      assertEquals((-821.0), double0, 0.01);
      
      boolean boolean0 = jSONObject0.optBoolean("/W_,B?i~I:-MW8${,z");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6935851881355022
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(13);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      Float float0 = new Float(3525.726934349);
      Double double0 = new Double(Double.NaN);
      hashMap0.put(float0, double0);
      stringArray0[1] = "Z";
      stringArray0[2] = "";
      jSONObject0.optBoolean("Expected a ',' or ']'");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.testValidity(jSONObject1);
      jSONObject0.optBoolean("Z");
      try { 
        jSONObject0.getJSONArray("A1 `'ski<ljrq9;O7L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A1 `'ski<ljrq9;O7L\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.395763232005655
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      jSONObject0.put("Expected '", true);
      jSONObject0.optString("Z4 ");
      jSONObject0.optLong("Z4 ");
      jSONObject0.toString(111);
      Byte byte0 = new Byte((byte) (-109));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = null;
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7458535301741085
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = "53N/{T[";
      JSONObject jSONObject1 = jSONObject0.put("53N/{T[", (-1913.632));
      jSONObject1.toString((-821));
      jSONObject0.optString("53N/{T[", "53N/{T[");
      jSONObject0.opt(",2fHJL;.]tm*PJ9");
      jSONObject0.optLong((String) null);
      jSONObject0.toString((-821));
      Byte byte0 = new Byte((byte)1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = jSONObject1.put("|f}%!.^JO ", (Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.accumulate("o%,g eOJ=9n\"", "java.lang.Double@0000000003");
      try { 
        jSONObject3.getJSONObject("{\n\"java.lang.String@0000000002\": java.lang.Double@0000000003,\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\"\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000002\\\": java.lang.Double@0000000003,\\n\\\"java.lang.String@0000000004\\\": \\\"java.lang.Class@0000000005\\\"\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optDouble("] is not a JSONArray.", (-2064.666));
      jSONObject0.optBoolean("] is not a JSONArray.");
      jSONObject0.put("wheel.json.JSONException", (int) (byte)44);
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener("istoUnsignedLong");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of istoUnsignedLong
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      long long0 = 0L;
      Long long1 = new Long(0L);
      String string0 = "] is not a JSONArray.";
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      jSONObject0.optJSONArray("] is not a JSONArray.");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      float float0 = (-2236.0F);
      Float float1 = new Float((float) 0L);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3265432531941137
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(13);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      Float float0 = new Float(3525.726934349);
      Double double0 = new Double(Double.NaN);
      hashMap0.put(float0, double0);
      stringArray0[1] = "Z";
      stringArray0[2] = "";
      jSONObject0.optDouble("", Double.NaN);
      jSONObject0.optLong("");
      jSONObject0.optJSONObject("Z");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      linkedList1.add((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Collection) linkedList1);
      Float float1 = new Float((float) 0L);
      try { 
        jSONObject1.append((String) null, float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8742573752210026
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optDouble("Ih?`q", (double) (-821));
      Integer.remainderUnsigned((-821), (-821));
      StringWriter stringWriter0 = new StringWriter(1782);
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("Ih?`q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Ih?`q
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
