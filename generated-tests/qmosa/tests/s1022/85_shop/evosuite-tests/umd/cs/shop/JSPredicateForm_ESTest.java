/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:55:23 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("\nDDRe?5F\"");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(32);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm1.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      int int0 = 0;
      int int1 = 0;
      jSPredicateForm0.subList(0, 0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      jSPredicateForm0.print();
      jSPredicateForm0.print();
      JSJshopVars.verticalL = 4441;
      jSPredicateForm0.ensureCapacity(96);
      JSJshopVars.rightBrac = 4441;
      JSJshopVars.leftPar = 96;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(32);
      jSTerm0.ensureCapacity(32);
      jSTerm0.parallelStream();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      Object object0 = new Object();
      jSTerm1.addElement(object0);
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-1));
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm3.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSPredicateForm1.matches(jSPredicateForm2, jSSubstitution1);
      assertFalse(jSSubstitution2.fail());
      
      jSTerm0.trimToSize();
      jSTerm0.equals(jSPredicateForm0);
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm4 = jSTerm0.standarizerPredicateForm();
      assertNotSame(jSPredicateForm4, jSPredicateForm1);
      
      boolean boolean1 = jSPredicateForm2.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-1));
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-1));
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm0.clonePF();
      jSPredicateForm1.print();
      jSPredicateForm0.toStr();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      jSPredicateForm0.print();
      jSPredicateForm0.equals((JSPredicateForm) null);
      StringReader stringReader0 = new StringReader(",9f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9'sF*,YZ_Uw`/Q<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-2));
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      jSPredicateForm2.add((Object) stringReader0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) "9'sF*,YZ_Uw`/Q<";
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = (Object) "9'sF*,YZ_Uw`/Q<";
      objectArray0[7] = (Object) jSPredicateForm2;
      objectArray0[8] = (Object) jSPredicateForm1;
      jSTerm0.toArray(objectArray0);
      jSPredicateForm1.print();
      // Undeclared exception!
      try { 
        jSPredicateForm2.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8746407405357517
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Iu; IGT<T}?S[o#+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm1.print();
      Object[] objectArray0 = new Object[0];
      jSTerm0.toArray(objectArray0);
      jSPredicateForm0.toStr();
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      jSPredicateForm3.stream();
      jSPredicateForm2.print();
      StringBuffer stringBuffer0 = jSPredicateForm2.toStr();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.equals(jSPredicateForm0);
      System.setCurrentTimeMillis(32);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      System.setCurrentTimeMillis((-1L));
      StringBuffer stringBuffer1 = jSTerm2.toStr();
      assertNotSame(stringBuffer1, stringBuffer0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9845459159938437
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Iu; IGT<T}?S[o#+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm0.print();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm1;
      objectArray0[2] = (Object) streamTokenizer0;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) streamTokenizer0;
      objectArray1[1] = (Object) "Iu; IGT<T}?S[o#+";
      jSTerm0.toArray(objectArray1);
      jSPredicateForm1.toStr();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.removeAllElements();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm3.addAll((Collection) jSTerm0);
      jSSubstitution0.remove(objectArray0[1]);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSPredicateForm2, jSSubstitution0);
      jSTerm1.print();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm0.matches(jSPredicateForm4, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm3.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.957649402704842
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Iu; IGT<T}?S[o#+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      stringReader0.skip((-70L));
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertEquals("[Iu;, [%%%]]", jSPredicateForm0.toString());
      
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      jSPredicateForm1.print();
      jSTerm0.toStr();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) streamTokenizer0;
      jSTerm0.toArray(objectArray0);
      jSPredicateForm1.toStr();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.removeAllElements();
      jSPredicateForm1.print();
      JSPredicateForm jSPredicateForm3 = jSTerm1.standarizerPredicateForm();
      jSPredicateForm0.addAll((Collection) jSSubstitution0);
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm2, jSSubstitution0);
      jSPredicateForm2.print();
      jSTerm0.matches(jSPredicateForm3, jSSubstitution1);
      assertEquals("[Iu;, [%%%]]", jSPredicateForm2.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9710906449455452
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Iu; IGT<T}?S[o#+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      stringReader0.skip((-70L));
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm1.print();
      jSTerm0.toStr();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) streamTokenizer0;
      jSPredicateForm1.toStr();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.removeAllElements();
      jSPredicateForm1.print();
      jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.addAll((Collection) jSSubstitution0);
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.print();
      jSTerm0.matches(jSPredicateForm2, jSSubstitution0);
      jSPredicateForm2.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      jSTerm0.print();
      assertFalse(jSTerm0.isVariable());
  }
}
