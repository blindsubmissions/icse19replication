/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:55:42 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.net.URI;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.jdbc.JdbcSQLException;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("org.apache.derby.iapi.sql.dictionary.SequenceDescriptor");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.derby.iapi.sql.dictionary.SequenceDescriptor";
      stringArray0[1] = "org.apache.derby.iapi.sql.dictionary.SequenceDescriptor";
      stringArray0[2] = "org.apache.derby.iapi.sql.dictionary.SequenceDescriptor";
      stringArray0[3] = "org.apache.derby.iapi.sql.dictionary.SequenceDescriptor";
      stringArray0[4] = "org.apache.derby.iapi.sql.dictionary.SequenceDescriptor";
      stringArray0[5] = "'kcsdfCy{mY'MN";
      stringArray0[6] = "org.apache.derby.iapi.sql.dictionary.SequenceDescriptor";
      String string0 = SQLUtil.join("org.apache.derby.iapi.sql.dictionary.SequenceDescriptor", "org.apache.derby.iapi.sql.dictionary.SequenceDescriptor", stringArray0, "org.apache.derby.iapi.sql.dictionary.SequenceDescriptor", "org.apache.derby.iapi.sql.dictionary.SequenceDescriptor", stringArray0);
      SQLUtil.parseColumnTypeAndSize("1i8X^7");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "'kcsdfCy{mY'MN";
      stringArray1[1] = "org.apache.derby.iapi.sql.dictionary.SequenceDescriptor";
      String string1 = SQLUtil.innerJoin(string0, stringArray1, "L018", "'kcsdfCy{mY'MN", stringArray1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("uY-}+C~_", "BLOB", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("uY-}+C~_", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("BLOB", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("BLOB", dBSchema0);
      SQLUtil.ownerDotComponent(dBPackage0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "BLOB";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) defaultDatabase0;
      objectArray0[6] = (Object) dBCatalog0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) dBSchema0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Object@16a5895";
      stringArray0[1] = "java.lang.Object@16a5895";
      stringArray0[2] = "java.lang.Object@16a5895";
      SQLUtil.join("java.lang.Object@16a5895", "java.lang.Object@16a5895", stringArray0, "5DhmjWORSfIvCrJ", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("java.lang.Object@16a5895");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("V6VT2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "J[f_l/j/W_,B?i~";
      stringArray0[1] = "J[f_l/j/W_,B?i~";
      stringArray0[2] = "J[f_l/j/W_,B?i~";
      stringArray0[3] = "J[f_l/j/W_,B?i~";
      stringArray0[4] = "#/VQg/[iV`0R(";
      SQLUtil.renderColumnListWithTableName("J[f_l/j/W_,B?i~", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "J[f_l/j/W_,B?i~";
      stringArray1[1] = "(J[f_l/j/W_,B?i~, J[f_l/j/W_,B?i~, J[f_l/j/W_,B?i~, J[f_l/j/W_,B?i~, #/VQg/[iV`0R()";
      stringArray1[2] = "#/VQg/[iV`0R(";
      stringArray1[3] = "J[f_l/j/W_,B?i~";
      stringArray1[4] = "J[f_l/j/W_,B?i~.J[f_l/j/W_,B?i~, J[f_l/j/W_,B?i~.J[f_l/j/W_,B?i~, J[f_l/j/W_,B?i~.J[f_l/j/W_,B?i~, J[f_l/j/W_,B?i~.J[f_l/j/W_,B?i~, J[f_l/j/W_,B?i~.#/VQg/[iV`0R(";
      stringArray1[5] = "J[f_l/j/W_,B?i~";
      stringArray1[6] = "(J[f_l/j/W_,B?i~, J[f_l/j/W_,B?i~, J[f_l/j/W_,B?i~, J[f_l/j/W_,B?i~, #/VQg/[iV`0R()";
      stringArray1[7] = "_a$";
      stringArray1[8] = "J[f_l/j/W_,B?i~";
      defaultDBTable0.getUniqueConstraint(stringArray1);
      SQLUtil.substituteMarkers("5#T&;!Z>g?Wi^6%", "J[f_l/j/W_,B?i~", (Object) null);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("#/VQg/[iV`0R(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.removeComments("update");
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("update", true);
      assertEquals("update", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = " or ";
      StringBuilder stringBuilder0 = new StringBuilder(" or ");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(4, (float) 4);
      StringBuilder stringBuilder3 = stringBuilder2.insert(1, 1082L);
      stringBuilder1.append(4);
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, (-176.0));
      SQLUtil.addRequiredCondition("G7NcpYc|k;[j;O D5!", stringBuilder4);
      String string1 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("T=%Ts)a2H");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T=%Ts)a2H", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T=%Ts)a2H";
      stringArray0[1] = "T=%Ts)a2H";
      stringArray0[2] = "T=%Ts)a2H";
      stringArray0[3] = "T=%Ts)a2H";
      stringArray0[4] = "T=%Ts)a2H";
      stringArray0[5] = "T=%Ts)a2H";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("T=%Ts)a2H", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (T=%Ts)a2H, T=%Ts)a2H, T=%Ts)a2H, T=%Ts)a2H, T=%Ts)a2H, T=%Ts)a2H) REFERENCES T=%Ts)a2H(T=%Ts)a2H, T=%Ts)a2H, T=%Ts)a2H, T=%Ts)a2H, T=%Ts)a2H, T=%Ts)a2H)", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.isProcedureCall("");
      String string0 = "5owrz-I";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5owrz-I", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = "rename";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rename");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("rename", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("", (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.substituteMarkers("", "", "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "''";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "9qmV.8fp|=wOEVY/", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      dBUniqueIndex0.setName("9qmV.8fp|=wOEVY/");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "''", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      // Undeclared exception!
      try { 
        stringBuilder0.replace(188, 1238, "xu,H<YF!BJ'*kaQih");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5owrz-I", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rename");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      Character character0 = new Character('?');
      SQLUtil.substituteMarkers("3}?;", "*/", character0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("updateDate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5660857389596289
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.normalize("org.firebirdsql.jdbc.FBClob", true);
      SQLUtil.parseColumnTypeAndSize("execute");
      SQLUtil.join("OiF^d_", "drop table", stringArray0, "drop materialized vieworg.apache.derby.iapi.sql.dictionary.sequencedescriptor", "execute", stringArray0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      String string0 = "(;^qTi";
      try { 
        simpleResultSet0.getCharacterStream("(;^qTi");
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Feature not supported: null [50100-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      SQLUtil.isProcedureCall("");
      String string1 = "5owrz-I";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5owrz-I", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = "rename";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rename");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("rename", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.derby.iapi.s");
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("oif^d_", "BLOB", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("oif^d_", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("BLOB", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("BLOB", dBSchema0);
      SQLUtil.removeComments("oif^d_");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "oif^d_";
      SQLUtil.isDML("oif^d_");
      String string0 = " not found in result set.";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "oif^d_");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(" not found in result set.", stringBuilder0);
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'a';
      charArray0[2] = 'X';
      charArray0[3] = 'w';
      charArray0[4] = 'y';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1024), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1024
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]z`4";
      stringArray0[1] = "]z`4";
      stringArray0[2] = "]z`4";
      stringArray0[3] = ". Please report this to the driver developers.";
      stringArray0[4] = "]z`4";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("]z`4 = ']z`4' AND ]z`4 = ']z`4' AND ]z`4 = ']z`4' AND . Please report this to the driver developers. = '. Please report this to the driver developers.' AND ]z`4 = ']z`4'", string0);
      
      DBSchema dBSchema0 = new DBSchema((String) null, (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]z`4", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ". Please report this to the driver developers.", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NU_M[{]b/P&", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.getOwner();
      dBForeignKeyConstraint0.isIdentical((DBObject) null);
      String string1 = SQLUtil.typeAndName(dBSchema0);
      assertNotNull(string1);
      assertEquals("schema null", string1);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getPrimaryKeyConstraint();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable1, "org.apache.derby.iapi.sql.dictionary.sequencedescriptor", false, stringArray0);
      dBPrimaryKeyConstraint1.setName("4A(; z]US6&q2H");
      dBPrimaryKeyConstraint1.addColumnName("");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \". Please report this to the driver developers.\" PRIMARY KEY (]z`4, ]z`4, ]z`4, . Please report this to the driver developers., ]z`4)", string2);
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT NU_M[{]b/P& ", stringBuilder0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6a}5Y2'wnBU\"7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.ap", false, stringArray0);
      defaultDBTable0.getCheckConstraints();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-47);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      DBDataType dBDataType0 = DBDataType.getInstance(322, "ISO8859_7");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("uY-}+C~_", "BLOB", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("uY-}+C~_", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("BLOB", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("BLOB", dBSchema0);
      SQLUtil.ownerDotComponent(dBPackage0);
      DBDataType dBDataType0 = DBDataType.getInstance((-7), "c^}F2Od");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer((-7));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c^}F2Od", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.removeComments("ZaaDljl.tO$^");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("T=%Ts)a2H");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T=%Ts)a2H", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T=%Ts)a2H";
      stringArray0[1] = "T=%Ts)a2H";
      stringArray0[2] = "T=%Ts)a2H";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-47);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte) (-47), "T=%Ts)a2H");
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("UNIQUE (T=%Ts)a2H, T=%Ts)a2H, T=%Ts)a2H, , , )", "T=%Ts)a2H", versionNumber0);
      defaultDatabase0.getTable((String) null, false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "create unique indexexecutef(s{qbu`";
      SQLUtil.mutatesDataOrStructure("create unique indexexecutef(s{qbu`");
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder("create unique indexexecutef(s{qbu`");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("?sQ^", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(2628, (CharSequence) stringBuilder0, 2628, 2628);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 2628
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("uY-}+C~_", "BLOB", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("uY-}+C~_", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("BLOB", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("BLOB", dBSchema0);
      SQLUtil.ownerDotComponent(dBPackage0);
      DBDataType dBDataType0 = DBDataType.getInstance((-7), "BLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer((-7));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB.BLOB", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.removeComments("ZaaDljl.tO$^");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.derby.iapi.s");
      VersionNumber.valueOf("");
      String[] stringArray0 = new String[1];
      boolean boolean0 = SQLUtil.isDML("oif^d_");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'a';
      charArray0[2] = 'X';
      charArray0[3] = 'w';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charArray0[4] = 'y';
      jdbcClob jdbcClob0 = new jdbcClob("S=}MOEF,0,}Rwr");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8848713335781606
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      SQLUtil.isProcedureCall("");
      String string1 = "5owrz-I";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5owrz-I", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = "rename";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rename");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("rename", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6a}5Y2'wnBU\"7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.ap", false, stringArray0);
      defaultDBTable0.getCheckConstraints();
      String string0 = SQLUtil.join("6a}5Y2'wnBU\"7", "\u0001\u00EF", stringArray0, "b-F^RFQ/7", "\u0001\u00EF", stringArray0);
      assertEquals("6a}5Y2'wnBU\"7 join b-F^RFQ/7 as \u0001\u00EF on \u0001\u00EF.6a}5Y2'wnBU\"7 = \u0001\u00EF.6a}5Y2'wnBU\"7", string0);
      
      SQLUtil.parseColumnTypeAndSize("drop materialized view5owrz-i");
      DBDataType dBDataType0 = DBDataType.getInstance(236, "b-F^RFQ/7");
      DBCatalog dBCatalog0 = new DBCatalog("", (Database) null);
      dBCatalog0.getTable("A7u*!n{'Gp", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0);
      String string1 = SQLUtil.normalize("6a}5Y2'wnBU\"7", false);
      assertEquals("6a } 5Y2 'wnBU\"7'", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9386501784906182
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]z`4";
      stringArray0[2] = "]z`4";
      stringArray0[3] = ". Please report this to the driver developers.";
      stringArray0[4] = "]z`4";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("]z`4 = ']z`4' AND null = null AND ]z`4 = ']z`4' AND . Please report this to the driver developers. = '. Please report this to the driver developers.' AND ]z`4 = ']z`4'", string0);
      
      DBSchema dBSchema0 = new DBSchema(". Please report this to the driver developers.", (DBCatalog) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = SQLUtil.normalize("=\"", true);
      assertEquals("= \"\"", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.ap");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "6a}5Y2'wnBU\"7";
      stringArray0[1] = "z.[%a7";
      stringArray0[2] = "6a}5Y2'wnBU\"7";
      stringArray0[3] = "*/";
      stringArray0[4] = "]z`4";
      stringArray0[5] = "]z`4";
      stringArray0[6] = "org.ap";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "- ", false, stringArray0);
      defaultDBTable0.getCheckConstraints();
      SQLUtil.join("z.[%a7", "*/", stringArray0, "]*Y", " ADD ", stringArray0);
      SQLUtil.parseColumnTypeAndSize("0:^gz+/f*zRF]");
      DBDataType dBDataType0 = DBDataType.getInstance(236, "- ");
      DBCatalog dBCatalog0 = new DBCatalog("6a}5Y2'wnBU\"7", (Database) null);
      dBCatalog0.getTable("drop materialized view5owrz-i", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]z`4", (DBTable) null, dBDataType0);
      boolean boolean0 = false;
      SQLUtil.normalize("`/B}?oXFc6)2GfPLD#", false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      URI uRI0 = MockURI.create("*/");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5193826646423012
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]z`4";
      stringArray0[1] = "]z`4";
      stringArray0[2] = "]z`4";
      stringArray0[3] = ". Please report this to the driver developers.";
      stringArray0[4] = "]z`4";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBSchema dBSchema0 = new DBSchema((String) null, (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]z`4", dBSchema0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = null;
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "zk8w");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.min((-1936), 34);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("null ZK8W NULL", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn1.toString();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Id2Q(jamOc49Eux2";
      stringArray0[1] = "Id2Q(jamOc49Eux2";
      stringArray0[2] = "Id2Q(jamOc49Eux2";
      stringArray0[3] = "Id2Q(jamOc49Eux2";
      stringArray0[4] = "Id2Q(jamOc49Eux2";
      stringArray0[5] = "Id2Q(jamOc49Eux2";
      String string0 = "create table ";
      SQLUtil.innerJoin("Id2Q(jamOc49Eux2", stringArray0, "Id2Q(jamOc49Eux2", "create table ", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.iapi.", defaultDBTable0, 1241, "n(}3bO@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: n(}3bO@
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9943536917623688
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.normalize("update", true);
      SQLUtil.isQuery("update");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "updateorg.apache.derby.iapi.sql.dictionary.sequencedescriptor";
      stringArray0[1] = "select intoorg.apache.derby.iapi.sql.dictionary.sequencedescriptor";
      stringArray0[2] = "update";
      SQLUtil.join((String) null, "select intoorg.apache.derby.iapi.sql.dictionary.sequencedescriptor", stringArray0, "update", "update", stringArray0);
      System.setCurrentTimeMillis(1367L);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("org.apache.derby.iapi.s");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("p- ", "SCROLL", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("org.apache.derby.iapi.s", defaultDatabase0);
      String string0 = "W>>/wMh]V|S3<I,";
      DBSchema dBSchema0 = new DBSchema("W>>/wMh]V|S3<I,", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("SequenceGeneratorCache", dBSchema0);
      TableContainer tableContainer0 = new TableContainer("USERNAME");
      tableContainer0.getTable((String) null);
      int int0 = 3192;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SequenceGeneratorCache", (DBTable) null, 3192, "SCROLL");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "W>>/wMh]V|S3<I,";
      stringArray0[1] = "SequenceGeneratorCache, SequenceGeneratorCache, SequenceGeneratorCache, SequenceGeneratorCache, SequenceGeneratorCache, SequenceGeneratorCache, SequenceGeneratorCache";
      stringArray0[2] = "SequenceGeneratorCache, SequenceGeneratorCache, SequenceGeneratorCache, SequenceGeneratorCache, SequenceGeneratorCache, SequenceGeneratorCache, SequenceGeneratorCache";
      stringArray0[3] = "USERNAME";
      stringArray0[4] = "SCROLL";
      stringArray0[5] = "p- ";
      stringArray0[6] = "F%M";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "F%M");
      int int1 = 158;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(158);
      // Undeclared exception!
      try { 
        stringBuilder1.append((char[]) null, 158, 3192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1658035966396987
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create unique indexexecutef(s{qbu`");
      SQLUtil.normalize("3*\"+] ABQ]?9lJ.H%m=", true);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5owrz-I");
      defaultDBTable0.getUniqueConstraints(true);
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5owrz-I", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      dBForeignKeyConstraint0.setOwner(compositeDBObject0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT 5owrz-I ", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("5owrz-I", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5691529462031188
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6a}5Y2'wnBU\"7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.ap", false, stringArray0);
      defaultDBTable0.getCheckConstraints();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "updateorg.apache.derby.iapi.sql.dictionary.sequencedescriptor";
      stringArray1[1] = "select intoorg.apache.derby.iapi.sql.dictionary.sequencedescriptor";
      String string0 = SQLUtil.join("FOv'}\"7Da", "org.apache.derby.impl.sql.compile.UntypedNullConstantNode", stringArray0, "org.ap", "org.ap", stringArray1);
      assertEquals("FOv'}\"7Da join org.ap as org.ap on org.apache.derby.impl.sql.compile.UntypedNullConstantNode.6a}5Y2'wnBU\"7 = org.ap.updateorg.apache.derby.iapi.sql.dictionary.sequencedescriptor", string0);
      
      System.setCurrentTimeMillis(1207L);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (6a}5Y2'wnBU\"7)", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0643625189132628
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" is not supported.");
      String[] stringArray0 = new String[4];
      stringArray0[0] = " is not supported.";
      stringArray0[1] = " is not supported.";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("+_zK=@e4'", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      stringArray0[2] = " is not supported.";
      stringArray0[3] = " is not supported.";
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint1.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint1, nameSpec0);
      assertEquals("FOREIGN KEY ( is not supported.,  is not supported.,  is not supported.,  is not supported.) REFERENCES  is not supported.( is not supported.,  is not supported.,  is not supported.,  is not supported.)", string0);
      
      String string1 = SQLUtil.normalize(" is not supported.", false);
      assertEquals("is not supported.", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.normalize("execute3*\"+] abq]?9lj.h%m=", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = "alter session";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("alter session", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append('J');
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = '!';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder3.insert((-3361), "execute3*\"+] abq]?9lj.h%m=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3361
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.44375728426014843
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*/";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "z.[%a7", true, stringArray0);
      defaultDBTable0.getCheckConstraints();
      SQLUtil.join("*/", " ADD ", stringArray0, "]*Y", "drop materialized view-", stringArray0);
      SQLUtil.parseColumnTypeAndSize("drop materialized view-");
      DBDataType.getInstance(13, " ADD ");
      DBCatalog dBCatalog0 = new DBCatalog("=?]E*~N", (Database) null);
      dBCatalog0.getTable("", false);
      SQLUtil.normalize("*/", false);
      URI uRI0 = MockURI.create("*/");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9328065726143313
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("update");
      StringBuilder stringBuilder0 = new StringBuilder("exec=");
      SQLUtil.addOptionalCondition("?sQ^", stringBuilder0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'e';
      charArray0[2] = 'X';
      charArray0[3] = '!';
      charArray0[4] = 'U';
      charArray0[5] = 'P';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1082, charArray0, 1697, 1082);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1082
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("token 63");
      defaultDBTable0.getUniqueConstraints(true);
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("^", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CONSTRAINT ^ ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "^");
      StringBuilder stringBuilder3 = stringBuilder2.append('}');
      StringBuilder stringBuilder4 = stringBuilder3.appendCodePoint(316);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder4);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Id2Q(jamOc49Eux2";
      stringArray0[1] = "Id2Q(jamOc49Eux2";
      stringArray0[2] = "Id2Q(jamOc49Eux2";
      stringArray0[3] = "Id2Q(jamOc49Eux2";
      stringArray0[4] = "Id2Q(jamOc49Eux2";
      stringArray0[5] = "Id2Q(jamOc49Eux2";
      String string0 = SQLUtil.innerJoin("Id2Q(jamOc49Eux2", stringArray0, "Id2Q(jamOc49Eux2", "create table ", stringArray0);
      assertEquals("Id2Q(jamOc49Eux2 as create table  on Id2Q(jamOc49Eux2.Id2Q(jamOc49Eux2 = create table .Id2Q(jamOc49Eux2 and Id2Q(jamOc49Eux2.Id2Q(jamOc49Eux2 = create table .Id2Q(jamOc49Eux2 and Id2Q(jamOc49Eux2.Id2Q(jamOc49Eux2 = create table .Id2Q(jamOc49Eux2 and Id2Q(jamOc49Eux2.Id2Q(jamOc49Eux2 = create table .Id2Q(jamOc49Eux2 and Id2Q(jamOc49Eux2.Id2Q(jamOc49Eux2 = create table .Id2Q(jamOc49Eux2 and Id2Q(jamOc49Eux2.Id2Q(jamOc49Eux2 = create table .Id2Q(jamOc49Eux2", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.normalize("Id2Q(jamOc49Eux2", false);
      assertEquals("Id2Q (jamOc49Eux2", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0262296229952916
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]z`4";
      stringArray0[1] = "]z`4";
      stringArray0[2] = "]z`4";
      stringArray0[3] = ". Please report this to the driver developers.";
      stringArray0[4] = "]z`4";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("]z`4 = ']z`4' AND ]z`4 = ']z`4' AND ]z`4 = ']z`4' AND . Please report this to the driver developers. = '. Please report this to the driver developers.' AND ]z`4 = ']z`4'", string0);
      
      DBSchema dBSchema0 = new DBSchema((String) null, (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]z`4", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ". Please report this to the driver developers.", true, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NU_M[{]b/P&", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (]z`4, ]z`4, ]z`4, . Please report this to the driver developers., ]z`4)", string1);
      
      String string2 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \". Please report this to the driver developers.\" ", string2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3445982481028228
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VersionNumber.valueOf("tEWM+Br!s?&!TP b$~'");
      String string0 = SQLUtil.normalize("tEWM+Br!s?&!TP b$~'", false);
      assertEquals("tEWM + Br ! s ? & ! TP b $ ~ ''", string0);
      
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7930940134110525
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.ap");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.ap";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.derby.impl.services.reflect.UpdateLoader");
      SQLUtil.mutatesStructure("org.ap");
      System.setCurrentTimeMillis(0L);
      SQLUtil.mutatesDataOrStructure("select");
      SQLUtil.mutatesDataOrStructure("executesequence_schema");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("N8(]]\"_", false, defaultDBTable0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.ANTLRStringStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Id2Q(jamOc49Eux2";
      stringArray0[1] = "Id2Q(jamOc49Eux2";
      stringArray0[2] = "Id2Q(jamOc49Eux2";
      stringArray0[3] = "Id2Q(jamOc49Eux2";
      stringArray0[4] = "Id2Q(jamOc49Eux2";
      stringArray0[5] = "Id2Q(jamOc49Eux2";
      SQLUtil.innerJoin("Id2Q(jamOc49Eux2", stringArray0, "Id2Q(jamOc49Eux2", "create table ", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      RowOutputText rowOutputText0 = new RowOutputText("Id2Q(jamOc49Eux2", "Id2Q(jamOc49Eux2", "Id2Q(jamOc49Eux2", true, "Id2Q(jamOc49Eux2");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE", (Object[]) stringArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format("create table", (Object[]) stringArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "K,Wn=";
      VersionNumber.valueOf("K,Wn=");
      SQLUtil.normalize("K,Wn=", false);
      SQLUtil.isQuery("select");
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("select", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1701);
      SQLUtil.addRequiredCondition("K cEC6E7\"JP8k*f", stringBuilder0);
      String string0 = "vddCrRomwv5099^-XXv";
      DBCatalog dBCatalog0 = new DBCatalog("vddCrRomwv5099^-XXv");
      DBSchema dBSchema0 = new DBSchema("SAouz)(6Sj?qq0a", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncateexecutesequence_schema", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("create materialized viewexecutesequence_schema");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can't destroy managed connection  with active transaction");
      Boolean boolean0 = SQLUtil.mutatesStructure("Can't destroy managed connection  with active transaction");
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-1080L));
      SQLUtil.mutatesDataOrStructure("Can't destroy managed connection  with active transaction");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("executesequence_schema");
      assertNull(boolean1);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("eKk|8", false, "?bO;K=CLGgE]lyBkf", "executesequence_schema");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK executesequence_schema", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.455460890873904
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]z`4";
      stringArray0[1] = "]z`4";
      stringArray0[2] = "]z`4";
      stringArray0[3] = ". Please report this to the driver developers.";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBSchema dBSchema0 = new DBSchema((String) null, (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]z`4", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ". Please report this to the driver developers.", true, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NU_M[{]b/P&", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.getOwner();
      dBForeignKeyConstraint0.isIdentical((DBObject) null);
      SQLUtil.typeAndName(dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      DBDataType dBDataType0 = DBDataType.getInstance(5, "NU_M[{]b/P&");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[4], defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      dBPrimaryKeyConstraint1.setDoc("schema null");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("QZ", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c2UW-Kf]0o;:z8");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter1);
      DBTable dBTable1 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable1, false, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6373189645296073
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis((-1080L));
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("org.apache.derby.iapi.services.property.PropertyFactory");
      assertNull(boolean1);
      
      String string0 = SQLUtil.normalize("c[d8D,JaY%mobdPnS", true);
      assertEquals("c [ d8D, JaY % mobdPnS", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("[)tP<eR=cx(Ci& XA");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      stringBuilder0.append((CharSequence) "[)tP<eR=cx(Ci& XA");
      StringBuilder stringBuilder2 = stringBuilder1.append('V');
      StringBuilder stringBuilder3 = stringBuilder0.append('V');
      StringBuilder stringBuilder4 = stringBuilder3.append((-553L));
      stringBuilder2.append((CharSequence) stringBuilder4);
      stringBuilder2.appendCodePoint(0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("8000000d-00d0-fd77-3ed8-000a0a0b1900", true);
      assertEquals("8000000d - 00d0 - fd77 - 3ed8 - 000a0a0b1900", string0);
  }
}
